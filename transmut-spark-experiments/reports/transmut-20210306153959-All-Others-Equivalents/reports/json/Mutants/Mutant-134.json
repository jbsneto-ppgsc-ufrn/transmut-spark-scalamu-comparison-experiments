{
  "id" : 134,
  "originalProgramId" : 6,
  "mutationOperator" : "MTR",
  "mutationOperatorDescription" : "Mapping Transformation Replacement",
  "mutantCode" : "def topNMoviesRecommendation(sortedMoviesSimilarities: RDD[((Int, Int), (Double, Int))], n: Int, minimumSimilarity: Double, minimumPairs: Int): RDD[String] = {\n  val relevantMoviesSimilarities: RDD[((Int, Int), (Double, Int))] = sortedMoviesSimilarities.filter { (x: ((Int, Int), (Double, Int))) => relevantSimilarities(x, minimumSimilarity, minimumPairs) }\n  val recommendedMoviesPairs: RDD[(Int, (Int, Double))] = relevantMoviesSimilarities.flatMap { (inputParameter: ((Int, Int), (Double, Int))) => {\n    val originalFunction = makeMoviesSimilaritiesPairs(_)\n    val originalValue = originalFunction(inputParameter)\n    originalValue.toList.reverse\n  } }\n  val recommendedMoviesList: RDD[(Int, Iterable[(Int, Double)])] = recommendedMoviesPairs.groupByKey()\n  val sortedRecommendedMoviesList: RDD[(Int, Iterable[(Int, Double)])] = recommendedMoviesList.sortByKey()\n  val topNRecommendedMoviesByMovie: RDD[String] = sortedRecommendedMoviesList.map { (x: (Int, Iterable[(Int, Double)])) => makeTopNRecommendedMoviesCSV(x, n) }\n  topNRecommendedMoviesByMovie\n}",
  "originalCode" : "def topNMoviesRecommendation(sortedMoviesSimilarities: RDD[((Int, Int), (Double, Int))], n: Int, minimumSimilarity: Double, minimumPairs: Int): RDD[String] = {\n\n    val relevantMoviesSimilarities: RDD[((Int, Int), (Double, Int))] = sortedMoviesSimilarities.filter((x: ((Int, Int), (Double, Int))) => relevantSimilarities(x, minimumSimilarity, minimumPairs))\n\n    val recommendedMoviesPairs: RDD[(Int, (Int, Double))] = relevantMoviesSimilarities.flatMap(makeMoviesSimilaritiesPairs)\n\n    val recommendedMoviesList: RDD[(Int, Iterable[(Int, Double)])] = recommendedMoviesPairs.groupByKey()\n\n    val sortedRecommendedMoviesList: RDD[(Int, Iterable[(Int, Double)])] = recommendedMoviesList.sortByKey()\n\n    val topNRecommendedMoviesByMovie: RDD[String] = sortedRecommendedMoviesList.map((x: (Int, Iterable[(Int, Double)])) => makeTopNRecommendedMoviesCSV(x, n))\n    topNRecommendedMoviesByMovie\n  }",
  "status" : "Equivalent"
}