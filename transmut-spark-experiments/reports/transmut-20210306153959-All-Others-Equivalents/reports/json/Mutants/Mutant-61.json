{
  "id" : 61,
  "originalProgramId" : 3,
  "mutationOperator" : "DTI",
  "mutationOperatorDescription" : "Distinct Transformation Insertion",
  "mutantCode" : "def join(rankingsLines: RDD[String], userVisitsLines: RDD[String]): RDD[(String, Float, Int)] = {\n  val rankings: RDD[Ranking] = rankingsLines.map(parseRankings)\n  val userVisits: RDD[UserVisit] = userVisitsLines.map(parseUserVisits)\n  val filteredUV: RDD[UserVisit] = userVisits.filter(filterUserVisitsDateRange)\n  val subqueryUV: RDD[(String, UserVisit)] = filteredUV.map(mapUserVisitToTuple)\n  val subqueryR: RDD[(String, Ranking)] = rankings.map(mapRankingToTuple)\n  val subqueryJoin: RDD[(String, (Ranking, UserVisit))] = subqueryR.join(subqueryUV)\n  val subqueryJoinValues: RDD[(Ranking, UserVisit)] = subqueryJoin.values\n  val subquerySelect: RDD[(String, (Float, Int))] = subqueryJoinValues.map(mapRankingAndUserVisitJoinToTuple).distinct()\n  val subqueryGroup: RDD[(String, Iterable[(Float, Int)])] = subquerySelect.groupByKey()\n  val subqueryAggregation: RDD[(String, Float, Int)] = subqueryGroup.map(mapAggregation)\n  val results: RDD[(String, Float, Int)] = subqueryAggregation.sortBy(_._2, false)\n  results\n}",
  "originalCode" : "def join(rankingsLines: RDD[String], userVisitsLines: RDD[String]): RDD[(String, Float, Int)] = {\n    val rankings: RDD[Ranking] = rankingsLines.map(parseRankings)\n    val userVisits: RDD[UserVisit] = userVisitsLines.map(parseUserVisits)\n    val filteredUV: RDD[UserVisit] = userVisits.filter(filterUserVisitsDateRange)\n    val subqueryUV: RDD[(String, UserVisit)] = filteredUV.map(mapUserVisitToTuple)\n    val subqueryR: RDD[(String, Ranking)] = rankings.map(mapRankingToTuple)\n    val subqueryJoin: RDD[(String, (Ranking, UserVisit))] = subqueryR.join(subqueryUV)\n    val subqueryJoinValues: RDD[(Ranking, UserVisit)] = subqueryJoin.values\n    val subquerySelect: RDD[(String, (Float, Int))] = subqueryJoinValues.map(mapRankingAndUserVisitJoinToTuple)\n    val subqueryGroup: RDD[(String, Iterable[(Float, Int)])] = subquerySelect.groupByKey()\n    val subqueryAggregation: RDD[(String, Float, Int)] = subqueryGroup.map(mapAggregation)\n    val results: RDD[(String, Float, Int)] = subqueryAggregation.sortBy(_._2, false)\n    results\n  }",
  "status" : "Killed"
}