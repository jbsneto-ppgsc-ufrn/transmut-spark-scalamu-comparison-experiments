{
  "processStartDateTime" : "2021-03-06T23:08:14.669",
  "processDurationSeconds" : 1768,
  "programSources" : [
    {
      "id" : 1,
      "source" : "target/transmut-20210306230814/mutated-src/example/MovieLensExploration.scala",
      "sourceName" : "MovieLensExploration",
      "programs" : [
        {
          "id" : 1,
          "programSourceId" : 1,
          "name" : "parseRDDs",
          "code" : "def parseRDDs(ratingsCSV: RDD[String], moviesCSV: RDD[String], tagsCSV: RDD[String]): (RDD[Rating], RDD[Movie], RDD[Tag]) = {\n    val ratings: RDD[Rating] = ratingsCSV.flatMap(parseRatings)\n    val movies: RDD[Movie] = moviesCSV.flatMap(parseMovies)\n    val tags: RDD[Tag] = tagsCSV.flatMap(parseTags)\n    (ratings, movies, tags)\n  }",
          "datasets" : [
            {
              "id" : 1,
              "name" : "ratingsCSV",
              "datasetType" : "RDD[String]",
              "inputDataset" : true,
              "outputDataset" : false
            },
            {
              "id" : 2,
              "name" : "moviesCSV",
              "datasetType" : "RDD[String]",
              "inputDataset" : true,
              "outputDataset" : false
            },
            {
              "id" : 3,
              "name" : "tagsCSV",
              "datasetType" : "RDD[String]",
              "inputDataset" : true,
              "outputDataset" : false
            },
            {
              "id" : 4,
              "name" : "ratings",
              "datasetType" : "RDD[Rating]",
              "inputDataset" : false,
              "outputDataset" : true
            },
            {
              "id" : 5,
              "name" : "movies",
              "datasetType" : "RDD[Movie]",
              "inputDataset" : false,
              "outputDataset" : true
            },
            {
              "id" : 6,
              "name" : "tags",
              "datasetType" : "RDD[Tag]",
              "inputDataset" : false,
              "outputDataset" : true
            }
          ],
          "transformations" : [
            {
              "id" : 1,
              "name" : "flatMap",
              "inputTypes" : [
                "RDD[String]"
              ],
              "outputTypes" : [
                "RDD[Rating]"
              ],
              "loadTransformation" : false
            },
            {
              "id" : 2,
              "name" : "flatMap",
              "inputTypes" : [
                "RDD[String]"
              ],
              "outputTypes" : [
                "RDD[Movie]"
              ],
              "loadTransformation" : false
            },
            {
              "id" : 3,
              "name" : "flatMap",
              "inputTypes" : [
                "RDD[String]"
              ],
              "outputTypes" : [
                "RDD[Tag]"
              ],
              "loadTransformation" : false
            }
          ],
          "edges" : [
            {
              "id" : 1,
              "datasetId" : 1,
              "transformationId" : 1,
              "direction" : "DatasetToTransformation"
            },
            {
              "id" : 2,
              "datasetId" : 4,
              "transformationId" : 1,
              "direction" : "TransformationToDataset"
            },
            {
              "id" : 3,
              "datasetId" : 2,
              "transformationId" : 2,
              "direction" : "DatasetToTransformation"
            },
            {
              "id" : 4,
              "datasetId" : 5,
              "transformationId" : 2,
              "direction" : "TransformationToDataset"
            },
            {
              "id" : 5,
              "datasetId" : 3,
              "transformationId" : 3,
              "direction" : "DatasetToTransformation"
            },
            {
              "id" : 6,
              "datasetId" : 6,
              "transformationId" : 3,
              "direction" : "TransformationToDataset"
            }
          ],
          "mutants" : [
            {
              "id" : 1,
              "originalProgramId" : 1,
              "mutationOperator" : "MTR",
              "mutationOperatorDescription" : "Mapping Transformation Replacement",
              "mutantCode" : "def parseRDDs(ratingsCSV: RDD[String], moviesCSV: RDD[String], tagsCSV: RDD[String]): (RDD[Rating], RDD[Movie], RDD[Tag]) = {\n  val ratings: RDD[Rating] = ratingsCSV.flatMap { (inputParameter: String) => {\n    val originalFunction = parseRatings(_)\n    val originalValue = originalFunction(inputParameter)\n    originalValue.headOption\n  } }\n  val movies: RDD[Movie] = moviesCSV.flatMap(parseMovies)\n  val tags: RDD[Tag] = tagsCSV.flatMap(parseTags)\n  (ratings, movies, tags)\n}",
              "originalCode" : "def parseRDDs(ratingsCSV: RDD[String], moviesCSV: RDD[String], tagsCSV: RDD[String]): (RDD[Rating], RDD[Movie], RDD[Tag]) = {\n    val ratings: RDD[Rating] = ratingsCSV.flatMap(parseRatings)\n    val movies: RDD[Movie] = moviesCSV.flatMap(parseMovies)\n    val tags: RDD[Tag] = tagsCSV.flatMap(parseTags)\n    (ratings, movies, tags)\n  }",
              "status" : "Equivalent"
            },
            {
              "id" : 2,
              "originalProgramId" : 1,
              "mutationOperator" : "MTR",
              "mutationOperatorDescription" : "Mapping Transformation Replacement",
              "mutantCode" : "def parseRDDs(ratingsCSV: RDD[String], moviesCSV: RDD[String], tagsCSV: RDD[String]): (RDD[Rating], RDD[Movie], RDD[Tag]) = {\n  val ratings: RDD[Rating] = ratingsCSV.flatMap { (inputParameter: String) => {\n    val originalFunction = parseRatings(_)\n    val originalValue = originalFunction(inputParameter)\n    originalValue.toList.tail\n  } }\n  val movies: RDD[Movie] = moviesCSV.flatMap(parseMovies)\n  val tags: RDD[Tag] = tagsCSV.flatMap(parseTags)\n  (ratings, movies, tags)\n}",
              "originalCode" : "def parseRDDs(ratingsCSV: RDD[String], moviesCSV: RDD[String], tagsCSV: RDD[String]): (RDD[Rating], RDD[Movie], RDD[Tag]) = {\n    val ratings: RDD[Rating] = ratingsCSV.flatMap(parseRatings)\n    val movies: RDD[Movie] = moviesCSV.flatMap(parseMovies)\n    val tags: RDD[Tag] = tagsCSV.flatMap(parseTags)\n    (ratings, movies, tags)\n  }",
              "status" : "Killed"
            },
            {
              "id" : 3,
              "originalProgramId" : 1,
              "mutationOperator" : "MTR",
              "mutationOperatorDescription" : "Mapping Transformation Replacement",
              "mutantCode" : "def parseRDDs(ratingsCSV: RDD[String], moviesCSV: RDD[String], tagsCSV: RDD[String]): (RDD[Rating], RDD[Movie], RDD[Tag]) = {\n  val ratings: RDD[Rating] = ratingsCSV.flatMap { (inputParameter: String) => {\n    val originalFunction = parseRatings(_)\n    val originalValue = originalFunction(inputParameter)\n    originalValue.toList.reverse\n  } }\n  val movies: RDD[Movie] = moviesCSV.flatMap(parseMovies)\n  val tags: RDD[Tag] = tagsCSV.flatMap(parseTags)\n  (ratings, movies, tags)\n}",
              "originalCode" : "def parseRDDs(ratingsCSV: RDD[String], moviesCSV: RDD[String], tagsCSV: RDD[String]): (RDD[Rating], RDD[Movie], RDD[Tag]) = {\n    val ratings: RDD[Rating] = ratingsCSV.flatMap(parseRatings)\n    val movies: RDD[Movie] = moviesCSV.flatMap(parseMovies)\n    val tags: RDD[Tag] = tagsCSV.flatMap(parseTags)\n    (ratings, movies, tags)\n  }",
              "status" : "Equivalent"
            },
            {
              "id" : 4,
              "originalProgramId" : 1,
              "mutationOperator" : "MTR",
              "mutationOperatorDescription" : "Mapping Transformation Replacement",
              "mutantCode" : "def parseRDDs(ratingsCSV: RDD[String], moviesCSV: RDD[String], tagsCSV: RDD[String]): (RDD[Rating], RDD[Movie], RDD[Tag]) = {\n  val ratings: RDD[Rating] = ratingsCSV.flatMap { (inputParameter: String) => {\n    val originalFunction = parseRatings(_)\n    val originalValue = originalFunction(inputParameter)\n    List[Rating]()\n  } }\n  val movies: RDD[Movie] = moviesCSV.flatMap(parseMovies)\n  val tags: RDD[Tag] = tagsCSV.flatMap(parseTags)\n  (ratings, movies, tags)\n}",
              "originalCode" : "def parseRDDs(ratingsCSV: RDD[String], moviesCSV: RDD[String], tagsCSV: RDD[String]): (RDD[Rating], RDD[Movie], RDD[Tag]) = {\n    val ratings: RDD[Rating] = ratingsCSV.flatMap(parseRatings)\n    val movies: RDD[Movie] = moviesCSV.flatMap(parseMovies)\n    val tags: RDD[Tag] = tagsCSV.flatMap(parseTags)\n    (ratings, movies, tags)\n  }",
              "status" : "Killed"
            },
            {
              "id" : 5,
              "originalProgramId" : 1,
              "mutationOperator" : "MTR",
              "mutationOperatorDescription" : "Mapping Transformation Replacement",
              "mutantCode" : "def parseRDDs(ratingsCSV: RDD[String], moviesCSV: RDD[String], tagsCSV: RDD[String]): (RDD[Rating], RDD[Movie], RDD[Tag]) = {\n  val ratings: RDD[Rating] = ratingsCSV.flatMap(parseRatings)\n  val movies: RDD[Movie] = moviesCSV.flatMap { (inputParameter: String) => {\n    val originalFunction = parseMovies(_)\n    val originalValue = originalFunction(inputParameter)\n    originalValue.headOption\n  } }\n  val tags: RDD[Tag] = tagsCSV.flatMap(parseTags)\n  (ratings, movies, tags)\n}",
              "originalCode" : "def parseRDDs(ratingsCSV: RDD[String], moviesCSV: RDD[String], tagsCSV: RDD[String]): (RDD[Rating], RDD[Movie], RDD[Tag]) = {\n    val ratings: RDD[Rating] = ratingsCSV.flatMap(parseRatings)\n    val movies: RDD[Movie] = moviesCSV.flatMap(parseMovies)\n    val tags: RDD[Tag] = tagsCSV.flatMap(parseTags)\n    (ratings, movies, tags)\n  }",
              "status" : "Equivalent"
            },
            {
              "id" : 6,
              "originalProgramId" : 1,
              "mutationOperator" : "MTR",
              "mutationOperatorDescription" : "Mapping Transformation Replacement",
              "mutantCode" : "def parseRDDs(ratingsCSV: RDD[String], moviesCSV: RDD[String], tagsCSV: RDD[String]): (RDD[Rating], RDD[Movie], RDD[Tag]) = {\n  val ratings: RDD[Rating] = ratingsCSV.flatMap(parseRatings)\n  val movies: RDD[Movie] = moviesCSV.flatMap { (inputParameter: String) => {\n    val originalFunction = parseMovies(_)\n    val originalValue = originalFunction(inputParameter)\n    originalValue.toList.tail\n  } }\n  val tags: RDD[Tag] = tagsCSV.flatMap(parseTags)\n  (ratings, movies, tags)\n}",
              "originalCode" : "def parseRDDs(ratingsCSV: RDD[String], moviesCSV: RDD[String], tagsCSV: RDD[String]): (RDD[Rating], RDD[Movie], RDD[Tag]) = {\n    val ratings: RDD[Rating] = ratingsCSV.flatMap(parseRatings)\n    val movies: RDD[Movie] = moviesCSV.flatMap(parseMovies)\n    val tags: RDD[Tag] = tagsCSV.flatMap(parseTags)\n    (ratings, movies, tags)\n  }",
              "status" : "Killed"
            },
            {
              "id" : 7,
              "originalProgramId" : 1,
              "mutationOperator" : "MTR",
              "mutationOperatorDescription" : "Mapping Transformation Replacement",
              "mutantCode" : "def parseRDDs(ratingsCSV: RDD[String], moviesCSV: RDD[String], tagsCSV: RDD[String]): (RDD[Rating], RDD[Movie], RDD[Tag]) = {\n  val ratings: RDD[Rating] = ratingsCSV.flatMap(parseRatings)\n  val movies: RDD[Movie] = moviesCSV.flatMap { (inputParameter: String) => {\n    val originalFunction = parseMovies(_)\n    val originalValue = originalFunction(inputParameter)\n    originalValue.toList.reverse\n  } }\n  val tags: RDD[Tag] = tagsCSV.flatMap(parseTags)\n  (ratings, movies, tags)\n}",
              "originalCode" : "def parseRDDs(ratingsCSV: RDD[String], moviesCSV: RDD[String], tagsCSV: RDD[String]): (RDD[Rating], RDD[Movie], RDD[Tag]) = {\n    val ratings: RDD[Rating] = ratingsCSV.flatMap(parseRatings)\n    val movies: RDD[Movie] = moviesCSV.flatMap(parseMovies)\n    val tags: RDD[Tag] = tagsCSV.flatMap(parseTags)\n    (ratings, movies, tags)\n  }",
              "status" : "Equivalent"
            },
            {
              "id" : 8,
              "originalProgramId" : 1,
              "mutationOperator" : "MTR",
              "mutationOperatorDescription" : "Mapping Transformation Replacement",
              "mutantCode" : "def parseRDDs(ratingsCSV: RDD[String], moviesCSV: RDD[String], tagsCSV: RDD[String]): (RDD[Rating], RDD[Movie], RDD[Tag]) = {\n  val ratings: RDD[Rating] = ratingsCSV.flatMap(parseRatings)\n  val movies: RDD[Movie] = moviesCSV.flatMap { (inputParameter: String) => {\n    val originalFunction = parseMovies(_)\n    val originalValue = originalFunction(inputParameter)\n    List[Movie]()\n  } }\n  val tags: RDD[Tag] = tagsCSV.flatMap(parseTags)\n  (ratings, movies, tags)\n}",
              "originalCode" : "def parseRDDs(ratingsCSV: RDD[String], moviesCSV: RDD[String], tagsCSV: RDD[String]): (RDD[Rating], RDD[Movie], RDD[Tag]) = {\n    val ratings: RDD[Rating] = ratingsCSV.flatMap(parseRatings)\n    val movies: RDD[Movie] = moviesCSV.flatMap(parseMovies)\n    val tags: RDD[Tag] = tagsCSV.flatMap(parseTags)\n    (ratings, movies, tags)\n  }",
              "status" : "Killed"
            },
            {
              "id" : 9,
              "originalProgramId" : 1,
              "mutationOperator" : "MTR",
              "mutationOperatorDescription" : "Mapping Transformation Replacement",
              "mutantCode" : "def parseRDDs(ratingsCSV: RDD[String], moviesCSV: RDD[String], tagsCSV: RDD[String]): (RDD[Rating], RDD[Movie], RDD[Tag]) = {\n  val ratings: RDD[Rating] = ratingsCSV.flatMap(parseRatings)\n  val movies: RDD[Movie] = moviesCSV.flatMap(parseMovies)\n  val tags: RDD[Tag] = tagsCSV.flatMap { (inputParameter: String) => {\n    val originalFunction = parseTags(_)\n    val originalValue = originalFunction(inputParameter)\n    originalValue.headOption\n  } }\n  (ratings, movies, tags)\n}",
              "originalCode" : "def parseRDDs(ratingsCSV: RDD[String], moviesCSV: RDD[String], tagsCSV: RDD[String]): (RDD[Rating], RDD[Movie], RDD[Tag]) = {\n    val ratings: RDD[Rating] = ratingsCSV.flatMap(parseRatings)\n    val movies: RDD[Movie] = moviesCSV.flatMap(parseMovies)\n    val tags: RDD[Tag] = tagsCSV.flatMap(parseTags)\n    (ratings, movies, tags)\n  }",
              "status" : "Equivalent"
            },
            {
              "id" : 10,
              "originalProgramId" : 1,
              "mutationOperator" : "MTR",
              "mutationOperatorDescription" : "Mapping Transformation Replacement",
              "mutantCode" : "def parseRDDs(ratingsCSV: RDD[String], moviesCSV: RDD[String], tagsCSV: RDD[String]): (RDD[Rating], RDD[Movie], RDD[Tag]) = {\n  val ratings: RDD[Rating] = ratingsCSV.flatMap(parseRatings)\n  val movies: RDD[Movie] = moviesCSV.flatMap(parseMovies)\n  val tags: RDD[Tag] = tagsCSV.flatMap { (inputParameter: String) => {\n    val originalFunction = parseTags(_)\n    val originalValue = originalFunction(inputParameter)\n    originalValue.toList.tail\n  } }\n  (ratings, movies, tags)\n}",
              "originalCode" : "def parseRDDs(ratingsCSV: RDD[String], moviesCSV: RDD[String], tagsCSV: RDD[String]): (RDD[Rating], RDD[Movie], RDD[Tag]) = {\n    val ratings: RDD[Rating] = ratingsCSV.flatMap(parseRatings)\n    val movies: RDD[Movie] = moviesCSV.flatMap(parseMovies)\n    val tags: RDD[Tag] = tagsCSV.flatMap(parseTags)\n    (ratings, movies, tags)\n  }",
              "status" : "Killed"
            },
            {
              "id" : 11,
              "originalProgramId" : 1,
              "mutationOperator" : "MTR",
              "mutationOperatorDescription" : "Mapping Transformation Replacement",
              "mutantCode" : "def parseRDDs(ratingsCSV: RDD[String], moviesCSV: RDD[String], tagsCSV: RDD[String]): (RDD[Rating], RDD[Movie], RDD[Tag]) = {\n  val ratings: RDD[Rating] = ratingsCSV.flatMap(parseRatings)\n  val movies: RDD[Movie] = moviesCSV.flatMap(parseMovies)\n  val tags: RDD[Tag] = tagsCSV.flatMap { (inputParameter: String) => {\n    val originalFunction = parseTags(_)\n    val originalValue = originalFunction(inputParameter)\n    originalValue.toList.reverse\n  } }\n  (ratings, movies, tags)\n}",
              "originalCode" : "def parseRDDs(ratingsCSV: RDD[String], moviesCSV: RDD[String], tagsCSV: RDD[String]): (RDD[Rating], RDD[Movie], RDD[Tag]) = {\n    val ratings: RDD[Rating] = ratingsCSV.flatMap(parseRatings)\n    val movies: RDD[Movie] = moviesCSV.flatMap(parseMovies)\n    val tags: RDD[Tag] = tagsCSV.flatMap(parseTags)\n    (ratings, movies, tags)\n  }",
              "status" : "Equivalent"
            },
            {
              "id" : 12,
              "originalProgramId" : 1,
              "mutationOperator" : "MTR",
              "mutationOperatorDescription" : "Mapping Transformation Replacement",
              "mutantCode" : "def parseRDDs(ratingsCSV: RDD[String], moviesCSV: RDD[String], tagsCSV: RDD[String]): (RDD[Rating], RDD[Movie], RDD[Tag]) = {\n  val ratings: RDD[Rating] = ratingsCSV.flatMap(parseRatings)\n  val movies: RDD[Movie] = moviesCSV.flatMap(parseMovies)\n  val tags: RDD[Tag] = tagsCSV.flatMap { (inputParameter: String) => {\n    val originalFunction = parseTags(_)\n    val originalValue = originalFunction(inputParameter)\n    List[Tag]()\n  } }\n  (ratings, movies, tags)\n}",
              "originalCode" : "def parseRDDs(ratingsCSV: RDD[String], moviesCSV: RDD[String], tagsCSV: RDD[String]): (RDD[Rating], RDD[Movie], RDD[Tag]) = {\n    val ratings: RDD[Rating] = ratingsCSV.flatMap(parseRatings)\n    val movies: RDD[Movie] = moviesCSV.flatMap(parseMovies)\n    val tags: RDD[Tag] = tagsCSV.flatMap(parseTags)\n    (ratings, movies, tags)\n  }",
              "status" : "Killed"
            },
            {
              "id" : 13,
              "originalProgramId" : 1,
              "mutationOperator" : "DTI",
              "mutationOperatorDescription" : "Distinct Transformation Insertion",
              "mutantCode" : "def parseRDDs(ratingsCSV: RDD[String], moviesCSV: RDD[String], tagsCSV: RDD[String]): (RDD[Rating], RDD[Movie], RDD[Tag]) = {\n  val ratings: RDD[Rating] = ratingsCSV.flatMap(parseRatings).distinct()\n  val movies: RDD[Movie] = moviesCSV.flatMap(parseMovies)\n  val tags: RDD[Tag] = tagsCSV.flatMap(parseTags)\n  (ratings, movies, tags)\n}",
              "originalCode" : "def parseRDDs(ratingsCSV: RDD[String], moviesCSV: RDD[String], tagsCSV: RDD[String]): (RDD[Rating], RDD[Movie], RDD[Tag]) = {\n    val ratings: RDD[Rating] = ratingsCSV.flatMap(parseRatings)\n    val movies: RDD[Movie] = moviesCSV.flatMap(parseMovies)\n    val tags: RDD[Tag] = tagsCSV.flatMap(parseTags)\n    (ratings, movies, tags)\n  }",
              "status" : "Lived"
            },
            {
              "id" : 14,
              "originalProgramId" : 1,
              "mutationOperator" : "DTI",
              "mutationOperatorDescription" : "Distinct Transformation Insertion",
              "mutantCode" : "def parseRDDs(ratingsCSV: RDD[String], moviesCSV: RDD[String], tagsCSV: RDD[String]): (RDD[Rating], RDD[Movie], RDD[Tag]) = {\n  val ratings: RDD[Rating] = ratingsCSV.flatMap(parseRatings)\n  val movies: RDD[Movie] = moviesCSV.flatMap(parseMovies).distinct()\n  val tags: RDD[Tag] = tagsCSV.flatMap(parseTags)\n  (ratings, movies, tags)\n}",
              "originalCode" : "def parseRDDs(ratingsCSV: RDD[String], moviesCSV: RDD[String], tagsCSV: RDD[String]): (RDD[Rating], RDD[Movie], RDD[Tag]) = {\n    val ratings: RDD[Rating] = ratingsCSV.flatMap(parseRatings)\n    val movies: RDD[Movie] = moviesCSV.flatMap(parseMovies)\n    val tags: RDD[Tag] = tagsCSV.flatMap(parseTags)\n    (ratings, movies, tags)\n  }",
              "status" : "Lived"
            },
            {
              "id" : 15,
              "originalProgramId" : 1,
              "mutationOperator" : "DTI",
              "mutationOperatorDescription" : "Distinct Transformation Insertion",
              "mutantCode" : "def parseRDDs(ratingsCSV: RDD[String], moviesCSV: RDD[String], tagsCSV: RDD[String]): (RDD[Rating], RDD[Movie], RDD[Tag]) = {\n  val ratings: RDD[Rating] = ratingsCSV.flatMap(parseRatings)\n  val movies: RDD[Movie] = moviesCSV.flatMap(parseMovies)\n  val tags: RDD[Tag] = tagsCSV.flatMap(parseTags).distinct()\n  (ratings, movies, tags)\n}",
              "originalCode" : "def parseRDDs(ratingsCSV: RDD[String], moviesCSV: RDD[String], tagsCSV: RDD[String]): (RDD[Rating], RDD[Movie], RDD[Tag]) = {\n    val ratings: RDD[Rating] = ratingsCSV.flatMap(parseRatings)\n    val movies: RDD[Movie] = moviesCSV.flatMap(parseMovies)\n    val tags: RDD[Tag] = tagsCSV.flatMap(parseTags)\n    (ratings, movies, tags)\n  }",
              "status" : "Lived"
            }
          ],
          "removedMutants" : [
          ],
          "mutationOperatorsMetrics" : {
            "totalMutantsPerOperator" : {
              "FTD" : 0,
              "JTR" : 0,
              "UTR" : 0,
              "MTR" : 12,
              "UTD" : 0,
              "OTD" : 0,
              "BTR" : 0,
              "STR" : 0,
              "BTS" : 0,
              "ATR" : 0,
              "OTI" : 0,
              "DTI" : 3,
              "DTD" : 0,
              "NFTP" : 0,
              "UTS" : 0
            },
            "totalKilledMutantsPerOperator" : {
              "FTD" : 0,
              "JTR" : 0,
              "UTR" : 0,
              "MTR" : 6,
              "UTD" : 0,
              "OTD" : 0,
              "BTR" : 0,
              "STR" : 0,
              "BTS" : 0,
              "ATR" : 0,
              "OTI" : 0,
              "DTI" : 0,
              "DTD" : 0,
              "NFTP" : 0,
              "UTS" : 0
            },
            "totalLivedMutantsPerOperator" : {
              "FTD" : 0,
              "JTR" : 0,
              "UTR" : 0,
              "MTR" : 0,
              "UTD" : 0,
              "OTD" : 0,
              "BTR" : 0,
              "STR" : 0,
              "BTS" : 0,
              "ATR" : 0,
              "OTI" : 0,
              "DTI" : 3,
              "DTD" : 0,
              "NFTP" : 0,
              "UTS" : 0
            },
            "totalEquivalentMutantsPerOperator" : {
              "FTD" : 0,
              "JTR" : 0,
              "UTR" : 0,
              "MTR" : 6,
              "UTD" : 0,
              "OTD" : 0,
              "BTR" : 0,
              "STR" : 0,
              "BTS" : 0,
              "ATR" : 0,
              "OTI" : 0,
              "DTI" : 0,
              "DTD" : 0,
              "NFTP" : 0,
              "UTS" : 0
            },
            "totalErrorMutantsPerOperator" : {
              "FTD" : 0,
              "JTR" : 0,
              "UTR" : 0,
              "MTR" : 0,
              "UTD" : 0,
              "OTD" : 0,
              "BTR" : 0,
              "STR" : 0,
              "BTS" : 0,
              "ATR" : 0,
              "OTI" : 0,
              "DTI" : 0,
              "DTD" : 0,
              "NFTP" : 0,
              "UTS" : 0
            },
            "totalRemovedMutantsPerOperator" : {
              "FTD" : 0,
              "JTR" : 0,
              "UTR" : 0,
              "MTR" : 0,
              "UTD" : 0,
              "OTD" : 0,
              "BTR" : 0,
              "STR" : 0,
              "BTS" : 0,
              "ATR" : 0,
              "OTI" : 0,
              "DTI" : 0,
              "DTD" : 0,
              "NFTP" : 0,
              "UTS" : 0
            },
            "descriptionPerOperator" : {
              "FTD" : "Filter Transformation Deletion",
              "JTR" : "Join Transformation Replacement",
              "UTR" : "Unary Transformation Replacement",
              "MTR" : "Mapping Transformation Replacement",
              "UTD" : "Unary Transformation Deletion",
              "OTD" : "Order Transformation Deletion",
              "BTR" : "Binary Transformation Replacement",
              "STR" : "Set Transformation Replacement",
              "BTS" : "Binary Transformation Swap",
              "ATR" : "Aggregation Transformation Replacement",
              "OTI" : "Order Transformation Inversion",
              "DTI" : "Distinct Transformation Insertion",
              "DTD" : "Distinct Transformation Deletion",
              "NFTP" : "Negation of Filter Transformation Predicate",
              "UTS" : "Unary Transformation Swap"
            }
          },
          "totalDatasets" : 6,
          "totalTransformations" : 3,
          "totalMutants" : 15,
          "totalKilledMutants" : 6,
          "totalLivedMutants" : 3,
          "totalEquivalentMutants" : 6,
          "totalErrorMutants" : 0,
          "totalRemovedMutants" : 0,
          "mutationScore" : 0.6666667
        },
        {
          "id" : 2,
          "programSourceId" : 1,
          "name" : "moviesPerYearCount",
          "code" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n    val yearTuple: RDD[(Int, Int)] = movies.map((m: Movie) => (m.year, 1))\n    val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey((a: Int, b: Int) => a + b)\n    val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map((t: (Int, Int)) => (t._2, t._1))\n    val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n    moviesPerYearInverseSorted\n  }",
          "datasets" : [
            {
              "id" : 7,
              "name" : "movies",
              "datasetType" : "RDD[Movie]",
              "inputDataset" : true,
              "outputDataset" : false
            },
            {
              "id" : 8,
              "name" : "yearTuple",
              "datasetType" : "RDD[(Int, Int)]",
              "inputDataset" : false,
              "outputDataset" : false
            },
            {
              "id" : 9,
              "name" : "moviesPerYear",
              "datasetType" : "RDD[(Int, Int)]",
              "inputDataset" : false,
              "outputDataset" : false
            },
            {
              "id" : 10,
              "name" : "moviesPerYearInverse",
              "datasetType" : "RDD[(Int, Int)]",
              "inputDataset" : false,
              "outputDataset" : false
            },
            {
              "id" : 11,
              "name" : "moviesPerYearInverseSorted",
              "datasetType" : "RDD[(Int, Int)]",
              "inputDataset" : false,
              "outputDataset" : true
            }
          ],
          "transformations" : [
            {
              "id" : 4,
              "name" : "map",
              "inputTypes" : [
                "RDD[Movie]"
              ],
              "outputTypes" : [
                "RDD[(Int, Int)]"
              ],
              "loadTransformation" : false
            },
            {
              "id" : 5,
              "name" : "reduceByKey",
              "inputTypes" : [
                "RDD[(Int, Int)]"
              ],
              "outputTypes" : [
                "RDD[(Int, Int)]"
              ],
              "loadTransformation" : false
            },
            {
              "id" : 6,
              "name" : "map",
              "inputTypes" : [
                "RDD[(Int, Int)]"
              ],
              "outputTypes" : [
                "RDD[(Int, Int)]"
              ],
              "loadTransformation" : false
            },
            {
              "id" : 7,
              "name" : "sortByKey",
              "inputTypes" : [
                "RDD[(Int, Int)]"
              ],
              "outputTypes" : [
                "RDD[(Int, Int)]"
              ],
              "loadTransformation" : false
            }
          ],
          "edges" : [
            {
              "id" : 7,
              "datasetId" : 7,
              "transformationId" : 4,
              "direction" : "DatasetToTransformation"
            },
            {
              "id" : 8,
              "datasetId" : 8,
              "transformationId" : 4,
              "direction" : "TransformationToDataset"
            },
            {
              "id" : 9,
              "datasetId" : 8,
              "transformationId" : 5,
              "direction" : "DatasetToTransformation"
            },
            {
              "id" : 10,
              "datasetId" : 9,
              "transformationId" : 5,
              "direction" : "TransformationToDataset"
            },
            {
              "id" : 11,
              "datasetId" : 9,
              "transformationId" : 6,
              "direction" : "DatasetToTransformation"
            },
            {
              "id" : 12,
              "datasetId" : 10,
              "transformationId" : 6,
              "direction" : "TransformationToDataset"
            },
            {
              "id" : 13,
              "datasetId" : 10,
              "transformationId" : 7,
              "direction" : "DatasetToTransformation"
            },
            {
              "id" : 14,
              "datasetId" : 11,
              "transformationId" : 7,
              "direction" : "TransformationToDataset"
            }
          ],
          "mutants" : [
            {
              "id" : 16,
              "originalProgramId" : 2,
              "mutationOperator" : "UTS",
              "mutationOperatorDescription" : "Unary Transformation Swap",
              "mutantCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n  val yearTuple: RDD[(Int, Int)] = movies.map { (m: Movie) => (m.year, 1) }\n  val moviesPerYear: RDD[(Int, Int)] = yearTuple.map { (t: (Int, Int)) => (t._2, t._1) }\n  val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.reduceByKey { (a: Int, b: Int) => a + b }\n  val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n  moviesPerYearInverseSorted\n}",
              "originalCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n    val yearTuple: RDD[(Int, Int)] = movies.map((m: Movie) => (m.year, 1))\n    val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey((a: Int, b: Int) => a + b)\n    val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map((t: (Int, Int)) => (t._2, t._1))\n    val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n    moviesPerYearInverseSorted\n  }",
              "status" : "Killed"
            },
            {
              "id" : 17,
              "originalProgramId" : 2,
              "mutationOperator" : "UTS",
              "mutationOperatorDescription" : "Unary Transformation Swap",
              "mutantCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n  val yearTuple: RDD[(Int, Int)] = movies.map { (m: Movie) => (m.year, 1) }\n  val moviesPerYear: RDD[(Int, Int)] = yearTuple.sortByKey(false)\n  val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map { (t: (Int, Int)) => (t._2, t._1) }\n  val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.reduceByKey { (a: Int, b: Int) => a + b }\n  moviesPerYearInverseSorted\n}",
              "originalCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n    val yearTuple: RDD[(Int, Int)] = movies.map((m: Movie) => (m.year, 1))\n    val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey((a: Int, b: Int) => a + b)\n    val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map((t: (Int, Int)) => (t._2, t._1))\n    val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n    moviesPerYearInverseSorted\n  }",
              "status" : "Killed"
            },
            {
              "id" : 18,
              "originalProgramId" : 2,
              "mutationOperator" : "UTS",
              "mutationOperatorDescription" : "Unary Transformation Swap",
              "mutantCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n  val yearTuple: RDD[(Int, Int)] = movies.map { (m: Movie) => (m.year, 1) }\n  val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey { (a: Int, b: Int) => a + b }\n  val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.sortByKey(false)\n  val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.map { (t: (Int, Int)) => (t._2, t._1) }\n  moviesPerYearInverseSorted\n}",
              "originalCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n    val yearTuple: RDD[(Int, Int)] = movies.map((m: Movie) => (m.year, 1))\n    val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey((a: Int, b: Int) => a + b)\n    val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map((t: (Int, Int)) => (t._2, t._1))\n    val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n    moviesPerYearInverseSorted\n  }",
              "status" : "Lived"
            },
            {
              "id" : 19,
              "originalProgramId" : 2,
              "mutationOperator" : "UTR",
              "mutationOperatorDescription" : "Unary Transformation Replacement",
              "mutantCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n  val yearTuple: RDD[(Int, Int)] = movies.map { (m: Movie) => (m.year, 1) }\n  val moviesPerYear: RDD[(Int, Int)] = yearTuple.map { (t: (Int, Int)) => (t._2, t._1) }\n  val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map { (t: (Int, Int)) => (t._2, t._1) }\n  val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n  moviesPerYearInverseSorted\n}",
              "originalCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n    val yearTuple: RDD[(Int, Int)] = movies.map((m: Movie) => (m.year, 1))\n    val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey((a: Int, b: Int) => a + b)\n    val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map((t: (Int, Int)) => (t._2, t._1))\n    val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n    moviesPerYearInverseSorted\n  }",
              "status" : "Killed"
            },
            {
              "id" : 20,
              "originalProgramId" : 2,
              "mutationOperator" : "UTR",
              "mutationOperatorDescription" : "Unary Transformation Replacement",
              "mutantCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n  val yearTuple: RDD[(Int, Int)] = movies.map { (m: Movie) => (m.year, 1) }\n  val moviesPerYear: RDD[(Int, Int)] = yearTuple.sortByKey(false)\n  val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map { (t: (Int, Int)) => (t._2, t._1) }\n  val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n  moviesPerYearInverseSorted\n}",
              "originalCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n    val yearTuple: RDD[(Int, Int)] = movies.map((m: Movie) => (m.year, 1))\n    val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey((a: Int, b: Int) => a + b)\n    val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map((t: (Int, Int)) => (t._2, t._1))\n    val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n    moviesPerYearInverseSorted\n  }",
              "status" : "Killed"
            },
            {
              "id" : 21,
              "originalProgramId" : 2,
              "mutationOperator" : "UTR",
              "mutationOperatorDescription" : "Unary Transformation Replacement",
              "mutantCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n  val yearTuple: RDD[(Int, Int)] = movies.map { (m: Movie) => (m.year, 1) }\n  val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey { (a: Int, b: Int) => a + b }\n  val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.reduceByKey { (a: Int, b: Int) => a + b }\n  val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n  moviesPerYearInverseSorted\n}",
              "originalCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n    val yearTuple: RDD[(Int, Int)] = movies.map((m: Movie) => (m.year, 1))\n    val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey((a: Int, b: Int) => a + b)\n    val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map((t: (Int, Int)) => (t._2, t._1))\n    val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n    moviesPerYearInverseSorted\n  }",
              "status" : "Killed"
            },
            {
              "id" : 22,
              "originalProgramId" : 2,
              "mutationOperator" : "UTR",
              "mutationOperatorDescription" : "Unary Transformation Replacement",
              "mutantCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n  val yearTuple: RDD[(Int, Int)] = movies.map { (m: Movie) => (m.year, 1) }\n  val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey { (a: Int, b: Int) => a + b }\n  val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.sortByKey(false)\n  val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n  moviesPerYearInverseSorted\n}",
              "originalCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n    val yearTuple: RDD[(Int, Int)] = movies.map((m: Movie) => (m.year, 1))\n    val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey((a: Int, b: Int) => a + b)\n    val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map((t: (Int, Int)) => (t._2, t._1))\n    val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n    moviesPerYearInverseSorted\n  }",
              "status" : "Killed"
            },
            {
              "id" : 23,
              "originalProgramId" : 2,
              "mutationOperator" : "UTR",
              "mutationOperatorDescription" : "Unary Transformation Replacement",
              "mutantCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n  val yearTuple: RDD[(Int, Int)] = movies.map { (m: Movie) => (m.year, 1) }\n  val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey { (a: Int, b: Int) => a + b }\n  val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map { (t: (Int, Int)) => (t._2, t._1) }\n  val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.reduceByKey { (a: Int, b: Int) => a + b }\n  moviesPerYearInverseSorted\n}",
              "originalCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n    val yearTuple: RDD[(Int, Int)] = movies.map((m: Movie) => (m.year, 1))\n    val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey((a: Int, b: Int) => a + b)\n    val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map((t: (Int, Int)) => (t._2, t._1))\n    val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n    moviesPerYearInverseSorted\n  }",
              "status" : "Lived"
            },
            {
              "id" : 24,
              "originalProgramId" : 2,
              "mutationOperator" : "UTR",
              "mutationOperatorDescription" : "Unary Transformation Replacement",
              "mutantCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n  val yearTuple: RDD[(Int, Int)] = movies.map { (m: Movie) => (m.year, 1) }\n  val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey { (a: Int, b: Int) => a + b }\n  val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map { (t: (Int, Int)) => (t._2, t._1) }\n  val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.map { (t: (Int, Int)) => (t._2, t._1) }\n  moviesPerYearInverseSorted\n}",
              "originalCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n    val yearTuple: RDD[(Int, Int)] = movies.map((m: Movie) => (m.year, 1))\n    val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey((a: Int, b: Int) => a + b)\n    val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map((t: (Int, Int)) => (t._2, t._1))\n    val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n    moviesPerYearInverseSorted\n  }",
              "status" : "Killed"
            },
            {
              "id" : 25,
              "originalProgramId" : 2,
              "mutationOperator" : "UTD",
              "mutationOperatorDescription" : "Unary Transformation Deletion",
              "mutantCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n  val yearTuple: RDD[(Int, Int)] = movies.map { (m: Movie) => (m.year, 1) }\n  val moviesPerYear: RDD[(Int, Int)] = yearTuple\n  val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map { (t: (Int, Int)) => (t._2, t._1) }\n  val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n  moviesPerYearInverseSorted\n}",
              "originalCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n    val yearTuple: RDD[(Int, Int)] = movies.map((m: Movie) => (m.year, 1))\n    val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey((a: Int, b: Int) => a + b)\n    val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map((t: (Int, Int)) => (t._2, t._1))\n    val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n    moviesPerYearInverseSorted\n  }",
              "status" : "Killed"
            },
            {
              "id" : 26,
              "originalProgramId" : 2,
              "mutationOperator" : "UTD",
              "mutationOperatorDescription" : "Unary Transformation Deletion",
              "mutantCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n  val yearTuple: RDD[(Int, Int)] = movies.map { (m: Movie) => (m.year, 1) }\n  val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey { (a: Int, b: Int) => a + b }\n  val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear\n  val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n  moviesPerYearInverseSorted\n}",
              "originalCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n    val yearTuple: RDD[(Int, Int)] = movies.map((m: Movie) => (m.year, 1))\n    val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey((a: Int, b: Int) => a + b)\n    val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map((t: (Int, Int)) => (t._2, t._1))\n    val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n    moviesPerYearInverseSorted\n  }",
              "status" : "Killed"
            },
            {
              "id" : 27,
              "originalProgramId" : 2,
              "mutationOperator" : "UTD",
              "mutationOperatorDescription" : "Unary Transformation Deletion",
              "mutantCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n  val yearTuple: RDD[(Int, Int)] = movies.map { (m: Movie) => (m.year, 1) }\n  val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey { (a: Int, b: Int) => a + b }\n  val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map { (t: (Int, Int)) => (t._2, t._1) }\n  val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse\n  moviesPerYearInverseSorted\n}",
              "originalCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n    val yearTuple: RDD[(Int, Int)] = movies.map((m: Movie) => (m.year, 1))\n    val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey((a: Int, b: Int) => a + b)\n    val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map((t: (Int, Int)) => (t._2, t._1))\n    val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n    moviesPerYearInverseSorted\n  }",
              "status" : "Lived"
            },
            {
              "id" : 28,
              "originalProgramId" : 2,
              "mutationOperator" : "MTR",
              "mutationOperatorDescription" : "Mapping Transformation Replacement",
              "mutantCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n  val yearTuple: RDD[(Int, Int)] = movies.map { (inputParameter: Movie) => {\n    val originalFunction = ((m: Movie) => (m.year, 1))(_)\n    val originalValue = originalFunction(inputParameter)\n    (0, originalValue._2)\n  } }\n  val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey { (a: Int, b: Int) => a + b }\n  val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map { (t: (Int, Int)) => (t._2, t._1) }\n  val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n  moviesPerYearInverseSorted\n}",
              "originalCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n    val yearTuple: RDD[(Int, Int)] = movies.map((m: Movie) => (m.year, 1))\n    val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey((a: Int, b: Int) => a + b)\n    val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map((t: (Int, Int)) => (t._2, t._1))\n    val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n    moviesPerYearInverseSorted\n  }",
              "status" : "Killed"
            },
            {
              "id" : 29,
              "originalProgramId" : 2,
              "mutationOperator" : "MTR",
              "mutationOperatorDescription" : "Mapping Transformation Replacement",
              "mutantCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n  val yearTuple: RDD[(Int, Int)] = movies.map { (inputParameter: Movie) => {\n    val originalFunction = ((m: Movie) => (m.year, 1))(_)\n    val originalValue = originalFunction(inputParameter)\n    (1, originalValue._2)\n  } }\n  val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey { (a: Int, b: Int) => a + b }\n  val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map { (t: (Int, Int)) => (t._2, t._1) }\n  val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n  moviesPerYearInverseSorted\n}",
              "originalCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n    val yearTuple: RDD[(Int, Int)] = movies.map((m: Movie) => (m.year, 1))\n    val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey((a: Int, b: Int) => a + b)\n    val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map((t: (Int, Int)) => (t._2, t._1))\n    val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n    moviesPerYearInverseSorted\n  }",
              "status" : "Killed"
            },
            {
              "id" : 30,
              "originalProgramId" : 2,
              "mutationOperator" : "MTR",
              "mutationOperatorDescription" : "Mapping Transformation Replacement",
              "mutantCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n  val yearTuple: RDD[(Int, Int)] = movies.map { (inputParameter: Movie) => {\n    val originalFunction = ((m: Movie) => (m.year, 1))(_)\n    val originalValue = originalFunction(inputParameter)\n    (Int.MaxValue, originalValue._2)\n  } }\n  val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey { (a: Int, b: Int) => a + b }\n  val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map { (t: (Int, Int)) => (t._2, t._1) }\n  val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n  moviesPerYearInverseSorted\n}",
              "originalCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n    val yearTuple: RDD[(Int, Int)] = movies.map((m: Movie) => (m.year, 1))\n    val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey((a: Int, b: Int) => a + b)\n    val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map((t: (Int, Int)) => (t._2, t._1))\n    val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n    moviesPerYearInverseSorted\n  }",
              "status" : "Killed"
            },
            {
              "id" : 31,
              "originalProgramId" : 2,
              "mutationOperator" : "MTR",
              "mutationOperatorDescription" : "Mapping Transformation Replacement",
              "mutantCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n  val yearTuple: RDD[(Int, Int)] = movies.map { (inputParameter: Movie) => {\n    val originalFunction = ((m: Movie) => (m.year, 1))(_)\n    val originalValue = originalFunction(inputParameter)\n    (Int.MinValue, originalValue._2)\n  } }\n  val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey { (a: Int, b: Int) => a + b }\n  val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map { (t: (Int, Int)) => (t._2, t._1) }\n  val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n  moviesPerYearInverseSorted\n}",
              "originalCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n    val yearTuple: RDD[(Int, Int)] = movies.map((m: Movie) => (m.year, 1))\n    val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey((a: Int, b: Int) => a + b)\n    val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map((t: (Int, Int)) => (t._2, t._1))\n    val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n    moviesPerYearInverseSorted\n  }",
              "status" : "Killed"
            },
            {
              "id" : 32,
              "originalProgramId" : 2,
              "mutationOperator" : "MTR",
              "mutationOperatorDescription" : "Mapping Transformation Replacement",
              "mutantCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n  val yearTuple: RDD[(Int, Int)] = movies.map { (inputParameter: Movie) => {\n    val originalFunction = ((m: Movie) => (m.year, 1))(_)\n    val originalValue = originalFunction(inputParameter)\n    (-originalValue._1, originalValue._2)\n  } }\n  val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey { (a: Int, b: Int) => a + b }\n  val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map { (t: (Int, Int)) => (t._2, t._1) }\n  val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n  moviesPerYearInverseSorted\n}",
              "originalCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n    val yearTuple: RDD[(Int, Int)] = movies.map((m: Movie) => (m.year, 1))\n    val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey((a: Int, b: Int) => a + b)\n    val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map((t: (Int, Int)) => (t._2, t._1))\n    val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n    moviesPerYearInverseSorted\n  }",
              "status" : "Killed"
            },
            {
              "id" : 33,
              "originalProgramId" : 2,
              "mutationOperator" : "MTR",
              "mutationOperatorDescription" : "Mapping Transformation Replacement",
              "mutantCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n  val yearTuple: RDD[(Int, Int)] = movies.map { (inputParameter: Movie) => {\n    val originalFunction = ((m: Movie) => (m.year, 1))(_)\n    val originalValue = originalFunction(inputParameter)\n    (originalValue._1, 0)\n  } }\n  val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey { (a: Int, b: Int) => a + b }\n  val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map { (t: (Int, Int)) => (t._2, t._1) }\n  val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n  moviesPerYearInverseSorted\n}",
              "originalCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n    val yearTuple: RDD[(Int, Int)] = movies.map((m: Movie) => (m.year, 1))\n    val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey((a: Int, b: Int) => a + b)\n    val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map((t: (Int, Int)) => (t._2, t._1))\n    val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n    moviesPerYearInverseSorted\n  }",
              "status" : "Killed"
            },
            {
              "id" : 34,
              "originalProgramId" : 2,
              "mutationOperator" : "MTR",
              "mutationOperatorDescription" : "Mapping Transformation Replacement",
              "mutantCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n  val yearTuple: RDD[(Int, Int)] = movies.map { (inputParameter: Movie) => {\n    val originalFunction = ((m: Movie) => (m.year, 1))(_)\n    val originalValue = originalFunction(inputParameter)\n    (originalValue._1, 1)\n  } }\n  val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey { (a: Int, b: Int) => a + b }\n  val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map { (t: (Int, Int)) => (t._2, t._1) }\n  val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n  moviesPerYearInverseSorted\n}",
              "originalCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n    val yearTuple: RDD[(Int, Int)] = movies.map((m: Movie) => (m.year, 1))\n    val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey((a: Int, b: Int) => a + b)\n    val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map((t: (Int, Int)) => (t._2, t._1))\n    val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n    moviesPerYearInverseSorted\n  }",
              "status" : "Equivalent"
            },
            {
              "id" : 35,
              "originalProgramId" : 2,
              "mutationOperator" : "MTR",
              "mutationOperatorDescription" : "Mapping Transformation Replacement",
              "mutantCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n  val yearTuple: RDD[(Int, Int)] = movies.map { (inputParameter: Movie) => {\n    val originalFunction = ((m: Movie) => (m.year, 1))(_)\n    val originalValue = originalFunction(inputParameter)\n    (originalValue._1, Int.MaxValue)\n  } }\n  val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey { (a: Int, b: Int) => a + b }\n  val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map { (t: (Int, Int)) => (t._2, t._1) }\n  val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n  moviesPerYearInverseSorted\n}",
              "originalCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n    val yearTuple: RDD[(Int, Int)] = movies.map((m: Movie) => (m.year, 1))\n    val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey((a: Int, b: Int) => a + b)\n    val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map((t: (Int, Int)) => (t._2, t._1))\n    val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n    moviesPerYearInverseSorted\n  }",
              "status" : "Killed"
            },
            {
              "id" : 36,
              "originalProgramId" : 2,
              "mutationOperator" : "MTR",
              "mutationOperatorDescription" : "Mapping Transformation Replacement",
              "mutantCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n  val yearTuple: RDD[(Int, Int)] = movies.map { (inputParameter: Movie) => {\n    val originalFunction = ((m: Movie) => (m.year, 1))(_)\n    val originalValue = originalFunction(inputParameter)\n    (originalValue._1, Int.MinValue)\n  } }\n  val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey { (a: Int, b: Int) => a + b }\n  val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map { (t: (Int, Int)) => (t._2, t._1) }\n  val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n  moviesPerYearInverseSorted\n}",
              "originalCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n    val yearTuple: RDD[(Int, Int)] = movies.map((m: Movie) => (m.year, 1))\n    val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey((a: Int, b: Int) => a + b)\n    val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map((t: (Int, Int)) => (t._2, t._1))\n    val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n    moviesPerYearInverseSorted\n  }",
              "status" : "Killed"
            },
            {
              "id" : 37,
              "originalProgramId" : 2,
              "mutationOperator" : "MTR",
              "mutationOperatorDescription" : "Mapping Transformation Replacement",
              "mutantCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n  val yearTuple: RDD[(Int, Int)] = movies.map { (inputParameter: Movie) => {\n    val originalFunction = ((m: Movie) => (m.year, 1))(_)\n    val originalValue = originalFunction(inputParameter)\n    (originalValue._1, -originalValue._2)\n  } }\n  val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey { (a: Int, b: Int) => a + b }\n  val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map { (t: (Int, Int)) => (t._2, t._1) }\n  val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n  moviesPerYearInverseSorted\n}",
              "originalCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n    val yearTuple: RDD[(Int, Int)] = movies.map((m: Movie) => (m.year, 1))\n    val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey((a: Int, b: Int) => a + b)\n    val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map((t: (Int, Int)) => (t._2, t._1))\n    val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n    moviesPerYearInverseSorted\n  }",
              "status" : "Killed"
            },
            {
              "id" : 38,
              "originalProgramId" : 2,
              "mutationOperator" : "MTR",
              "mutationOperatorDescription" : "Mapping Transformation Replacement",
              "mutantCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n  val yearTuple: RDD[(Int, Int)] = movies.map { (m: Movie) => (m.year, 1) }\n  val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey { (a: Int, b: Int) => a + b }\n  val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map { (inputParameter: (Int, Int)) => {\n    val originalFunction = ((t: (Int, Int)) => (t._2, t._1))(_)\n    val originalValue = originalFunction(inputParameter)\n    (0, originalValue._2)\n  } }\n  val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n  moviesPerYearInverseSorted\n}",
              "originalCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n    val yearTuple: RDD[(Int, Int)] = movies.map((m: Movie) => (m.year, 1))\n    val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey((a: Int, b: Int) => a + b)\n    val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map((t: (Int, Int)) => (t._2, t._1))\n    val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n    moviesPerYearInverseSorted\n  }",
              "status" : "Killed"
            },
            {
              "id" : 39,
              "originalProgramId" : 2,
              "mutationOperator" : "MTR",
              "mutationOperatorDescription" : "Mapping Transformation Replacement",
              "mutantCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n  val yearTuple: RDD[(Int, Int)] = movies.map { (m: Movie) => (m.year, 1) }\n  val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey { (a: Int, b: Int) => a + b }\n  val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map { (inputParameter: (Int, Int)) => {\n    val originalFunction = ((t: (Int, Int)) => (t._2, t._1))(_)\n    val originalValue = originalFunction(inputParameter)\n    (1, originalValue._2)\n  } }\n  val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n  moviesPerYearInverseSorted\n}",
              "originalCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n    val yearTuple: RDD[(Int, Int)] = movies.map((m: Movie) => (m.year, 1))\n    val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey((a: Int, b: Int) => a + b)\n    val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map((t: (Int, Int)) => (t._2, t._1))\n    val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n    moviesPerYearInverseSorted\n  }",
              "status" : "Killed"
            },
            {
              "id" : 40,
              "originalProgramId" : 2,
              "mutationOperator" : "MTR",
              "mutationOperatorDescription" : "Mapping Transformation Replacement",
              "mutantCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n  val yearTuple: RDD[(Int, Int)] = movies.map { (m: Movie) => (m.year, 1) }\n  val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey { (a: Int, b: Int) => a + b }\n  val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map { (inputParameter: (Int, Int)) => {\n    val originalFunction = ((t: (Int, Int)) => (t._2, t._1))(_)\n    val originalValue = originalFunction(inputParameter)\n    (Int.MaxValue, originalValue._2)\n  } }\n  val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n  moviesPerYearInverseSorted\n}",
              "originalCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n    val yearTuple: RDD[(Int, Int)] = movies.map((m: Movie) => (m.year, 1))\n    val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey((a: Int, b: Int) => a + b)\n    val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map((t: (Int, Int)) => (t._2, t._1))\n    val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n    moviesPerYearInverseSorted\n  }",
              "status" : "Killed"
            },
            {
              "id" : 41,
              "originalProgramId" : 2,
              "mutationOperator" : "MTR",
              "mutationOperatorDescription" : "Mapping Transformation Replacement",
              "mutantCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n  val yearTuple: RDD[(Int, Int)] = movies.map { (m: Movie) => (m.year, 1) }\n  val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey { (a: Int, b: Int) => a + b }\n  val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map { (inputParameter: (Int, Int)) => {\n    val originalFunction = ((t: (Int, Int)) => (t._2, t._1))(_)\n    val originalValue = originalFunction(inputParameter)\n    (Int.MinValue, originalValue._2)\n  } }\n  val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n  moviesPerYearInverseSorted\n}",
              "originalCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n    val yearTuple: RDD[(Int, Int)] = movies.map((m: Movie) => (m.year, 1))\n    val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey((a: Int, b: Int) => a + b)\n    val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map((t: (Int, Int)) => (t._2, t._1))\n    val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n    moviesPerYearInverseSorted\n  }",
              "status" : "Killed"
            },
            {
              "id" : 42,
              "originalProgramId" : 2,
              "mutationOperator" : "MTR",
              "mutationOperatorDescription" : "Mapping Transformation Replacement",
              "mutantCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n  val yearTuple: RDD[(Int, Int)] = movies.map { (m: Movie) => (m.year, 1) }\n  val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey { (a: Int, b: Int) => a + b }\n  val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map { (inputParameter: (Int, Int)) => {\n    val originalFunction = ((t: (Int, Int)) => (t._2, t._1))(_)\n    val originalValue = originalFunction(inputParameter)\n    (-originalValue._1, originalValue._2)\n  } }\n  val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n  moviesPerYearInverseSorted\n}",
              "originalCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n    val yearTuple: RDD[(Int, Int)] = movies.map((m: Movie) => (m.year, 1))\n    val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey((a: Int, b: Int) => a + b)\n    val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map((t: (Int, Int)) => (t._2, t._1))\n    val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n    moviesPerYearInverseSorted\n  }",
              "status" : "Killed"
            },
            {
              "id" : 43,
              "originalProgramId" : 2,
              "mutationOperator" : "MTR",
              "mutationOperatorDescription" : "Mapping Transformation Replacement",
              "mutantCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n  val yearTuple: RDD[(Int, Int)] = movies.map { (m: Movie) => (m.year, 1) }\n  val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey { (a: Int, b: Int) => a + b }\n  val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map { (inputParameter: (Int, Int)) => {\n    val originalFunction = ((t: (Int, Int)) => (t._2, t._1))(_)\n    val originalValue = originalFunction(inputParameter)\n    (originalValue._1, 0)\n  } }\n  val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n  moviesPerYearInverseSorted\n}",
              "originalCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n    val yearTuple: RDD[(Int, Int)] = movies.map((m: Movie) => (m.year, 1))\n    val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey((a: Int, b: Int) => a + b)\n    val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map((t: (Int, Int)) => (t._2, t._1))\n    val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n    moviesPerYearInverseSorted\n  }",
              "status" : "Killed"
            },
            {
              "id" : 44,
              "originalProgramId" : 2,
              "mutationOperator" : "MTR",
              "mutationOperatorDescription" : "Mapping Transformation Replacement",
              "mutantCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n  val yearTuple: RDD[(Int, Int)] = movies.map { (m: Movie) => (m.year, 1) }\n  val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey { (a: Int, b: Int) => a + b }\n  val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map { (inputParameter: (Int, Int)) => {\n    val originalFunction = ((t: (Int, Int)) => (t._2, t._1))(_)\n    val originalValue = originalFunction(inputParameter)\n    (originalValue._1, 1)\n  } }\n  val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n  moviesPerYearInverseSorted\n}",
              "originalCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n    val yearTuple: RDD[(Int, Int)] = movies.map((m: Movie) => (m.year, 1))\n    val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey((a: Int, b: Int) => a + b)\n    val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map((t: (Int, Int)) => (t._2, t._1))\n    val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n    moviesPerYearInverseSorted\n  }",
              "status" : "Killed"
            },
            {
              "id" : 45,
              "originalProgramId" : 2,
              "mutationOperator" : "MTR",
              "mutationOperatorDescription" : "Mapping Transformation Replacement",
              "mutantCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n  val yearTuple: RDD[(Int, Int)] = movies.map { (m: Movie) => (m.year, 1) }\n  val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey { (a: Int, b: Int) => a + b }\n  val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map { (inputParameter: (Int, Int)) => {\n    val originalFunction = ((t: (Int, Int)) => (t._2, t._1))(_)\n    val originalValue = originalFunction(inputParameter)\n    (originalValue._1, Int.MaxValue)\n  } }\n  val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n  moviesPerYearInverseSorted\n}",
              "originalCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n    val yearTuple: RDD[(Int, Int)] = movies.map((m: Movie) => (m.year, 1))\n    val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey((a: Int, b: Int) => a + b)\n    val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map((t: (Int, Int)) => (t._2, t._1))\n    val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n    moviesPerYearInverseSorted\n  }",
              "status" : "Killed"
            },
            {
              "id" : 46,
              "originalProgramId" : 2,
              "mutationOperator" : "MTR",
              "mutationOperatorDescription" : "Mapping Transformation Replacement",
              "mutantCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n  val yearTuple: RDD[(Int, Int)] = movies.map { (m: Movie) => (m.year, 1) }\n  val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey { (a: Int, b: Int) => a + b }\n  val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map { (inputParameter: (Int, Int)) => {\n    val originalFunction = ((t: (Int, Int)) => (t._2, t._1))(_)\n    val originalValue = originalFunction(inputParameter)\n    (originalValue._1, Int.MinValue)\n  } }\n  val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n  moviesPerYearInverseSorted\n}",
              "originalCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n    val yearTuple: RDD[(Int, Int)] = movies.map((m: Movie) => (m.year, 1))\n    val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey((a: Int, b: Int) => a + b)\n    val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map((t: (Int, Int)) => (t._2, t._1))\n    val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n    moviesPerYearInverseSorted\n  }",
              "status" : "Killed"
            },
            {
              "id" : 47,
              "originalProgramId" : 2,
              "mutationOperator" : "MTR",
              "mutationOperatorDescription" : "Mapping Transformation Replacement",
              "mutantCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n  val yearTuple: RDD[(Int, Int)] = movies.map { (m: Movie) => (m.year, 1) }\n  val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey { (a: Int, b: Int) => a + b }\n  val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map { (inputParameter: (Int, Int)) => {\n    val originalFunction = ((t: (Int, Int)) => (t._2, t._1))(_)\n    val originalValue = originalFunction(inputParameter)\n    (originalValue._1, -originalValue._2)\n  } }\n  val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n  moviesPerYearInverseSorted\n}",
              "originalCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n    val yearTuple: RDD[(Int, Int)] = movies.map((m: Movie) => (m.year, 1))\n    val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey((a: Int, b: Int) => a + b)\n    val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map((t: (Int, Int)) => (t._2, t._1))\n    val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n    moviesPerYearInverseSorted\n  }",
              "status" : "Killed"
            },
            {
              "id" : 48,
              "originalProgramId" : 2,
              "mutationOperator" : "DTI",
              "mutationOperatorDescription" : "Distinct Transformation Insertion",
              "mutantCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n  val yearTuple: RDD[(Int, Int)] = movies.map { (m: Movie) => (m.year, 1) }.distinct()\n  val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey { (a: Int, b: Int) => a + b }\n  val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map { (t: (Int, Int)) => (t._2, t._1) }\n  val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n  moviesPerYearInverseSorted\n}",
              "originalCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n    val yearTuple: RDD[(Int, Int)] = movies.map((m: Movie) => (m.year, 1))\n    val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey((a: Int, b: Int) => a + b)\n    val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map((t: (Int, Int)) => (t._2, t._1))\n    val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n    moviesPerYearInverseSorted\n  }",
              "status" : "Killed"
            },
            {
              "id" : 49,
              "originalProgramId" : 2,
              "mutationOperator" : "DTI",
              "mutationOperatorDescription" : "Distinct Transformation Insertion",
              "mutantCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n  val yearTuple: RDD[(Int, Int)] = movies.map { (m: Movie) => (m.year, 1) }\n  val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey { (a: Int, b: Int) => a + b }.distinct()\n  val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map { (t: (Int, Int)) => (t._2, t._1) }\n  val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n  moviesPerYearInverseSorted\n}",
              "originalCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n    val yearTuple: RDD[(Int, Int)] = movies.map((m: Movie) => (m.year, 1))\n    val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey((a: Int, b: Int) => a + b)\n    val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map((t: (Int, Int)) => (t._2, t._1))\n    val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n    moviesPerYearInverseSorted\n  }",
              "status" : "Equivalent"
            },
            {
              "id" : 50,
              "originalProgramId" : 2,
              "mutationOperator" : "DTI",
              "mutationOperatorDescription" : "Distinct Transformation Insertion",
              "mutantCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n  val yearTuple: RDD[(Int, Int)] = movies.map { (m: Movie) => (m.year, 1) }\n  val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey { (a: Int, b: Int) => a + b }\n  val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map { (t: (Int, Int)) => (t._2, t._1) }.distinct()\n  val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n  moviesPerYearInverseSorted\n}",
              "originalCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n    val yearTuple: RDD[(Int, Int)] = movies.map((m: Movie) => (m.year, 1))\n    val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey((a: Int, b: Int) => a + b)\n    val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map((t: (Int, Int)) => (t._2, t._1))\n    val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n    moviesPerYearInverseSorted\n  }",
              "status" : "Equivalent"
            },
            {
              "id" : 51,
              "originalProgramId" : 2,
              "mutationOperator" : "DTI",
              "mutationOperatorDescription" : "Distinct Transformation Insertion",
              "mutantCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n  val yearTuple: RDD[(Int, Int)] = movies.map { (m: Movie) => (m.year, 1) }\n  val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey { (a: Int, b: Int) => a + b }\n  val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map { (t: (Int, Int)) => (t._2, t._1) }\n  val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false).distinct()\n  moviesPerYearInverseSorted\n}",
              "originalCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n    val yearTuple: RDD[(Int, Int)] = movies.map((m: Movie) => (m.year, 1))\n    val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey((a: Int, b: Int) => a + b)\n    val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map((t: (Int, Int)) => (t._2, t._1))\n    val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n    moviesPerYearInverseSorted\n  }",
              "status" : "Lived"
            },
            {
              "id" : 52,
              "originalProgramId" : 2,
              "mutationOperator" : "ATR",
              "mutationOperatorDescription" : "Aggregation Transformation Replacement",
              "mutantCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n  val yearTuple: RDD[(Int, Int)] = movies.map { (m: Movie) => (m.year, 1) }\n  val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey { (firstParameter: Int, secondParameter: Int) => firstParameter }\n  val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map { (t: (Int, Int)) => (t._2, t._1) }\n  val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n  moviesPerYearInverseSorted\n}",
              "originalCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n    val yearTuple: RDD[(Int, Int)] = movies.map((m: Movie) => (m.year, 1))\n    val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey((a: Int, b: Int) => a + b)\n    val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map((t: (Int, Int)) => (t._2, t._1))\n    val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n    moviesPerYearInverseSorted\n  }",
              "status" : "Killed"
            },
            {
              "id" : 53,
              "originalProgramId" : 2,
              "mutationOperator" : "ATR",
              "mutationOperatorDescription" : "Aggregation Transformation Replacement",
              "mutantCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n  val yearTuple: RDD[(Int, Int)] = movies.map { (m: Movie) => (m.year, 1) }\n  val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey { (firstParameter: Int, secondParameter: Int) => secondParameter }\n  val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map { (t: (Int, Int)) => (t._2, t._1) }\n  val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n  moviesPerYearInverseSorted\n}",
              "originalCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n    val yearTuple: RDD[(Int, Int)] = movies.map((m: Movie) => (m.year, 1))\n    val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey((a: Int, b: Int) => a + b)\n    val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map((t: (Int, Int)) => (t._2, t._1))\n    val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n    moviesPerYearInverseSorted\n  }",
              "status" : "Killed"
            },
            {
              "id" : 54,
              "originalProgramId" : 2,
              "mutationOperator" : "ATR",
              "mutationOperatorDescription" : "Aggregation Transformation Replacement",
              "mutantCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n  val yearTuple: RDD[(Int, Int)] = movies.map { (m: Movie) => (m.year, 1) }\n  val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey { (firstParameter: Int, secondParameter: Int) => {\n    val originalFunction = ((a: Int, b: Int) => a + b)(_, _)\n    originalFunction(firstParameter, firstParameter)\n  } }\n  val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map { (t: (Int, Int)) => (t._2, t._1) }\n  val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n  moviesPerYearInverseSorted\n}",
              "originalCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n    val yearTuple: RDD[(Int, Int)] = movies.map((m: Movie) => (m.year, 1))\n    val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey((a: Int, b: Int) => a + b)\n    val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map((t: (Int, Int)) => (t._2, t._1))\n    val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n    moviesPerYearInverseSorted\n  }",
              "status" : "Lived"
            },
            {
              "id" : 55,
              "originalProgramId" : 2,
              "mutationOperator" : "ATR",
              "mutationOperatorDescription" : "Aggregation Transformation Replacement",
              "mutantCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n  val yearTuple: RDD[(Int, Int)] = movies.map { (m: Movie) => (m.year, 1) }\n  val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey { (firstParameter: Int, secondParameter: Int) => {\n    val originalFunction = ((a: Int, b: Int) => a + b)(_, _)\n    originalFunction(secondParameter, secondParameter)\n  } }\n  val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map { (t: (Int, Int)) => (t._2, t._1) }\n  val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n  moviesPerYearInverseSorted\n}",
              "originalCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n    val yearTuple: RDD[(Int, Int)] = movies.map((m: Movie) => (m.year, 1))\n    val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey((a: Int, b: Int) => a + b)\n    val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map((t: (Int, Int)) => (t._2, t._1))\n    val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n    moviesPerYearInverseSorted\n  }",
              "status" : "Lived"
            },
            {
              "id" : 56,
              "originalProgramId" : 2,
              "mutationOperator" : "ATR",
              "mutationOperatorDescription" : "Aggregation Transformation Replacement",
              "mutantCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n  val yearTuple: RDD[(Int, Int)] = movies.map { (m: Movie) => (m.year, 1) }\n  val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey { (firstParameter: Int, secondParameter: Int) => {\n    val originalFunction = ((a: Int, b: Int) => a + b)(_, _)\n    originalFunction(secondParameter, firstParameter)\n  } }\n  val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map { (t: (Int, Int)) => (t._2, t._1) }\n  val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n  moviesPerYearInverseSorted\n}",
              "originalCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n    val yearTuple: RDD[(Int, Int)] = movies.map((m: Movie) => (m.year, 1))\n    val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey((a: Int, b: Int) => a + b)\n    val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map((t: (Int, Int)) => (t._2, t._1))\n    val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n    moviesPerYearInverseSorted\n  }",
              "status" : "Equivalent"
            },
            {
              "id" : 57,
              "originalProgramId" : 2,
              "mutationOperator" : "OTD",
              "mutationOperatorDescription" : "Order Transformation Deletion",
              "mutantCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n  val yearTuple: RDD[(Int, Int)] = movies.map { (m: Movie) => (m.year, 1) }\n  val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey { (a: Int, b: Int) => a + b }\n  val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map { (t: (Int, Int)) => (t._2, t._1) }\n  val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse\n  moviesPerYearInverseSorted\n}",
              "originalCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n    val yearTuple: RDD[(Int, Int)] = movies.map((m: Movie) => (m.year, 1))\n    val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey((a: Int, b: Int) => a + b)\n    val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map((t: (Int, Int)) => (t._2, t._1))\n    val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n    moviesPerYearInverseSorted\n  }",
              "status" : "Lived"
            },
            {
              "id" : 58,
              "originalProgramId" : 2,
              "mutationOperator" : "OTI",
              "mutationOperatorDescription" : "Order Transformation Inversion",
              "mutantCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n  val yearTuple: RDD[(Int, Int)] = movies.map { (m: Movie) => (m.year, 1) }\n  val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey { (a: Int, b: Int) => a + b }\n  val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map { (t: (Int, Int)) => (t._2, t._1) }\n  val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(true)\n  moviesPerYearInverseSorted\n}",
              "originalCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n    val yearTuple: RDD[(Int, Int)] = movies.map((m: Movie) => (m.year, 1))\n    val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey((a: Int, b: Int) => a + b)\n    val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map((t: (Int, Int)) => (t._2, t._1))\n    val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n    moviesPerYearInverseSorted\n  }",
              "status" : "Lived"
            }
          ],
          "removedMutants" : [
          ],
          "mutationOperatorsMetrics" : {
            "totalMutantsPerOperator" : {
              "FTD" : 0,
              "JTR" : 0,
              "UTR" : 6,
              "MTR" : 20,
              "UTD" : 3,
              "OTD" : 1,
              "BTR" : 0,
              "STR" : 0,
              "BTS" : 0,
              "ATR" : 5,
              "OTI" : 1,
              "DTI" : 4,
              "DTD" : 0,
              "NFTP" : 0,
              "UTS" : 3
            },
            "totalKilledMutantsPerOperator" : {
              "FTD" : 0,
              "JTR" : 0,
              "UTR" : 5,
              "MTR" : 19,
              "UTD" : 2,
              "OTD" : 0,
              "BTR" : 0,
              "STR" : 0,
              "BTS" : 0,
              "ATR" : 2,
              "OTI" : 0,
              "DTI" : 1,
              "DTD" : 0,
              "NFTP" : 0,
              "UTS" : 2
            },
            "totalLivedMutantsPerOperator" : {
              "FTD" : 0,
              "JTR" : 0,
              "UTR" : 1,
              "MTR" : 0,
              "UTD" : 1,
              "OTD" : 1,
              "BTR" : 0,
              "STR" : 0,
              "BTS" : 0,
              "ATR" : 2,
              "OTI" : 1,
              "DTI" : 1,
              "DTD" : 0,
              "NFTP" : 0,
              "UTS" : 1
            },
            "totalEquivalentMutantsPerOperator" : {
              "FTD" : 0,
              "JTR" : 0,
              "UTR" : 0,
              "MTR" : 1,
              "UTD" : 0,
              "OTD" : 0,
              "BTR" : 0,
              "STR" : 0,
              "BTS" : 0,
              "ATR" : 1,
              "OTI" : 0,
              "DTI" : 2,
              "DTD" : 0,
              "NFTP" : 0,
              "UTS" : 0
            },
            "totalErrorMutantsPerOperator" : {
              "FTD" : 0,
              "JTR" : 0,
              "UTR" : 0,
              "MTR" : 0,
              "UTD" : 0,
              "OTD" : 0,
              "BTR" : 0,
              "STR" : 0,
              "BTS" : 0,
              "ATR" : 0,
              "OTI" : 0,
              "DTI" : 0,
              "DTD" : 0,
              "NFTP" : 0,
              "UTS" : 0
            },
            "totalRemovedMutantsPerOperator" : {
              "FTD" : 0,
              "JTR" : 0,
              "UTR" : 0,
              "MTR" : 0,
              "UTD" : 0,
              "OTD" : 0,
              "BTR" : 0,
              "STR" : 0,
              "BTS" : 0,
              "ATR" : 0,
              "OTI" : 0,
              "DTI" : 0,
              "DTD" : 0,
              "NFTP" : 0,
              "UTS" : 0
            },
            "descriptionPerOperator" : {
              "FTD" : "Filter Transformation Deletion",
              "JTR" : "Join Transformation Replacement",
              "UTR" : "Unary Transformation Replacement",
              "MTR" : "Mapping Transformation Replacement",
              "UTD" : "Unary Transformation Deletion",
              "OTD" : "Order Transformation Deletion",
              "BTR" : "Binary Transformation Replacement",
              "STR" : "Set Transformation Replacement",
              "BTS" : "Binary Transformation Swap",
              "ATR" : "Aggregation Transformation Replacement",
              "OTI" : "Order Transformation Inversion",
              "DTI" : "Distinct Transformation Insertion",
              "DTD" : "Distinct Transformation Deletion",
              "NFTP" : "Negation of Filter Transformation Predicate",
              "UTS" : "Unary Transformation Swap"
            }
          },
          "totalDatasets" : 5,
          "totalTransformations" : 4,
          "totalMutants" : 43,
          "totalKilledMutants" : 31,
          "totalLivedMutants" : 8,
          "totalEquivalentMutants" : 4,
          "totalErrorMutants" : 0,
          "totalRemovedMutants" : 0,
          "mutationScore" : 0.7948718
        },
        {
          "id" : 3,
          "programSourceId" : 1,
          "name" : "mostPopularGenresByYear",
          "code" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n    val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap((m: Movie) => m.genres.map(g => ((m.year, g), 1)))\n    val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey((x: Int, y: Int) => x + y)\n    val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map((g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey((m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2)\n    popularGenresByYear\n  }",
          "datasets" : [
            {
              "id" : 12,
              "name" : "movies",
              "datasetType" : "RDD[Movie]",
              "inputDataset" : true,
              "outputDataset" : false
            },
            {
              "id" : 13,
              "name" : "yearGenreTuple",
              "datasetType" : "RDD[((Int, String), Int)]",
              "inputDataset" : false,
              "outputDataset" : false
            },
            {
              "id" : 14,
              "name" : "yearGenreCount",
              "datasetType" : "RDD[((Int, String), Int)]",
              "inputDataset" : false,
              "outputDataset" : false
            },
            {
              "id" : 15,
              "name" : "yearGenreCountTuple",
              "datasetType" : "RDD[(Int, (String, Int))]",
              "inputDataset" : false,
              "outputDataset" : false
            },
            {
              "id" : 16,
              "name" : "popularGenresByYear",
              "datasetType" : "RDD[(Int, (String, Int))]",
              "inputDataset" : false,
              "outputDataset" : true
            }
          ],
          "transformations" : [
            {
              "id" : 8,
              "name" : "flatMap",
              "inputTypes" : [
                "RDD[Movie]"
              ],
              "outputTypes" : [
                "RDD[((Int, String), Int)]"
              ],
              "loadTransformation" : false
            },
            {
              "id" : 9,
              "name" : "reduceByKey",
              "inputTypes" : [
                "RDD[((Int, String), Int)]"
              ],
              "outputTypes" : [
                "RDD[((Int, String), Int)]"
              ],
              "loadTransformation" : false
            },
            {
              "id" : 10,
              "name" : "map",
              "inputTypes" : [
                "RDD[((Int, String), Int)]"
              ],
              "outputTypes" : [
                "RDD[(Int, (String, Int))]"
              ],
              "loadTransformation" : false
            },
            {
              "id" : 11,
              "name" : "reduceByKey",
              "inputTypes" : [
                "RDD[(Int, (String, Int))]"
              ],
              "outputTypes" : [
                "RDD[(Int, (String, Int))]"
              ],
              "loadTransformation" : false
            }
          ],
          "edges" : [
            {
              "id" : 15,
              "datasetId" : 12,
              "transformationId" : 8,
              "direction" : "DatasetToTransformation"
            },
            {
              "id" : 16,
              "datasetId" : 13,
              "transformationId" : 8,
              "direction" : "TransformationToDataset"
            },
            {
              "id" : 17,
              "datasetId" : 13,
              "transformationId" : 9,
              "direction" : "DatasetToTransformation"
            },
            {
              "id" : 18,
              "datasetId" : 14,
              "transformationId" : 9,
              "direction" : "TransformationToDataset"
            },
            {
              "id" : 19,
              "datasetId" : 14,
              "transformationId" : 10,
              "direction" : "DatasetToTransformation"
            },
            {
              "id" : 20,
              "datasetId" : 15,
              "transformationId" : 10,
              "direction" : "TransformationToDataset"
            },
            {
              "id" : 21,
              "datasetId" : 15,
              "transformationId" : 11,
              "direction" : "DatasetToTransformation"
            },
            {
              "id" : 22,
              "datasetId" : 16,
              "transformationId" : 11,
              "direction" : "TransformationToDataset"
            }
          ],
          "mutants" : [
            {
              "id" : 59,
              "originalProgramId" : 3,
              "mutationOperator" : "UTD",
              "mutationOperatorDescription" : "Unary Transformation Deletion",
              "mutantCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n  val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap { (m: Movie) => m.genres.map(g => ((m.year, g), 1)) }\n  val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple\n  val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map { (g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey { (m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2 }\n  popularGenresByYear\n}",
              "originalCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n    val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap((m: Movie) => m.genres.map(g => ((m.year, g), 1)))\n    val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey((x: Int, y: Int) => x + y)\n    val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map((g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey((m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2)\n    popularGenresByYear\n  }",
              "status" : "Killed"
            },
            {
              "id" : 60,
              "originalProgramId" : 3,
              "mutationOperator" : "UTD",
              "mutationOperatorDescription" : "Unary Transformation Deletion",
              "mutantCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n  val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap { (m: Movie) => m.genres.map(g => ((m.year, g), 1)) }\n  val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey { (x: Int, y: Int) => x + y }\n  val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map { (g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple\n  popularGenresByYear\n}",
              "originalCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n    val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap((m: Movie) => m.genres.map(g => ((m.year, g), 1)))\n    val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey((x: Int, y: Int) => x + y)\n    val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map((g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey((m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2)\n    popularGenresByYear\n  }",
              "status" : "Killed"
            },
            {
              "id" : 61,
              "originalProgramId" : 3,
              "mutationOperator" : "MTR",
              "mutationOperatorDescription" : "Mapping Transformation Replacement",
              "mutantCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n  val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap { (inputParameter: Movie) => {\n    val originalFunction = ((m: Movie) => m.genres.map(g => ((m.year, g), 1)))(_)\n    val originalValue = originalFunction(inputParameter)\n    originalValue.headOption\n  } }\n  val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey { (x: Int, y: Int) => x + y }\n  val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map { (g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey { (m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2 }\n  popularGenresByYear\n}",
              "originalCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n    val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap((m: Movie) => m.genres.map(g => ((m.year, g), 1)))\n    val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey((x: Int, y: Int) => x + y)\n    val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map((g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey((m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2)\n    popularGenresByYear\n  }",
              "status" : "Lived"
            },
            {
              "id" : 62,
              "originalProgramId" : 3,
              "mutationOperator" : "MTR",
              "mutationOperatorDescription" : "Mapping Transformation Replacement",
              "mutantCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n  val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap { (inputParameter: Movie) => {\n    val originalFunction = ((m: Movie) => m.genres.map(g => ((m.year, g), 1)))(_)\n    val originalValue = originalFunction(inputParameter)\n    originalValue.toList.tail\n  } }\n  val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey { (x: Int, y: Int) => x + y }\n  val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map { (g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey { (m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2 }\n  popularGenresByYear\n}",
              "originalCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n    val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap((m: Movie) => m.genres.map(g => ((m.year, g), 1)))\n    val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey((x: Int, y: Int) => x + y)\n    val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map((g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey((m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2)\n    popularGenresByYear\n  }",
              "status" : "Killed"
            },
            {
              "id" : 63,
              "originalProgramId" : 3,
              "mutationOperator" : "MTR",
              "mutationOperatorDescription" : "Mapping Transformation Replacement",
              "mutantCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n  val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap { (inputParameter: Movie) => {\n    val originalFunction = ((m: Movie) => m.genres.map(g => ((m.year, g), 1)))(_)\n    val originalValue = originalFunction(inputParameter)\n    originalValue.toList.reverse\n  } }\n  val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey { (x: Int, y: Int) => x + y }\n  val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map { (g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey { (m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2 }\n  popularGenresByYear\n}",
              "originalCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n    val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap((m: Movie) => m.genres.map(g => ((m.year, g), 1)))\n    val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey((x: Int, y: Int) => x + y)\n    val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map((g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey((m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2)\n    popularGenresByYear\n  }",
              "status" : "Equivalent"
            },
            {
              "id" : 64,
              "originalProgramId" : 3,
              "mutationOperator" : "MTR",
              "mutationOperatorDescription" : "Mapping Transformation Replacement",
              "mutantCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n  val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap { (inputParameter: Movie) => {\n    val originalFunction = ((m: Movie) => m.genres.map(g => ((m.year, g), 1)))(_)\n    val originalValue = originalFunction(inputParameter)\n    List[((Int, String), Int)]()\n  } }\n  val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey { (x: Int, y: Int) => x + y }\n  val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map { (g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey { (m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2 }\n  popularGenresByYear\n}",
              "originalCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n    val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap((m: Movie) => m.genres.map(g => ((m.year, g), 1)))\n    val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey((x: Int, y: Int) => x + y)\n    val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map((g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey((m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2)\n    popularGenresByYear\n  }",
              "status" : "Killed"
            },
            {
              "id" : 65,
              "originalProgramId" : 3,
              "mutationOperator" : "MTR",
              "mutationOperatorDescription" : "Mapping Transformation Replacement",
              "mutantCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n  val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap { (m: Movie) => m.genres.map(g => ((m.year, g), 1)) }\n  val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey { (x: Int, y: Int) => x + y }\n  val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map { (inputParameter: ((Int, String), Int)) => {\n    val originalFunction = ((g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)))(_)\n    val originalValue = originalFunction(inputParameter)\n    (0, originalValue._2)\n  } }\n  val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey { (m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2 }\n  popularGenresByYear\n}",
              "originalCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n    val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap((m: Movie) => m.genres.map(g => ((m.year, g), 1)))\n    val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey((x: Int, y: Int) => x + y)\n    val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map((g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey((m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2)\n    popularGenresByYear\n  }",
              "status" : "Killed"
            },
            {
              "id" : 66,
              "originalProgramId" : 3,
              "mutationOperator" : "MTR",
              "mutationOperatorDescription" : "Mapping Transformation Replacement",
              "mutantCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n  val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap { (m: Movie) => m.genres.map(g => ((m.year, g), 1)) }\n  val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey { (x: Int, y: Int) => x + y }\n  val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map { (inputParameter: ((Int, String), Int)) => {\n    val originalFunction = ((g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)))(_)\n    val originalValue = originalFunction(inputParameter)\n    (1, originalValue._2)\n  } }\n  val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey { (m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2 }\n  popularGenresByYear\n}",
              "originalCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n    val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap((m: Movie) => m.genres.map(g => ((m.year, g), 1)))\n    val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey((x: Int, y: Int) => x + y)\n    val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map((g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey((m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2)\n    popularGenresByYear\n  }",
              "status" : "Killed"
            },
            {
              "id" : 67,
              "originalProgramId" : 3,
              "mutationOperator" : "MTR",
              "mutationOperatorDescription" : "Mapping Transformation Replacement",
              "mutantCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n  val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap { (m: Movie) => m.genres.map(g => ((m.year, g), 1)) }\n  val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey { (x: Int, y: Int) => x + y }\n  val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map { (inputParameter: ((Int, String), Int)) => {\n    val originalFunction = ((g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)))(_)\n    val originalValue = originalFunction(inputParameter)\n    (Int.MaxValue, originalValue._2)\n  } }\n  val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey { (m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2 }\n  popularGenresByYear\n}",
              "originalCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n    val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap((m: Movie) => m.genres.map(g => ((m.year, g), 1)))\n    val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey((x: Int, y: Int) => x + y)\n    val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map((g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey((m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2)\n    popularGenresByYear\n  }",
              "status" : "Killed"
            },
            {
              "id" : 68,
              "originalProgramId" : 3,
              "mutationOperator" : "MTR",
              "mutationOperatorDescription" : "Mapping Transformation Replacement",
              "mutantCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n  val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap { (m: Movie) => m.genres.map(g => ((m.year, g), 1)) }\n  val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey { (x: Int, y: Int) => x + y }\n  val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map { (inputParameter: ((Int, String), Int)) => {\n    val originalFunction = ((g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)))(_)\n    val originalValue = originalFunction(inputParameter)\n    (Int.MinValue, originalValue._2)\n  } }\n  val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey { (m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2 }\n  popularGenresByYear\n}",
              "originalCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n    val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap((m: Movie) => m.genres.map(g => ((m.year, g), 1)))\n    val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey((x: Int, y: Int) => x + y)\n    val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map((g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey((m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2)\n    popularGenresByYear\n  }",
              "status" : "Killed"
            },
            {
              "id" : 69,
              "originalProgramId" : 3,
              "mutationOperator" : "MTR",
              "mutationOperatorDescription" : "Mapping Transformation Replacement",
              "mutantCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n  val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap { (m: Movie) => m.genres.map(g => ((m.year, g), 1)) }\n  val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey { (x: Int, y: Int) => x + y }\n  val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map { (inputParameter: ((Int, String), Int)) => {\n    val originalFunction = ((g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)))(_)\n    val originalValue = originalFunction(inputParameter)\n    (-originalValue._1, originalValue._2)\n  } }\n  val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey { (m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2 }\n  popularGenresByYear\n}",
              "originalCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n    val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap((m: Movie) => m.genres.map(g => ((m.year, g), 1)))\n    val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey((x: Int, y: Int) => x + y)\n    val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map((g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey((m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2)\n    popularGenresByYear\n  }",
              "status" : "Killed"
            },
            {
              "id" : 70,
              "originalProgramId" : 3,
              "mutationOperator" : "MTR",
              "mutationOperatorDescription" : "Mapping Transformation Replacement",
              "mutantCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n  val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap { (m: Movie) => m.genres.map(g => ((m.year, g), 1)) }\n  val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey { (x: Int, y: Int) => x + y }\n  val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map { (inputParameter: ((Int, String), Int)) => {\n    val originalFunction = ((g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)))(_)\n    val originalValue = originalFunction(inputParameter)\n    (originalValue._1, (\"\", originalValue._2._2))\n  } }\n  val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey { (m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2 }\n  popularGenresByYear\n}",
              "originalCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n    val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap((m: Movie) => m.genres.map(g => ((m.year, g), 1)))\n    val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey((x: Int, y: Int) => x + y)\n    val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map((g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey((m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2)\n    popularGenresByYear\n  }",
              "status" : "Killed"
            },
            {
              "id" : 71,
              "originalProgramId" : 3,
              "mutationOperator" : "MTR",
              "mutationOperatorDescription" : "Mapping Transformation Replacement",
              "mutantCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n  val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap { (m: Movie) => m.genres.map(g => ((m.year, g), 1)) }\n  val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey { (x: Int, y: Int) => x + y }\n  val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map { (inputParameter: ((Int, String), Int)) => {\n    val originalFunction = ((g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)))(_)\n    val originalValue = originalFunction(inputParameter)\n    (originalValue._1, (originalValue._2._1, 0))\n  } }\n  val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey { (m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2 }\n  popularGenresByYear\n}",
              "originalCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n    val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap((m: Movie) => m.genres.map(g => ((m.year, g), 1)))\n    val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey((x: Int, y: Int) => x + y)\n    val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map((g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey((m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2)\n    popularGenresByYear\n  }",
              "status" : "Killed"
            },
            {
              "id" : 72,
              "originalProgramId" : 3,
              "mutationOperator" : "MTR",
              "mutationOperatorDescription" : "Mapping Transformation Replacement",
              "mutantCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n  val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap { (m: Movie) => m.genres.map(g => ((m.year, g), 1)) }\n  val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey { (x: Int, y: Int) => x + y }\n  val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map { (inputParameter: ((Int, String), Int)) => {\n    val originalFunction = ((g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)))(_)\n    val originalValue = originalFunction(inputParameter)\n    (originalValue._1, (originalValue._2._1, 1))\n  } }\n  val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey { (m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2 }\n  popularGenresByYear\n}",
              "originalCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n    val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap((m: Movie) => m.genres.map(g => ((m.year, g), 1)))\n    val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey((x: Int, y: Int) => x + y)\n    val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map((g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey((m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2)\n    popularGenresByYear\n  }",
              "status" : "Killed"
            },
            {
              "id" : 73,
              "originalProgramId" : 3,
              "mutationOperator" : "MTR",
              "mutationOperatorDescription" : "Mapping Transformation Replacement",
              "mutantCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n  val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap { (m: Movie) => m.genres.map(g => ((m.year, g), 1)) }\n  val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey { (x: Int, y: Int) => x + y }\n  val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map { (inputParameter: ((Int, String), Int)) => {\n    val originalFunction = ((g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)))(_)\n    val originalValue = originalFunction(inputParameter)\n    (originalValue._1, (originalValue._2._1, Int.MaxValue))\n  } }\n  val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey { (m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2 }\n  popularGenresByYear\n}",
              "originalCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n    val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap((m: Movie) => m.genres.map(g => ((m.year, g), 1)))\n    val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey((x: Int, y: Int) => x + y)\n    val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map((g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey((m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2)\n    popularGenresByYear\n  }",
              "status" : "Killed"
            },
            {
              "id" : 74,
              "originalProgramId" : 3,
              "mutationOperator" : "MTR",
              "mutationOperatorDescription" : "Mapping Transformation Replacement",
              "mutantCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n  val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap { (m: Movie) => m.genres.map(g => ((m.year, g), 1)) }\n  val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey { (x: Int, y: Int) => x + y }\n  val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map { (inputParameter: ((Int, String), Int)) => {\n    val originalFunction = ((g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)))(_)\n    val originalValue = originalFunction(inputParameter)\n    (originalValue._1, (originalValue._2._1, Int.MinValue))\n  } }\n  val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey { (m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2 }\n  popularGenresByYear\n}",
              "originalCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n    val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap((m: Movie) => m.genres.map(g => ((m.year, g), 1)))\n    val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey((x: Int, y: Int) => x + y)\n    val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map((g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey((m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2)\n    popularGenresByYear\n  }",
              "status" : "Killed"
            },
            {
              "id" : 75,
              "originalProgramId" : 3,
              "mutationOperator" : "MTR",
              "mutationOperatorDescription" : "Mapping Transformation Replacement",
              "mutantCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n  val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap { (m: Movie) => m.genres.map(g => ((m.year, g), 1)) }\n  val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey { (x: Int, y: Int) => x + y }\n  val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map { (inputParameter: ((Int, String), Int)) => {\n    val originalFunction = ((g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)))(_)\n    val originalValue = originalFunction(inputParameter)\n    (originalValue._1, (originalValue._2._1, -originalValue._2._2))\n  } }\n  val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey { (m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2 }\n  popularGenresByYear\n}",
              "originalCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n    val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap((m: Movie) => m.genres.map(g => ((m.year, g), 1)))\n    val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey((x: Int, y: Int) => x + y)\n    val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map((g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey((m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2)\n    popularGenresByYear\n  }",
              "status" : "Killed"
            },
            {
              "id" : 76,
              "originalProgramId" : 3,
              "mutationOperator" : "DTI",
              "mutationOperatorDescription" : "Distinct Transformation Insertion",
              "mutantCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n  val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap { (m: Movie) => m.genres.map(g => ((m.year, g), 1)) }.distinct()\n  val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey { (x: Int, y: Int) => x + y }\n  val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map { (g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey { (m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2 }\n  popularGenresByYear\n}",
              "originalCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n    val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap((m: Movie) => m.genres.map(g => ((m.year, g), 1)))\n    val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey((x: Int, y: Int) => x + y)\n    val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map((g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey((m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2)\n    popularGenresByYear\n  }",
              "status" : "Killed"
            },
            {
              "id" : 77,
              "originalProgramId" : 3,
              "mutationOperator" : "DTI",
              "mutationOperatorDescription" : "Distinct Transformation Insertion",
              "mutantCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n  val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap { (m: Movie) => m.genres.map(g => ((m.year, g), 1)) }\n  val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey { (x: Int, y: Int) => x + y }.distinct()\n  val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map { (g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey { (m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2 }\n  popularGenresByYear\n}",
              "originalCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n    val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap((m: Movie) => m.genres.map(g => ((m.year, g), 1)))\n    val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey((x: Int, y: Int) => x + y)\n    val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map((g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey((m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2)\n    popularGenresByYear\n  }",
              "status" : "Lived"
            },
            {
              "id" : 78,
              "originalProgramId" : 3,
              "mutationOperator" : "DTI",
              "mutationOperatorDescription" : "Distinct Transformation Insertion",
              "mutantCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n  val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap { (m: Movie) => m.genres.map(g => ((m.year, g), 1)) }\n  val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey { (x: Int, y: Int) => x + y }\n  val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map { (g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)) }.distinct()\n  val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey { (m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2 }\n  popularGenresByYear\n}",
              "originalCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n    val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap((m: Movie) => m.genres.map(g => ((m.year, g), 1)))\n    val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey((x: Int, y: Int) => x + y)\n    val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map((g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey((m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2)\n    popularGenresByYear\n  }",
              "status" : "Lived"
            },
            {
              "id" : 79,
              "originalProgramId" : 3,
              "mutationOperator" : "DTI",
              "mutationOperatorDescription" : "Distinct Transformation Insertion",
              "mutantCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n  val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap { (m: Movie) => m.genres.map(g => ((m.year, g), 1)) }\n  val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey { (x: Int, y: Int) => x + y }\n  val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map { (g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey { (m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2 }.distinct()\n  popularGenresByYear\n}",
              "originalCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n    val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap((m: Movie) => m.genres.map(g => ((m.year, g), 1)))\n    val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey((x: Int, y: Int) => x + y)\n    val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map((g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey((m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2)\n    popularGenresByYear\n  }",
              "status" : "Equivalent"
            },
            {
              "id" : 80,
              "originalProgramId" : 3,
              "mutationOperator" : "ATR",
              "mutationOperatorDescription" : "Aggregation Transformation Replacement",
              "mutantCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n  val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap { (m: Movie) => m.genres.map(g => ((m.year, g), 1)) }\n  val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey { (firstParameter: Int, secondParameter: Int) => firstParameter }\n  val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map { (g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey { (m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2 }\n  popularGenresByYear\n}",
              "originalCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n    val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap((m: Movie) => m.genres.map(g => ((m.year, g), 1)))\n    val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey((x: Int, y: Int) => x + y)\n    val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map((g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey((m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2)\n    popularGenresByYear\n  }",
              "status" : "Killed"
            },
            {
              "id" : 81,
              "originalProgramId" : 3,
              "mutationOperator" : "ATR",
              "mutationOperatorDescription" : "Aggregation Transformation Replacement",
              "mutantCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n  val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap { (m: Movie) => m.genres.map(g => ((m.year, g), 1)) }\n  val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey { (firstParameter: Int, secondParameter: Int) => secondParameter }\n  val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map { (g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey { (m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2 }\n  popularGenresByYear\n}",
              "originalCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n    val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap((m: Movie) => m.genres.map(g => ((m.year, g), 1)))\n    val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey((x: Int, y: Int) => x + y)\n    val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map((g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey((m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2)\n    popularGenresByYear\n  }",
              "status" : "Killed"
            },
            {
              "id" : 82,
              "originalProgramId" : 3,
              "mutationOperator" : "ATR",
              "mutationOperatorDescription" : "Aggregation Transformation Replacement",
              "mutantCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n  val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap { (m: Movie) => m.genres.map(g => ((m.year, g), 1)) }\n  val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey { (firstParameter: Int, secondParameter: Int) => {\n    val originalFunction = ((x: Int, y: Int) => x + y)(_, _)\n    originalFunction(firstParameter, firstParameter)\n  } }\n  val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map { (g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey { (m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2 }\n  popularGenresByYear\n}",
              "originalCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n    val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap((m: Movie) => m.genres.map(g => ((m.year, g), 1)))\n    val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey((x: Int, y: Int) => x + y)\n    val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map((g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey((m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2)\n    popularGenresByYear\n  }",
              "status" : "Killed"
            },
            {
              "id" : 83,
              "originalProgramId" : 3,
              "mutationOperator" : "ATR",
              "mutationOperatorDescription" : "Aggregation Transformation Replacement",
              "mutantCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n  val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap { (m: Movie) => m.genres.map(g => ((m.year, g), 1)) }\n  val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey { (firstParameter: Int, secondParameter: Int) => {\n    val originalFunction = ((x: Int, y: Int) => x + y)(_, _)\n    originalFunction(secondParameter, secondParameter)\n  } }\n  val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map { (g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey { (m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2 }\n  popularGenresByYear\n}",
              "originalCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n    val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap((m: Movie) => m.genres.map(g => ((m.year, g), 1)))\n    val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey((x: Int, y: Int) => x + y)\n    val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map((g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey((m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2)\n    popularGenresByYear\n  }",
              "status" : "Killed"
            },
            {
              "id" : 84,
              "originalProgramId" : 3,
              "mutationOperator" : "ATR",
              "mutationOperatorDescription" : "Aggregation Transformation Replacement",
              "mutantCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n  val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap { (m: Movie) => m.genres.map(g => ((m.year, g), 1)) }\n  val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey { (firstParameter: Int, secondParameter: Int) => {\n    val originalFunction = ((x: Int, y: Int) => x + y)(_, _)\n    originalFunction(secondParameter, firstParameter)\n  } }\n  val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map { (g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey { (m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2 }\n  popularGenresByYear\n}",
              "originalCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n    val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap((m: Movie) => m.genres.map(g => ((m.year, g), 1)))\n    val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey((x: Int, y: Int) => x + y)\n    val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map((g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey((m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2)\n    popularGenresByYear\n  }",
              "status" : "Equivalent"
            },
            {
              "id" : 85,
              "originalProgramId" : 3,
              "mutationOperator" : "ATR",
              "mutationOperatorDescription" : "Aggregation Transformation Replacement",
              "mutantCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n  val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap { (m: Movie) => m.genres.map(g => ((m.year, g), 1)) }\n  val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey { (x: Int, y: Int) => x + y }\n  val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map { (g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey { (firstParameter: (String, Int), secondParameter: (String, Int)) => firstParameter }\n  popularGenresByYear\n}",
              "originalCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n    val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap((m: Movie) => m.genres.map(g => ((m.year, g), 1)))\n    val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey((x: Int, y: Int) => x + y)\n    val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map((g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey((m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2)\n    popularGenresByYear\n  }",
              "status" : "Killed"
            },
            {
              "id" : 86,
              "originalProgramId" : 3,
              "mutationOperator" : "ATR",
              "mutationOperatorDescription" : "Aggregation Transformation Replacement",
              "mutantCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n  val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap { (m: Movie) => m.genres.map(g => ((m.year, g), 1)) }\n  val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey { (x: Int, y: Int) => x + y }\n  val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map { (g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey { (firstParameter: (String, Int), secondParameter: (String, Int)) => secondParameter }\n  popularGenresByYear\n}",
              "originalCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n    val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap((m: Movie) => m.genres.map(g => ((m.year, g), 1)))\n    val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey((x: Int, y: Int) => x + y)\n    val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map((g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey((m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2)\n    popularGenresByYear\n  }",
              "status" : "Killed"
            },
            {
              "id" : 87,
              "originalProgramId" : 3,
              "mutationOperator" : "ATR",
              "mutationOperatorDescription" : "Aggregation Transformation Replacement",
              "mutantCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n  val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap { (m: Movie) => m.genres.map(g => ((m.year, g), 1)) }\n  val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey { (x: Int, y: Int) => x + y }\n  val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map { (g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey { (firstParameter: (String, Int), secondParameter: (String, Int)) => {\n    val originalFunction = ((m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2)(_, _)\n    originalFunction(firstParameter, firstParameter)\n  } }\n  popularGenresByYear\n}",
              "originalCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n    val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap((m: Movie) => m.genres.map(g => ((m.year, g), 1)))\n    val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey((x: Int, y: Int) => x + y)\n    val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map((g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey((m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2)\n    popularGenresByYear\n  }",
              "status" : "Killed"
            },
            {
              "id" : 88,
              "originalProgramId" : 3,
              "mutationOperator" : "ATR",
              "mutationOperatorDescription" : "Aggregation Transformation Replacement",
              "mutantCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n  val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap { (m: Movie) => m.genres.map(g => ((m.year, g), 1)) }\n  val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey { (x: Int, y: Int) => x + y }\n  val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map { (g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey { (firstParameter: (String, Int), secondParameter: (String, Int)) => {\n    val originalFunction = ((m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2)(_, _)\n    originalFunction(secondParameter, secondParameter)\n  } }\n  popularGenresByYear\n}",
              "originalCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n    val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap((m: Movie) => m.genres.map(g => ((m.year, g), 1)))\n    val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey((x: Int, y: Int) => x + y)\n    val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map((g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey((m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2)\n    popularGenresByYear\n  }",
              "status" : "Killed"
            },
            {
              "id" : 89,
              "originalProgramId" : 3,
              "mutationOperator" : "ATR",
              "mutationOperatorDescription" : "Aggregation Transformation Replacement",
              "mutantCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n  val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap { (m: Movie) => m.genres.map(g => ((m.year, g), 1)) }\n  val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey { (x: Int, y: Int) => x + y }\n  val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map { (g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey { (firstParameter: (String, Int), secondParameter: (String, Int)) => {\n    val originalFunction = ((m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2)(_, _)\n    originalFunction(secondParameter, firstParameter)\n  } }\n  popularGenresByYear\n}",
              "originalCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n    val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap((m: Movie) => m.genres.map(g => ((m.year, g), 1)))\n    val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey((x: Int, y: Int) => x + y)\n    val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map((g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey((m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2)\n    popularGenresByYear\n  }",
              "status" : "Killed"
            }
          ],
          "removedMutants" : [
          ],
          "mutationOperatorsMetrics" : {
            "totalMutantsPerOperator" : {
              "FTD" : 0,
              "JTR" : 0,
              "UTR" : 0,
              "MTR" : 15,
              "UTD" : 2,
              "OTD" : 0,
              "BTR" : 0,
              "STR" : 0,
              "BTS" : 0,
              "ATR" : 10,
              "OTI" : 0,
              "DTI" : 4,
              "DTD" : 0,
              "NFTP" : 0,
              "UTS" : 0
            },
            "totalKilledMutantsPerOperator" : {
              "FTD" : 0,
              "JTR" : 0,
              "UTR" : 0,
              "MTR" : 13,
              "UTD" : 2,
              "OTD" : 0,
              "BTR" : 0,
              "STR" : 0,
              "BTS" : 0,
              "ATR" : 9,
              "OTI" : 0,
              "DTI" : 1,
              "DTD" : 0,
              "NFTP" : 0,
              "UTS" : 0
            },
            "totalLivedMutantsPerOperator" : {
              "FTD" : 0,
              "JTR" : 0,
              "UTR" : 0,
              "MTR" : 1,
              "UTD" : 0,
              "OTD" : 0,
              "BTR" : 0,
              "STR" : 0,
              "BTS" : 0,
              "ATR" : 0,
              "OTI" : 0,
              "DTI" : 2,
              "DTD" : 0,
              "NFTP" : 0,
              "UTS" : 0
            },
            "totalEquivalentMutantsPerOperator" : {
              "FTD" : 0,
              "JTR" : 0,
              "UTR" : 0,
              "MTR" : 1,
              "UTD" : 0,
              "OTD" : 0,
              "BTR" : 0,
              "STR" : 0,
              "BTS" : 0,
              "ATR" : 1,
              "OTI" : 0,
              "DTI" : 1,
              "DTD" : 0,
              "NFTP" : 0,
              "UTS" : 0
            },
            "totalErrorMutantsPerOperator" : {
              "FTD" : 0,
              "JTR" : 0,
              "UTR" : 0,
              "MTR" : 0,
              "UTD" : 0,
              "OTD" : 0,
              "BTR" : 0,
              "STR" : 0,
              "BTS" : 0,
              "ATR" : 0,
              "OTI" : 0,
              "DTI" : 0,
              "DTD" : 0,
              "NFTP" : 0,
              "UTS" : 0
            },
            "totalRemovedMutantsPerOperator" : {
              "FTD" : 0,
              "JTR" : 0,
              "UTR" : 0,
              "MTR" : 0,
              "UTD" : 0,
              "OTD" : 0,
              "BTR" : 0,
              "STR" : 0,
              "BTS" : 0,
              "ATR" : 0,
              "OTI" : 0,
              "DTI" : 0,
              "DTD" : 0,
              "NFTP" : 0,
              "UTS" : 0
            },
            "descriptionPerOperator" : {
              "FTD" : "Filter Transformation Deletion",
              "JTR" : "Join Transformation Replacement",
              "UTR" : "Unary Transformation Replacement",
              "MTR" : "Mapping Transformation Replacement",
              "UTD" : "Unary Transformation Deletion",
              "OTD" : "Order Transformation Deletion",
              "BTR" : "Binary Transformation Replacement",
              "STR" : "Set Transformation Replacement",
              "BTS" : "Binary Transformation Swap",
              "ATR" : "Aggregation Transformation Replacement",
              "OTI" : "Order Transformation Inversion",
              "DTI" : "Distinct Transformation Insertion",
              "DTD" : "Distinct Transformation Deletion",
              "NFTP" : "Negation of Filter Transformation Predicate",
              "UTS" : "Unary Transformation Swap"
            }
          },
          "totalDatasets" : 5,
          "totalTransformations" : 4,
          "totalMutants" : 31,
          "totalKilledMutants" : 25,
          "totalLivedMutants" : 3,
          "totalEquivalentMutants" : 3,
          "totalErrorMutants" : 0,
          "totalRemovedMutants" : 0,
          "mutationScore" : 0.89285713
        },
        {
          "id" : 4,
          "programSourceId" : 1,
          "name" : "ratingsStatistics",
          "code" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map((r: Rating) => (r.movieId, r))\n    val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n    val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map((tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating))\n    val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n    val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map((x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)))\n    ratingsStats\n  }",
          "datasets" : [
            {
              "id" : 17,
              "name" : "movies",
              "datasetType" : "RDD[Movie]",
              "inputDataset" : true,
              "outputDataset" : false
            },
            {
              "id" : 18,
              "name" : "ratings",
              "datasetType" : "RDD[Rating]",
              "inputDataset" : true,
              "outputDataset" : false
            },
            {
              "id" : 19,
              "name" : "moviesIdKey",
              "datasetType" : "RDD[(Int, Movie)]",
              "inputDataset" : false,
              "outputDataset" : false
            },
            {
              "id" : 20,
              "name" : "ratingsMovieIdKey",
              "datasetType" : "RDD[(Int, Rating)]",
              "inputDataset" : false,
              "outputDataset" : false
            },
            {
              "id" : 21,
              "name" : "joinMoviesRatings",
              "datasetType" : "RDD[(Int, (Movie, Rating))]",
              "inputDataset" : false,
              "outputDataset" : false
            },
            {
              "id" : 22,
              "name" : "moviesInfoCounts",
              "datasetType" : "RDD[(Tuple3[Int, String, Int], Double)]",
              "inputDataset" : false,
              "outputDataset" : false
            },
            {
              "id" : 23,
              "name" : "groupByMoviesInfo",
              "datasetType" : "RDD[(Tuple3[Int, String, Int], Iterable[Double])]",
              "inputDataset" : false,
              "outputDataset" : false
            },
            {
              "id" : 24,
              "name" : "ratingsStats",
              "datasetType" : "RDD[(Tuple3[Int, String, Int], Tuple4[Int, Double, Double, Double])]",
              "inputDataset" : false,
              "outputDataset" : true
            }
          ],
          "transformations" : [
            {
              "id" : 12,
              "name" : "map",
              "inputTypes" : [
                "RDD[Movie]"
              ],
              "outputTypes" : [
                "RDD[(Int, Movie)]"
              ],
              "loadTransformation" : false
            },
            {
              "id" : 13,
              "name" : "map",
              "inputTypes" : [
                "RDD[Rating]"
              ],
              "outputTypes" : [
                "RDD[(Int, Rating)]"
              ],
              "loadTransformation" : false
            },
            {
              "id" : 14,
              "name" : "join",
              "inputTypes" : [
                "RDD[(Int, Movie)]",
                "RDD[(Int, Rating)]"
              ],
              "outputTypes" : [
                "RDD[(Int, (Movie, Rating))]"
              ],
              "loadTransformation" : false
            },
            {
              "id" : 15,
              "name" : "map",
              "inputTypes" : [
                "RDD[(Int, (Movie, Rating))]"
              ],
              "outputTypes" : [
                "RDD[(Tuple3[Int, String, Int], Double)]"
              ],
              "loadTransformation" : false
            },
            {
              "id" : 16,
              "name" : "groupByKey",
              "inputTypes" : [
                "RDD[(Tuple3[Int, String, Int], Double)]"
              ],
              "outputTypes" : [
                "RDD[(Tuple3[Int, String, Int], Iterable[Double])]"
              ],
              "loadTransformation" : false
            },
            {
              "id" : 17,
              "name" : "map",
              "inputTypes" : [
                "RDD[(Tuple3[Int, String, Int], Iterable[Double])]"
              ],
              "outputTypes" : [
                "RDD[(Tuple3[Int, String, Int], Tuple4[Int, Double, Double, Double])]"
              ],
              "loadTransformation" : false
            }
          ],
          "edges" : [
            {
              "id" : 23,
              "datasetId" : 17,
              "transformationId" : 12,
              "direction" : "DatasetToTransformation"
            },
            {
              "id" : 24,
              "datasetId" : 19,
              "transformationId" : 12,
              "direction" : "TransformationToDataset"
            },
            {
              "id" : 25,
              "datasetId" : 18,
              "transformationId" : 13,
              "direction" : "DatasetToTransformation"
            },
            {
              "id" : 26,
              "datasetId" : 20,
              "transformationId" : 13,
              "direction" : "TransformationToDataset"
            },
            {
              "id" : 27,
              "datasetId" : 19,
              "transformationId" : 14,
              "direction" : "DatasetToTransformation"
            },
            {
              "id" : 28,
              "datasetId" : 20,
              "transformationId" : 14,
              "direction" : "DatasetToTransformation"
            },
            {
              "id" : 29,
              "datasetId" : 21,
              "transformationId" : 14,
              "direction" : "TransformationToDataset"
            },
            {
              "id" : 30,
              "datasetId" : 21,
              "transformationId" : 15,
              "direction" : "DatasetToTransformation"
            },
            {
              "id" : 31,
              "datasetId" : 22,
              "transformationId" : 15,
              "direction" : "TransformationToDataset"
            },
            {
              "id" : 32,
              "datasetId" : 22,
              "transformationId" : 16,
              "direction" : "DatasetToTransformation"
            },
            {
              "id" : 33,
              "datasetId" : 23,
              "transformationId" : 16,
              "direction" : "TransformationToDataset"
            },
            {
              "id" : 34,
              "datasetId" : 23,
              "transformationId" : 17,
              "direction" : "DatasetToTransformation"
            },
            {
              "id" : 35,
              "datasetId" : 24,
              "transformationId" : 17,
              "direction" : "TransformationToDataset"
            }
          ],
          "mutants" : [
            {
              "id" : 90,
              "originalProgramId" : 4,
              "mutationOperator" : "MTR",
              "mutationOperatorDescription" : "Mapping Transformation Replacement",
              "mutantCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (inputParameter: Movie) => {\n    val originalFunction = ((m: Movie) => (m.movieId, m))(_)\n    val originalValue = originalFunction(inputParameter)\n    (0, originalValue._2)\n  } }\n  val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map { (r: Rating) => (r.movieId, r) }\n  val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n  val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map { (tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating) }\n  val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n  val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map { (x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)) }\n  ratingsStats\n}",
              "originalCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map((r: Rating) => (r.movieId, r))\n    val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n    val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map((tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating))\n    val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n    val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map((x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)))\n    ratingsStats\n  }",
              "status" : "Killed"
            },
            {
              "id" : 91,
              "originalProgramId" : 4,
              "mutationOperator" : "MTR",
              "mutationOperatorDescription" : "Mapping Transformation Replacement",
              "mutantCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (inputParameter: Movie) => {\n    val originalFunction = ((m: Movie) => (m.movieId, m))(_)\n    val originalValue = originalFunction(inputParameter)\n    (1, originalValue._2)\n  } }\n  val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map { (r: Rating) => (r.movieId, r) }\n  val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n  val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map { (tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating) }\n  val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n  val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map { (x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)) }\n  ratingsStats\n}",
              "originalCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map((r: Rating) => (r.movieId, r))\n    val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n    val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map((tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating))\n    val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n    val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map((x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)))\n    ratingsStats\n  }",
              "status" : "Killed"
            },
            {
              "id" : 92,
              "originalProgramId" : 4,
              "mutationOperator" : "MTR",
              "mutationOperatorDescription" : "Mapping Transformation Replacement",
              "mutantCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (inputParameter: Movie) => {\n    val originalFunction = ((m: Movie) => (m.movieId, m))(_)\n    val originalValue = originalFunction(inputParameter)\n    (Int.MaxValue, originalValue._2)\n  } }\n  val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map { (r: Rating) => (r.movieId, r) }\n  val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n  val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map { (tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating) }\n  val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n  val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map { (x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)) }\n  ratingsStats\n}",
              "originalCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map((r: Rating) => (r.movieId, r))\n    val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n    val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map((tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating))\n    val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n    val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map((x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)))\n    ratingsStats\n  }",
              "status" : "Killed"
            },
            {
              "id" : 93,
              "originalProgramId" : 4,
              "mutationOperator" : "MTR",
              "mutationOperatorDescription" : "Mapping Transformation Replacement",
              "mutantCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (inputParameter: Movie) => {\n    val originalFunction = ((m: Movie) => (m.movieId, m))(_)\n    val originalValue = originalFunction(inputParameter)\n    (Int.MinValue, originalValue._2)\n  } }\n  val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map { (r: Rating) => (r.movieId, r) }\n  val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n  val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map { (tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating) }\n  val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n  val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map { (x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)) }\n  ratingsStats\n}",
              "originalCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map((r: Rating) => (r.movieId, r))\n    val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n    val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map((tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating))\n    val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n    val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map((x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)))\n    ratingsStats\n  }",
              "status" : "Killed"
            },
            {
              "id" : 94,
              "originalProgramId" : 4,
              "mutationOperator" : "MTR",
              "mutationOperatorDescription" : "Mapping Transformation Replacement",
              "mutantCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (inputParameter: Movie) => {\n    val originalFunction = ((m: Movie) => (m.movieId, m))(_)\n    val originalValue = originalFunction(inputParameter)\n    (-originalValue._1, originalValue._2)\n  } }\n  val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map { (r: Rating) => (r.movieId, r) }\n  val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n  val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map { (tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating) }\n  val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n  val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map { (x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)) }\n  ratingsStats\n}",
              "originalCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map((r: Rating) => (r.movieId, r))\n    val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n    val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map((tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating))\n    val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n    val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map((x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)))\n    ratingsStats\n  }",
              "status" : "Killed"
            },
            {
              "id" : 95,
              "originalProgramId" : 4,
              "mutationOperator" : "MTR",
              "mutationOperatorDescription" : "Mapping Transformation Replacement",
              "mutantCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (inputParameter: Movie) => {\n    val originalFunction = ((m: Movie) => (m.movieId, m))(_)\n    val originalValue = originalFunction(inputParameter)\n    (originalValue._1, null.asInstanceOf[Movie])\n  } }\n  val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map { (r: Rating) => (r.movieId, r) }\n  val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n  val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map { (tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating) }\n  val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n  val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map { (x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)) }\n  ratingsStats\n}",
              "originalCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map((r: Rating) => (r.movieId, r))\n    val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n    val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map((tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating))\n    val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n    val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map((x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)))\n    ratingsStats\n  }",
              "status" : "Killed"
            },
            {
              "id" : 96,
              "originalProgramId" : 4,
              "mutationOperator" : "MTR",
              "mutationOperatorDescription" : "Mapping Transformation Replacement",
              "mutantCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map { (inputParameter: Rating) => {\n    val originalFunction = ((r: Rating) => (r.movieId, r))(_)\n    val originalValue = originalFunction(inputParameter)\n    (0, originalValue._2)\n  } }\n  val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n  val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map { (tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating) }\n  val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n  val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map { (x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)) }\n  ratingsStats\n}",
              "originalCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map((r: Rating) => (r.movieId, r))\n    val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n    val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map((tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating))\n    val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n    val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map((x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)))\n    ratingsStats\n  }",
              "status" : "Killed"
            },
            {
              "id" : 97,
              "originalProgramId" : 4,
              "mutationOperator" : "MTR",
              "mutationOperatorDescription" : "Mapping Transformation Replacement",
              "mutantCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map { (inputParameter: Rating) => {\n    val originalFunction = ((r: Rating) => (r.movieId, r))(_)\n    val originalValue = originalFunction(inputParameter)\n    (1, originalValue._2)\n  } }\n  val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n  val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map { (tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating) }\n  val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n  val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map { (x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)) }\n  ratingsStats\n}",
              "originalCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map((r: Rating) => (r.movieId, r))\n    val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n    val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map((tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating))\n    val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n    val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map((x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)))\n    ratingsStats\n  }",
              "status" : "Killed"
            },
            {
              "id" : 98,
              "originalProgramId" : 4,
              "mutationOperator" : "MTR",
              "mutationOperatorDescription" : "Mapping Transformation Replacement",
              "mutantCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map { (inputParameter: Rating) => {\n    val originalFunction = ((r: Rating) => (r.movieId, r))(_)\n    val originalValue = originalFunction(inputParameter)\n    (Int.MaxValue, originalValue._2)\n  } }\n  val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n  val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map { (tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating) }\n  val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n  val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map { (x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)) }\n  ratingsStats\n}",
              "originalCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map((r: Rating) => (r.movieId, r))\n    val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n    val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map((tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating))\n    val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n    val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map((x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)))\n    ratingsStats\n  }",
              "status" : "Killed"
            },
            {
              "id" : 99,
              "originalProgramId" : 4,
              "mutationOperator" : "MTR",
              "mutationOperatorDescription" : "Mapping Transformation Replacement",
              "mutantCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map { (inputParameter: Rating) => {\n    val originalFunction = ((r: Rating) => (r.movieId, r))(_)\n    val originalValue = originalFunction(inputParameter)\n    (Int.MinValue, originalValue._2)\n  } }\n  val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n  val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map { (tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating) }\n  val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n  val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map { (x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)) }\n  ratingsStats\n}",
              "originalCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map((r: Rating) => (r.movieId, r))\n    val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n    val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map((tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating))\n    val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n    val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map((x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)))\n    ratingsStats\n  }",
              "status" : "Killed"
            },
            {
              "id" : 100,
              "originalProgramId" : 4,
              "mutationOperator" : "MTR",
              "mutationOperatorDescription" : "Mapping Transformation Replacement",
              "mutantCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map { (inputParameter: Rating) => {\n    val originalFunction = ((r: Rating) => (r.movieId, r))(_)\n    val originalValue = originalFunction(inputParameter)\n    (-originalValue._1, originalValue._2)\n  } }\n  val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n  val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map { (tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating) }\n  val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n  val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map { (x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)) }\n  ratingsStats\n}",
              "originalCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map((r: Rating) => (r.movieId, r))\n    val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n    val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map((tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating))\n    val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n    val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map((x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)))\n    ratingsStats\n  }",
              "status" : "Killed"
            },
            {
              "id" : 101,
              "originalProgramId" : 4,
              "mutationOperator" : "MTR",
              "mutationOperatorDescription" : "Mapping Transformation Replacement",
              "mutantCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map { (inputParameter: Rating) => {\n    val originalFunction = ((r: Rating) => (r.movieId, r))(_)\n    val originalValue = originalFunction(inputParameter)\n    (originalValue._1, null.asInstanceOf[Rating])\n  } }\n  val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n  val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map { (tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating) }\n  val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n  val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map { (x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)) }\n  ratingsStats\n}",
              "originalCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map((r: Rating) => (r.movieId, r))\n    val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n    val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map((tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating))\n    val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n    val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map((x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)))\n    ratingsStats\n  }",
              "status" : "Killed"
            },
            {
              "id" : 102,
              "originalProgramId" : 4,
              "mutationOperator" : "MTR",
              "mutationOperatorDescription" : "Mapping Transformation Replacement",
              "mutantCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map { (r: Rating) => (r.movieId, r) }\n  val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n  val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map { (inputParameter: (Int, (Movie, Rating))) => {\n    val originalFunction = ((tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating))(_)\n    val originalValue = originalFunction(inputParameter)\n    (originalValue._1, 0d)\n  } }\n  val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n  val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map { (x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)) }\n  ratingsStats\n}",
              "originalCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map((r: Rating) => (r.movieId, r))\n    val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n    val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map((tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating))\n    val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n    val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map((x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)))\n    ratingsStats\n  }",
              "status" : "Killed"
            },
            {
              "id" : 103,
              "originalProgramId" : 4,
              "mutationOperator" : "MTR",
              "mutationOperatorDescription" : "Mapping Transformation Replacement",
              "mutantCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map { (r: Rating) => (r.movieId, r) }\n  val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n  val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map { (inputParameter: (Int, (Movie, Rating))) => {\n    val originalFunction = ((tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating))(_)\n    val originalValue = originalFunction(inputParameter)\n    (originalValue._1, 1d)\n  } }\n  val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n  val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map { (x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)) }\n  ratingsStats\n}",
              "originalCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map((r: Rating) => (r.movieId, r))\n    val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n    val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map((tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating))\n    val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n    val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map((x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)))\n    ratingsStats\n  }",
              "status" : "Killed"
            },
            {
              "id" : 104,
              "originalProgramId" : 4,
              "mutationOperator" : "MTR",
              "mutationOperatorDescription" : "Mapping Transformation Replacement",
              "mutantCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map { (r: Rating) => (r.movieId, r) }\n  val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n  val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map { (inputParameter: (Int, (Movie, Rating))) => {\n    val originalFunction = ((tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating))(_)\n    val originalValue = originalFunction(inputParameter)\n    (originalValue._1, Double.MaxValue)\n  } }\n  val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n  val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map { (x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)) }\n  ratingsStats\n}",
              "originalCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map((r: Rating) => (r.movieId, r))\n    val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n    val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map((tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating))\n    val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n    val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map((x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)))\n    ratingsStats\n  }",
              "status" : "Killed"
            },
            {
              "id" : 105,
              "originalProgramId" : 4,
              "mutationOperator" : "MTR",
              "mutationOperatorDescription" : "Mapping Transformation Replacement",
              "mutantCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map { (r: Rating) => (r.movieId, r) }\n  val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n  val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map { (inputParameter: (Int, (Movie, Rating))) => {\n    val originalFunction = ((tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating))(_)\n    val originalValue = originalFunction(inputParameter)\n    (originalValue._1, Double.MinValue)\n  } }\n  val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n  val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map { (x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)) }\n  ratingsStats\n}",
              "originalCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map((r: Rating) => (r.movieId, r))\n    val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n    val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map((tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating))\n    val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n    val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map((x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)))\n    ratingsStats\n  }",
              "status" : "Killed"
            },
            {
              "id" : 106,
              "originalProgramId" : 4,
              "mutationOperator" : "MTR",
              "mutationOperatorDescription" : "Mapping Transformation Replacement",
              "mutantCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map { (r: Rating) => (r.movieId, r) }\n  val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n  val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map { (inputParameter: (Int, (Movie, Rating))) => {\n    val originalFunction = ((tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating))(_)\n    val originalValue = originalFunction(inputParameter)\n    (originalValue._1, -originalValue._2)\n  } }\n  val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n  val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map { (x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)) }\n  ratingsStats\n}",
              "originalCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map((r: Rating) => (r.movieId, r))\n    val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n    val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map((tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating))\n    val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n    val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map((x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)))\n    ratingsStats\n  }",
              "status" : "Killed"
            },
            {
              "id" : 107,
              "originalProgramId" : 4,
              "mutationOperator" : "DTI",
              "mutationOperatorDescription" : "Distinct Transformation Insertion",
              "mutantCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }.distinct()\n  val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map { (r: Rating) => (r.movieId, r) }\n  val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n  val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map { (tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating) }\n  val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n  val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map { (x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)) }\n  ratingsStats\n}",
              "originalCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map((r: Rating) => (r.movieId, r))\n    val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n    val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map((tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating))\n    val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n    val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map((x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)))\n    ratingsStats\n  }",
              "status" : "Lived"
            },
            {
              "id" : 108,
              "originalProgramId" : 4,
              "mutationOperator" : "DTI",
              "mutationOperatorDescription" : "Distinct Transformation Insertion",
              "mutantCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map { (r: Rating) => (r.movieId, r) }.distinct()\n  val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n  val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map { (tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating) }\n  val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n  val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map { (x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)) }\n  ratingsStats\n}",
              "originalCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map((r: Rating) => (r.movieId, r))\n    val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n    val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map((tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating))\n    val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n    val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map((x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)))\n    ratingsStats\n  }",
              "status" : "Lived"
            },
            {
              "id" : 109,
              "originalProgramId" : 4,
              "mutationOperator" : "DTI",
              "mutationOperatorDescription" : "Distinct Transformation Insertion",
              "mutantCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map { (r: Rating) => (r.movieId, r) }\n  val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey).distinct()\n  val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map { (tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating) }\n  val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n  val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map { (x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)) }\n  ratingsStats\n}",
              "originalCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map((r: Rating) => (r.movieId, r))\n    val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n    val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map((tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating))\n    val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n    val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map((x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)))\n    ratingsStats\n  }",
              "status" : "Lived"
            },
            {
              "id" : 110,
              "originalProgramId" : 4,
              "mutationOperator" : "DTI",
              "mutationOperatorDescription" : "Distinct Transformation Insertion",
              "mutantCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map { (r: Rating) => (r.movieId, r) }\n  val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n  val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map { (tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating) }.distinct()\n  val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n  val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map { (x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)) }\n  ratingsStats\n}",
              "originalCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map((r: Rating) => (r.movieId, r))\n    val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n    val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map((tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating))\n    val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n    val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map((x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)))\n    ratingsStats\n  }",
              "status" : "Killed"
            },
            {
              "id" : 111,
              "originalProgramId" : 4,
              "mutationOperator" : "DTI",
              "mutationOperatorDescription" : "Distinct Transformation Insertion",
              "mutantCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map { (r: Rating) => (r.movieId, r) }\n  val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n  val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map { (tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating) }\n  val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey().distinct()\n  val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map { (x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)) }\n  ratingsStats\n}",
              "originalCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map((r: Rating) => (r.movieId, r))\n    val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n    val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map((tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating))\n    val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n    val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map((x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)))\n    ratingsStats\n  }",
              "status" : "Equivalent"
            },
            {
              "id" : 112,
              "originalProgramId" : 4,
              "mutationOperator" : "DTI",
              "mutationOperatorDescription" : "Distinct Transformation Insertion",
              "mutantCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map { (r: Rating) => (r.movieId, r) }\n  val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n  val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map { (tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating) }\n  val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n  val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map { (x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)) }.distinct()\n  ratingsStats\n}",
              "originalCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map((r: Rating) => (r.movieId, r))\n    val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n    val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map((tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating))\n    val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n    val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map((x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)))\n    ratingsStats\n  }",
              "status" : "Equivalent"
            },
            {
              "id" : 113,
              "originalProgramId" : 4,
              "mutationOperator" : "JTR",
              "mutationOperatorDescription" : "Join Transformation Replacement",
              "mutantCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map { (r: Rating) => (r.movieId, r) }\n  val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.leftOuterJoin(ratingsMovieIdKey).map(tuple => (tuple._1, (tuple._2._1, tuple._2._2.getOrElse(null.asInstanceOf[Rating]))))\n  val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map { (tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating) }\n  val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n  val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map { (x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)) }\n  ratingsStats\n}",
              "originalCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map((r: Rating) => (r.movieId, r))\n    val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n    val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map((tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating))\n    val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n    val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map((x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)))\n    ratingsStats\n  }",
              "status" : "Lived"
            },
            {
              "id" : 114,
              "originalProgramId" : 4,
              "mutationOperator" : "JTR",
              "mutationOperatorDescription" : "Join Transformation Replacement",
              "mutantCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map { (r: Rating) => (r.movieId, r) }\n  val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.rightOuterJoin(ratingsMovieIdKey).map(tuple => (tuple._1, (tuple._2._1.getOrElse(null.asInstanceOf[Movie]), tuple._2._2)))\n  val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map { (tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating) }\n  val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n  val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map { (x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)) }\n  ratingsStats\n}",
              "originalCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map((r: Rating) => (r.movieId, r))\n    val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n    val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map((tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating))\n    val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n    val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map((x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)))\n    ratingsStats\n  }",
              "status" : "Lived"
            },
            {
              "id" : 115,
              "originalProgramId" : 4,
              "mutationOperator" : "JTR",
              "mutationOperatorDescription" : "Join Transformation Replacement",
              "mutantCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map { (r: Rating) => (r.movieId, r) }\n  val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.fullOuterJoin(ratingsMovieIdKey).map(tuple => (tuple._1, (tuple._2._1.getOrElse(null.asInstanceOf[Movie]), tuple._2._2.getOrElse(null.asInstanceOf[Rating]))))\n  val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map { (tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating) }\n  val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n  val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map { (x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)) }\n  ratingsStats\n}",
              "originalCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map((r: Rating) => (r.movieId, r))\n    val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n    val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map((tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating))\n    val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n    val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map((x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)))\n    ratingsStats\n  }",
              "status" : "Lived"
            }
          ],
          "removedMutants" : [
          ],
          "mutationOperatorsMetrics" : {
            "totalMutantsPerOperator" : {
              "FTD" : 0,
              "JTR" : 3,
              "UTR" : 0,
              "MTR" : 17,
              "UTD" : 0,
              "OTD" : 0,
              "BTR" : 0,
              "STR" : 0,
              "BTS" : 0,
              "ATR" : 0,
              "OTI" : 0,
              "DTI" : 6,
              "DTD" : 0,
              "NFTP" : 0,
              "UTS" : 0
            },
            "totalKilledMutantsPerOperator" : {
              "FTD" : 0,
              "JTR" : 0,
              "UTR" : 0,
              "MTR" : 17,
              "UTD" : 0,
              "OTD" : 0,
              "BTR" : 0,
              "STR" : 0,
              "BTS" : 0,
              "ATR" : 0,
              "OTI" : 0,
              "DTI" : 1,
              "DTD" : 0,
              "NFTP" : 0,
              "UTS" : 0
            },
            "totalLivedMutantsPerOperator" : {
              "FTD" : 0,
              "JTR" : 3,
              "UTR" : 0,
              "MTR" : 0,
              "UTD" : 0,
              "OTD" : 0,
              "BTR" : 0,
              "STR" : 0,
              "BTS" : 0,
              "ATR" : 0,
              "OTI" : 0,
              "DTI" : 3,
              "DTD" : 0,
              "NFTP" : 0,
              "UTS" : 0
            },
            "totalEquivalentMutantsPerOperator" : {
              "FTD" : 0,
              "JTR" : 0,
              "UTR" : 0,
              "MTR" : 0,
              "UTD" : 0,
              "OTD" : 0,
              "BTR" : 0,
              "STR" : 0,
              "BTS" : 0,
              "ATR" : 0,
              "OTI" : 0,
              "DTI" : 2,
              "DTD" : 0,
              "NFTP" : 0,
              "UTS" : 0
            },
            "totalErrorMutantsPerOperator" : {
              "FTD" : 0,
              "JTR" : 0,
              "UTR" : 0,
              "MTR" : 0,
              "UTD" : 0,
              "OTD" : 0,
              "BTR" : 0,
              "STR" : 0,
              "BTS" : 0,
              "ATR" : 0,
              "OTI" : 0,
              "DTI" : 0,
              "DTD" : 0,
              "NFTP" : 0,
              "UTS" : 0
            },
            "totalRemovedMutantsPerOperator" : {
              "FTD" : 0,
              "JTR" : 0,
              "UTR" : 0,
              "MTR" : 0,
              "UTD" : 0,
              "OTD" : 0,
              "BTR" : 0,
              "STR" : 0,
              "BTS" : 0,
              "ATR" : 0,
              "OTI" : 0,
              "DTI" : 0,
              "DTD" : 0,
              "NFTP" : 0,
              "UTS" : 0
            },
            "descriptionPerOperator" : {
              "FTD" : "Filter Transformation Deletion",
              "JTR" : "Join Transformation Replacement",
              "UTR" : "Unary Transformation Replacement",
              "MTR" : "Mapping Transformation Replacement",
              "UTD" : "Unary Transformation Deletion",
              "OTD" : "Order Transformation Deletion",
              "BTR" : "Binary Transformation Replacement",
              "STR" : "Set Transformation Replacement",
              "BTS" : "Binary Transformation Swap",
              "ATR" : "Aggregation Transformation Replacement",
              "OTI" : "Order Transformation Inversion",
              "DTI" : "Distinct Transformation Insertion",
              "DTD" : "Distinct Transformation Deletion",
              "NFTP" : "Negation of Filter Transformation Predicate",
              "UTS" : "Unary Transformation Swap"
            }
          },
          "totalDatasets" : 8,
          "totalTransformations" : 6,
          "totalMutants" : 26,
          "totalKilledMutants" : 18,
          "totalLivedMutants" : 6,
          "totalEquivalentMutants" : 2,
          "totalErrorMutants" : 0,
          "totalRemovedMutants" : 0,
          "mutationScore" : 0.75
        },
        {
          "id" : 5,
          "programSourceId" : 1,
          "name" : "meanOfMeansOfRatingsOfAllMovies",
          "code" : "def meanOfMeansOfRatingsOfAllMovies(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))]) = {\n    val meanOfRatingsAllMovies: RDD[(Double, Int)] = ratingsStats.map((m: ((Int, String, Int), (Int, Double, Double, Double))) => (m._2._2, 1))\n    val sumMeanOfRatingsAllMovies: (Double, Int) = meanOfRatingsAllMovies.reduce((m1: (Double, Int), m2: (Double, Int)) => (m1._1 + m2._1, m1._2 + m2._2))\n    sumMeanOfRatingsAllMovies._1 / sumMeanOfRatingsAllMovies._2\n  }",
          "datasets" : [
            {
              "id" : 25,
              "name" : "ratingsStats",
              "datasetType" : "RDD[(Tuple3[Int, String, Int], Tuple4[Int, Double, Double, Double])]",
              "inputDataset" : true,
              "outputDataset" : false
            },
            {
              "id" : 26,
              "name" : "meanOfRatingsAllMovies",
              "datasetType" : "RDD[(Double, Int)]",
              "inputDataset" : false,
              "outputDataset" : false
            }
          ],
          "transformations" : [
            {
              "id" : 18,
              "name" : "map",
              "inputTypes" : [
                "RDD[(Tuple3[Int, String, Int], Tuple4[Int, Double, Double, Double])]"
              ],
              "outputTypes" : [
                "RDD[(Double, Int)]"
              ],
              "loadTransformation" : false
            },
            {
              "id" : 19,
              "name" : "reduce",
              "inputTypes" : [
                "RDD[(Double, Int)]"
              ],
              "outputTypes" : [
              ],
              "loadTransformation" : true
            }
          ],
          "edges" : [
            {
              "id" : 36,
              "datasetId" : 25,
              "transformationId" : 18,
              "direction" : "DatasetToTransformation"
            },
            {
              "id" : 37,
              "datasetId" : 26,
              "transformationId" : 18,
              "direction" : "TransformationToDataset"
            },
            {
              "id" : 38,
              "datasetId" : 26,
              "transformationId" : 19,
              "direction" : "DatasetToTransformation"
            }
          ],
          "mutants" : [
            {
              "id" : 116,
              "originalProgramId" : 5,
              "mutationOperator" : "MTR",
              "mutationOperatorDescription" : "Mapping Transformation Replacement",
              "mutantCode" : "def meanOfMeansOfRatingsOfAllMovies(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))]) = {\n  val meanOfRatingsAllMovies: RDD[(Double, Int)] = ratingsStats.map { (inputParameter: (Tuple3[Int, String, Int], Tuple4[Int, Double, Double, Double])) => {\n    val originalFunction = ((m: ((Int, String, Int), (Int, Double, Double, Double))) => (m._2._2, 1))(_)\n    val originalValue = originalFunction(inputParameter)\n    (0d, originalValue._2)\n  } }\n  val sumMeanOfRatingsAllMovies: (Double, Int) = meanOfRatingsAllMovies.reduce { (m1: (Double, Int), m2: (Double, Int)) => (m1._1 + m2._1, m1._2 + m2._2) }\n  sumMeanOfRatingsAllMovies._1 / sumMeanOfRatingsAllMovies._2\n}",
              "originalCode" : "def meanOfMeansOfRatingsOfAllMovies(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))]) = {\n    val meanOfRatingsAllMovies: RDD[(Double, Int)] = ratingsStats.map((m: ((Int, String, Int), (Int, Double, Double, Double))) => (m._2._2, 1))\n    val sumMeanOfRatingsAllMovies: (Double, Int) = meanOfRatingsAllMovies.reduce((m1: (Double, Int), m2: (Double, Int)) => (m1._1 + m2._1, m1._2 + m2._2))\n    sumMeanOfRatingsAllMovies._1 / sumMeanOfRatingsAllMovies._2\n  }",
              "status" : "Killed"
            },
            {
              "id" : 117,
              "originalProgramId" : 5,
              "mutationOperator" : "MTR",
              "mutationOperatorDescription" : "Mapping Transformation Replacement",
              "mutantCode" : "def meanOfMeansOfRatingsOfAllMovies(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))]) = {\n  val meanOfRatingsAllMovies: RDD[(Double, Int)] = ratingsStats.map { (inputParameter: (Tuple3[Int, String, Int], Tuple4[Int, Double, Double, Double])) => {\n    val originalFunction = ((m: ((Int, String, Int), (Int, Double, Double, Double))) => (m._2._2, 1))(_)\n    val originalValue = originalFunction(inputParameter)\n    (1d, originalValue._2)\n  } }\n  val sumMeanOfRatingsAllMovies: (Double, Int) = meanOfRatingsAllMovies.reduce { (m1: (Double, Int), m2: (Double, Int)) => (m1._1 + m2._1, m1._2 + m2._2) }\n  sumMeanOfRatingsAllMovies._1 / sumMeanOfRatingsAllMovies._2\n}",
              "originalCode" : "def meanOfMeansOfRatingsOfAllMovies(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))]) = {\n    val meanOfRatingsAllMovies: RDD[(Double, Int)] = ratingsStats.map((m: ((Int, String, Int), (Int, Double, Double, Double))) => (m._2._2, 1))\n    val sumMeanOfRatingsAllMovies: (Double, Int) = meanOfRatingsAllMovies.reduce((m1: (Double, Int), m2: (Double, Int)) => (m1._1 + m2._1, m1._2 + m2._2))\n    sumMeanOfRatingsAllMovies._1 / sumMeanOfRatingsAllMovies._2\n  }",
              "status" : "Killed"
            },
            {
              "id" : 118,
              "originalProgramId" : 5,
              "mutationOperator" : "MTR",
              "mutationOperatorDescription" : "Mapping Transformation Replacement",
              "mutantCode" : "def meanOfMeansOfRatingsOfAllMovies(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))]) = {\n  val meanOfRatingsAllMovies: RDD[(Double, Int)] = ratingsStats.map { (inputParameter: (Tuple3[Int, String, Int], Tuple4[Int, Double, Double, Double])) => {\n    val originalFunction = ((m: ((Int, String, Int), (Int, Double, Double, Double))) => (m._2._2, 1))(_)\n    val originalValue = originalFunction(inputParameter)\n    (Double.MaxValue, originalValue._2)\n  } }\n  val sumMeanOfRatingsAllMovies: (Double, Int) = meanOfRatingsAllMovies.reduce { (m1: (Double, Int), m2: (Double, Int)) => (m1._1 + m2._1, m1._2 + m2._2) }\n  sumMeanOfRatingsAllMovies._1 / sumMeanOfRatingsAllMovies._2\n}",
              "originalCode" : "def meanOfMeansOfRatingsOfAllMovies(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))]) = {\n    val meanOfRatingsAllMovies: RDD[(Double, Int)] = ratingsStats.map((m: ((Int, String, Int), (Int, Double, Double, Double))) => (m._2._2, 1))\n    val sumMeanOfRatingsAllMovies: (Double, Int) = meanOfRatingsAllMovies.reduce((m1: (Double, Int), m2: (Double, Int)) => (m1._1 + m2._1, m1._2 + m2._2))\n    sumMeanOfRatingsAllMovies._1 / sumMeanOfRatingsAllMovies._2\n  }",
              "status" : "Killed"
            },
            {
              "id" : 119,
              "originalProgramId" : 5,
              "mutationOperator" : "MTR",
              "mutationOperatorDescription" : "Mapping Transformation Replacement",
              "mutantCode" : "def meanOfMeansOfRatingsOfAllMovies(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))]) = {\n  val meanOfRatingsAllMovies: RDD[(Double, Int)] = ratingsStats.map { (inputParameter: (Tuple3[Int, String, Int], Tuple4[Int, Double, Double, Double])) => {\n    val originalFunction = ((m: ((Int, String, Int), (Int, Double, Double, Double))) => (m._2._2, 1))(_)\n    val originalValue = originalFunction(inputParameter)\n    (Double.MinValue, originalValue._2)\n  } }\n  val sumMeanOfRatingsAllMovies: (Double, Int) = meanOfRatingsAllMovies.reduce { (m1: (Double, Int), m2: (Double, Int)) => (m1._1 + m2._1, m1._2 + m2._2) }\n  sumMeanOfRatingsAllMovies._1 / sumMeanOfRatingsAllMovies._2\n}",
              "originalCode" : "def meanOfMeansOfRatingsOfAllMovies(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))]) = {\n    val meanOfRatingsAllMovies: RDD[(Double, Int)] = ratingsStats.map((m: ((Int, String, Int), (Int, Double, Double, Double))) => (m._2._2, 1))\n    val sumMeanOfRatingsAllMovies: (Double, Int) = meanOfRatingsAllMovies.reduce((m1: (Double, Int), m2: (Double, Int)) => (m1._1 + m2._1, m1._2 + m2._2))\n    sumMeanOfRatingsAllMovies._1 / sumMeanOfRatingsAllMovies._2\n  }",
              "status" : "Killed"
            },
            {
              "id" : 120,
              "originalProgramId" : 5,
              "mutationOperator" : "MTR",
              "mutationOperatorDescription" : "Mapping Transformation Replacement",
              "mutantCode" : "def meanOfMeansOfRatingsOfAllMovies(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))]) = {\n  val meanOfRatingsAllMovies: RDD[(Double, Int)] = ratingsStats.map { (inputParameter: (Tuple3[Int, String, Int], Tuple4[Int, Double, Double, Double])) => {\n    val originalFunction = ((m: ((Int, String, Int), (Int, Double, Double, Double))) => (m._2._2, 1))(_)\n    val originalValue = originalFunction(inputParameter)\n    (-originalValue._1, originalValue._2)\n  } }\n  val sumMeanOfRatingsAllMovies: (Double, Int) = meanOfRatingsAllMovies.reduce { (m1: (Double, Int), m2: (Double, Int)) => (m1._1 + m2._1, m1._2 + m2._2) }\n  sumMeanOfRatingsAllMovies._1 / sumMeanOfRatingsAllMovies._2\n}",
              "originalCode" : "def meanOfMeansOfRatingsOfAllMovies(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))]) = {\n    val meanOfRatingsAllMovies: RDD[(Double, Int)] = ratingsStats.map((m: ((Int, String, Int), (Int, Double, Double, Double))) => (m._2._2, 1))\n    val sumMeanOfRatingsAllMovies: (Double, Int) = meanOfRatingsAllMovies.reduce((m1: (Double, Int), m2: (Double, Int)) => (m1._1 + m2._1, m1._2 + m2._2))\n    sumMeanOfRatingsAllMovies._1 / sumMeanOfRatingsAllMovies._2\n  }",
              "status" : "Killed"
            },
            {
              "id" : 121,
              "originalProgramId" : 5,
              "mutationOperator" : "MTR",
              "mutationOperatorDescription" : "Mapping Transformation Replacement",
              "mutantCode" : "def meanOfMeansOfRatingsOfAllMovies(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))]) = {\n  val meanOfRatingsAllMovies: RDD[(Double, Int)] = ratingsStats.map { (inputParameter: (Tuple3[Int, String, Int], Tuple4[Int, Double, Double, Double])) => {\n    val originalFunction = ((m: ((Int, String, Int), (Int, Double, Double, Double))) => (m._2._2, 1))(_)\n    val originalValue = originalFunction(inputParameter)\n    (originalValue._1, 0)\n  } }\n  val sumMeanOfRatingsAllMovies: (Double, Int) = meanOfRatingsAllMovies.reduce { (m1: (Double, Int), m2: (Double, Int)) => (m1._1 + m2._1, m1._2 + m2._2) }\n  sumMeanOfRatingsAllMovies._1 / sumMeanOfRatingsAllMovies._2\n}",
              "originalCode" : "def meanOfMeansOfRatingsOfAllMovies(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))]) = {\n    val meanOfRatingsAllMovies: RDD[(Double, Int)] = ratingsStats.map((m: ((Int, String, Int), (Int, Double, Double, Double))) => (m._2._2, 1))\n    val sumMeanOfRatingsAllMovies: (Double, Int) = meanOfRatingsAllMovies.reduce((m1: (Double, Int), m2: (Double, Int)) => (m1._1 + m2._1, m1._2 + m2._2))\n    sumMeanOfRatingsAllMovies._1 / sumMeanOfRatingsAllMovies._2\n  }",
              "status" : "Killed"
            },
            {
              "id" : 122,
              "originalProgramId" : 5,
              "mutationOperator" : "MTR",
              "mutationOperatorDescription" : "Mapping Transformation Replacement",
              "mutantCode" : "def meanOfMeansOfRatingsOfAllMovies(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))]) = {\n  val meanOfRatingsAllMovies: RDD[(Double, Int)] = ratingsStats.map { (inputParameter: (Tuple3[Int, String, Int], Tuple4[Int, Double, Double, Double])) => {\n    val originalFunction = ((m: ((Int, String, Int), (Int, Double, Double, Double))) => (m._2._2, 1))(_)\n    val originalValue = originalFunction(inputParameter)\n    (originalValue._1, 1)\n  } }\n  val sumMeanOfRatingsAllMovies: (Double, Int) = meanOfRatingsAllMovies.reduce { (m1: (Double, Int), m2: (Double, Int)) => (m1._1 + m2._1, m1._2 + m2._2) }\n  sumMeanOfRatingsAllMovies._1 / sumMeanOfRatingsAllMovies._2\n}",
              "originalCode" : "def meanOfMeansOfRatingsOfAllMovies(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))]) = {\n    val meanOfRatingsAllMovies: RDD[(Double, Int)] = ratingsStats.map((m: ((Int, String, Int), (Int, Double, Double, Double))) => (m._2._2, 1))\n    val sumMeanOfRatingsAllMovies: (Double, Int) = meanOfRatingsAllMovies.reduce((m1: (Double, Int), m2: (Double, Int)) => (m1._1 + m2._1, m1._2 + m2._2))\n    sumMeanOfRatingsAllMovies._1 / sumMeanOfRatingsAllMovies._2\n  }",
              "status" : "Equivalent"
            },
            {
              "id" : 123,
              "originalProgramId" : 5,
              "mutationOperator" : "MTR",
              "mutationOperatorDescription" : "Mapping Transformation Replacement",
              "mutantCode" : "def meanOfMeansOfRatingsOfAllMovies(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))]) = {\n  val meanOfRatingsAllMovies: RDD[(Double, Int)] = ratingsStats.map { (inputParameter: (Tuple3[Int, String, Int], Tuple4[Int, Double, Double, Double])) => {\n    val originalFunction = ((m: ((Int, String, Int), (Int, Double, Double, Double))) => (m._2._2, 1))(_)\n    val originalValue = originalFunction(inputParameter)\n    (originalValue._1, Int.MaxValue)\n  } }\n  val sumMeanOfRatingsAllMovies: (Double, Int) = meanOfRatingsAllMovies.reduce { (m1: (Double, Int), m2: (Double, Int)) => (m1._1 + m2._1, m1._2 + m2._2) }\n  sumMeanOfRatingsAllMovies._1 / sumMeanOfRatingsAllMovies._2\n}",
              "originalCode" : "def meanOfMeansOfRatingsOfAllMovies(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))]) = {\n    val meanOfRatingsAllMovies: RDD[(Double, Int)] = ratingsStats.map((m: ((Int, String, Int), (Int, Double, Double, Double))) => (m._2._2, 1))\n    val sumMeanOfRatingsAllMovies: (Double, Int) = meanOfRatingsAllMovies.reduce((m1: (Double, Int), m2: (Double, Int)) => (m1._1 + m2._1, m1._2 + m2._2))\n    sumMeanOfRatingsAllMovies._1 / sumMeanOfRatingsAllMovies._2\n  }",
              "status" : "Killed"
            },
            {
              "id" : 124,
              "originalProgramId" : 5,
              "mutationOperator" : "MTR",
              "mutationOperatorDescription" : "Mapping Transformation Replacement",
              "mutantCode" : "def meanOfMeansOfRatingsOfAllMovies(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))]) = {\n  val meanOfRatingsAllMovies: RDD[(Double, Int)] = ratingsStats.map { (inputParameter: (Tuple3[Int, String, Int], Tuple4[Int, Double, Double, Double])) => {\n    val originalFunction = ((m: ((Int, String, Int), (Int, Double, Double, Double))) => (m._2._2, 1))(_)\n    val originalValue = originalFunction(inputParameter)\n    (originalValue._1, Int.MinValue)\n  } }\n  val sumMeanOfRatingsAllMovies: (Double, Int) = meanOfRatingsAllMovies.reduce { (m1: (Double, Int), m2: (Double, Int)) => (m1._1 + m2._1, m1._2 + m2._2) }\n  sumMeanOfRatingsAllMovies._1 / sumMeanOfRatingsAllMovies._2\n}",
              "originalCode" : "def meanOfMeansOfRatingsOfAllMovies(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))]) = {\n    val meanOfRatingsAllMovies: RDD[(Double, Int)] = ratingsStats.map((m: ((Int, String, Int), (Int, Double, Double, Double))) => (m._2._2, 1))\n    val sumMeanOfRatingsAllMovies: (Double, Int) = meanOfRatingsAllMovies.reduce((m1: (Double, Int), m2: (Double, Int)) => (m1._1 + m2._1, m1._2 + m2._2))\n    sumMeanOfRatingsAllMovies._1 / sumMeanOfRatingsAllMovies._2\n  }",
              "status" : "Killed"
            },
            {
              "id" : 125,
              "originalProgramId" : 5,
              "mutationOperator" : "MTR",
              "mutationOperatorDescription" : "Mapping Transformation Replacement",
              "mutantCode" : "def meanOfMeansOfRatingsOfAllMovies(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))]) = {\n  val meanOfRatingsAllMovies: RDD[(Double, Int)] = ratingsStats.map { (inputParameter: (Tuple3[Int, String, Int], Tuple4[Int, Double, Double, Double])) => {\n    val originalFunction = ((m: ((Int, String, Int), (Int, Double, Double, Double))) => (m._2._2, 1))(_)\n    val originalValue = originalFunction(inputParameter)\n    (originalValue._1, -originalValue._2)\n  } }\n  val sumMeanOfRatingsAllMovies: (Double, Int) = meanOfRatingsAllMovies.reduce { (m1: (Double, Int), m2: (Double, Int)) => (m1._1 + m2._1, m1._2 + m2._2) }\n  sumMeanOfRatingsAllMovies._1 / sumMeanOfRatingsAllMovies._2\n}",
              "originalCode" : "def meanOfMeansOfRatingsOfAllMovies(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))]) = {\n    val meanOfRatingsAllMovies: RDD[(Double, Int)] = ratingsStats.map((m: ((Int, String, Int), (Int, Double, Double, Double))) => (m._2._2, 1))\n    val sumMeanOfRatingsAllMovies: (Double, Int) = meanOfRatingsAllMovies.reduce((m1: (Double, Int), m2: (Double, Int)) => (m1._1 + m2._1, m1._2 + m2._2))\n    sumMeanOfRatingsAllMovies._1 / sumMeanOfRatingsAllMovies._2\n  }",
              "status" : "Killed"
            },
            {
              "id" : 126,
              "originalProgramId" : 5,
              "mutationOperator" : "DTI",
              "mutationOperatorDescription" : "Distinct Transformation Insertion",
              "mutantCode" : "def meanOfMeansOfRatingsOfAllMovies(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))]) = {\n  val meanOfRatingsAllMovies: RDD[(Double, Int)] = ratingsStats.map { (m: ((Int, String, Int), (Int, Double, Double, Double))) => (m._2._2, 1) }.distinct()\n  val sumMeanOfRatingsAllMovies: (Double, Int) = meanOfRatingsAllMovies.reduce { (m1: (Double, Int), m2: (Double, Int)) => (m1._1 + m2._1, m1._2 + m2._2) }\n  sumMeanOfRatingsAllMovies._1 / sumMeanOfRatingsAllMovies._2\n}",
              "originalCode" : "def meanOfMeansOfRatingsOfAllMovies(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))]) = {\n    val meanOfRatingsAllMovies: RDD[(Double, Int)] = ratingsStats.map((m: ((Int, String, Int), (Int, Double, Double, Double))) => (m._2._2, 1))\n    val sumMeanOfRatingsAllMovies: (Double, Int) = meanOfRatingsAllMovies.reduce((m1: (Double, Int), m2: (Double, Int)) => (m1._1 + m2._1, m1._2 + m2._2))\n    sumMeanOfRatingsAllMovies._1 / sumMeanOfRatingsAllMovies._2\n  }",
              "status" : "Lived"
            }
          ],
          "removedMutants" : [
          ],
          "mutationOperatorsMetrics" : {
            "totalMutantsPerOperator" : {
              "FTD" : 0,
              "JTR" : 0,
              "UTR" : 0,
              "MTR" : 10,
              "UTD" : 0,
              "OTD" : 0,
              "BTR" : 0,
              "STR" : 0,
              "BTS" : 0,
              "ATR" : 0,
              "OTI" : 0,
              "DTI" : 1,
              "DTD" : 0,
              "NFTP" : 0,
              "UTS" : 0
            },
            "totalKilledMutantsPerOperator" : {
              "FTD" : 0,
              "JTR" : 0,
              "UTR" : 0,
              "MTR" : 9,
              "UTD" : 0,
              "OTD" : 0,
              "BTR" : 0,
              "STR" : 0,
              "BTS" : 0,
              "ATR" : 0,
              "OTI" : 0,
              "DTI" : 0,
              "DTD" : 0,
              "NFTP" : 0,
              "UTS" : 0
            },
            "totalLivedMutantsPerOperator" : {
              "FTD" : 0,
              "JTR" : 0,
              "UTR" : 0,
              "MTR" : 0,
              "UTD" : 0,
              "OTD" : 0,
              "BTR" : 0,
              "STR" : 0,
              "BTS" : 0,
              "ATR" : 0,
              "OTI" : 0,
              "DTI" : 1,
              "DTD" : 0,
              "NFTP" : 0,
              "UTS" : 0
            },
            "totalEquivalentMutantsPerOperator" : {
              "FTD" : 0,
              "JTR" : 0,
              "UTR" : 0,
              "MTR" : 1,
              "UTD" : 0,
              "OTD" : 0,
              "BTR" : 0,
              "STR" : 0,
              "BTS" : 0,
              "ATR" : 0,
              "OTI" : 0,
              "DTI" : 0,
              "DTD" : 0,
              "NFTP" : 0,
              "UTS" : 0
            },
            "totalErrorMutantsPerOperator" : {
              "FTD" : 0,
              "JTR" : 0,
              "UTR" : 0,
              "MTR" : 0,
              "UTD" : 0,
              "OTD" : 0,
              "BTR" : 0,
              "STR" : 0,
              "BTS" : 0,
              "ATR" : 0,
              "OTI" : 0,
              "DTI" : 0,
              "DTD" : 0,
              "NFTP" : 0,
              "UTS" : 0
            },
            "totalRemovedMutantsPerOperator" : {
              "FTD" : 0,
              "JTR" : 0,
              "UTR" : 0,
              "MTR" : 0,
              "UTD" : 0,
              "OTD" : 0,
              "BTR" : 0,
              "STR" : 0,
              "BTS" : 0,
              "ATR" : 0,
              "OTI" : 0,
              "DTI" : 0,
              "DTD" : 0,
              "NFTP" : 0,
              "UTS" : 0
            },
            "descriptionPerOperator" : {
              "FTD" : "Filter Transformation Deletion",
              "JTR" : "Join Transformation Replacement",
              "UTR" : "Unary Transformation Replacement",
              "MTR" : "Mapping Transformation Replacement",
              "UTD" : "Unary Transformation Deletion",
              "OTD" : "Order Transformation Deletion",
              "BTR" : "Binary Transformation Replacement",
              "STR" : "Set Transformation Replacement",
              "BTS" : "Binary Transformation Swap",
              "ATR" : "Aggregation Transformation Replacement",
              "OTI" : "Order Transformation Inversion",
              "DTI" : "Distinct Transformation Insertion",
              "DTD" : "Distinct Transformation Deletion",
              "NFTP" : "Negation of Filter Transformation Predicate",
              "UTS" : "Unary Transformation Swap"
            }
          },
          "totalDatasets" : 2,
          "totalTransformations" : 2,
          "totalMutants" : 11,
          "totalKilledMutants" : 9,
          "totalLivedMutants" : 1,
          "totalEquivalentMutants" : 1,
          "totalErrorMutants" : 0,
          "totalRemovedMutants" : 0,
          "mutationScore" : 0.9
        },
        {
          "id" : 6,
          "programSourceId" : 1,
          "name" : "bestMoviesDecade",
          "code" : "def bestMoviesDecade(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))], minimumVotesRequired: Double, meanOfMeansRatingsOfAllMovies: Double) = {\n    val ratingsStatisticsWithWR: RDD[((Int, String, Int), (Int, Double, Double, Double, Double))] = ratingsStats.map((s: ((Int, String, Int), (Int, Double, Double, Double))) => (s._1, (s._2._1, s._2._2, s._2._3, s._2._4, weighted_rating(s._2._2, s._2._1.toDouble, minimumVotesRequired, meanOfMeansRatingsOfAllMovies))))\n    val ratingsStatisticsWithWRDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = ratingsStatisticsWithWR.map((m: (((Int, String, Int), (Int, Double, Double, Double, Double)))) => (m._1._3 / 10 * 10, (m._1._2, m._2)))\n    val groupByDecade: RDD[(Int, Iterable[(String, (Int, Double, Double, Double, Double))])] = ratingsStatisticsWithWRDecade.groupByKey()\n    val bestMoviesDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = groupByDecade.map((j: (Int, Iterable[(String, (Int, Double, Double, Double, Double))])) => (j._1, j._2.reduce((j1, j2) => if (j1._2._5 > j2._2._5) j1 else j2)))\n    val bestMoviesDecadeSorted: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = bestMoviesDecade.sortByKey(true)\n    bestMoviesDecadeSorted\n  }",
          "datasets" : [
            {
              "id" : 27,
              "name" : "ratingsStats",
              "datasetType" : "RDD[(Tuple3[Int, String, Int], Tuple4[Int, Double, Double, Double])]",
              "inputDataset" : true,
              "outputDataset" : false
            },
            {
              "id" : 28,
              "name" : "ratingsStatisticsWithWR",
              "datasetType" : "RDD[(Tuple3[Int, String, Int], Tuple5[Int, Double, Double, Double, Double])]",
              "inputDataset" : false,
              "outputDataset" : false
            },
            {
              "id" : 29,
              "name" : "ratingsStatisticsWithWRDecade",
              "datasetType" : "RDD[(Int, (String, Tuple5[Int, Double, Double, Double, Double]))]",
              "inputDataset" : false,
              "outputDataset" : false
            },
            {
              "id" : 30,
              "name" : "groupByDecade",
              "datasetType" : "RDD[(Int, Iterable[(String, Tuple5[Int, Double, Double, Double, Double])])]",
              "inputDataset" : false,
              "outputDataset" : false
            },
            {
              "id" : 31,
              "name" : "bestMoviesDecade",
              "datasetType" : "RDD[(Int, (String, Tuple5[Int, Double, Double, Double, Double]))]",
              "inputDataset" : false,
              "outputDataset" : false
            },
            {
              "id" : 32,
              "name" : "bestMoviesDecadeSorted",
              "datasetType" : "RDD[(Int, (String, Tuple5[Int, Double, Double, Double, Double]))]",
              "inputDataset" : false,
              "outputDataset" : true
            }
          ],
          "transformations" : [
            {
              "id" : 20,
              "name" : "map",
              "inputTypes" : [
                "RDD[(Tuple3[Int, String, Int], Tuple4[Int, Double, Double, Double])]"
              ],
              "outputTypes" : [
                "RDD[(Tuple3[Int, String, Int], Tuple5[Int, Double, Double, Double, Double])]"
              ],
              "loadTransformation" : false
            },
            {
              "id" : 21,
              "name" : "map",
              "inputTypes" : [
                "RDD[(Tuple3[Int, String, Int], Tuple5[Int, Double, Double, Double, Double])]"
              ],
              "outputTypes" : [
                "RDD[(Int, (String, Tuple5[Int, Double, Double, Double, Double]))]"
              ],
              "loadTransformation" : false
            },
            {
              "id" : 22,
              "name" : "groupByKey",
              "inputTypes" : [
                "RDD[(Int, (String, Tuple5[Int, Double, Double, Double, Double]))]"
              ],
              "outputTypes" : [
                "RDD[(Int, Iterable[(String, Tuple5[Int, Double, Double, Double, Double])])]"
              ],
              "loadTransformation" : false
            },
            {
              "id" : 23,
              "name" : "map",
              "inputTypes" : [
                "RDD[(Int, Iterable[(String, Tuple5[Int, Double, Double, Double, Double])])]"
              ],
              "outputTypes" : [
                "RDD[(Int, (String, Tuple5[Int, Double, Double, Double, Double]))]"
              ],
              "loadTransformation" : false
            },
            {
              "id" : 24,
              "name" : "sortByKey",
              "inputTypes" : [
                "RDD[(Int, (String, Tuple5[Int, Double, Double, Double, Double]))]"
              ],
              "outputTypes" : [
                "RDD[(Int, (String, Tuple5[Int, Double, Double, Double, Double]))]"
              ],
              "loadTransformation" : false
            }
          ],
          "edges" : [
            {
              "id" : 39,
              "datasetId" : 27,
              "transformationId" : 20,
              "direction" : "DatasetToTransformation"
            },
            {
              "id" : 40,
              "datasetId" : 28,
              "transformationId" : 20,
              "direction" : "TransformationToDataset"
            },
            {
              "id" : 41,
              "datasetId" : 28,
              "transformationId" : 21,
              "direction" : "DatasetToTransformation"
            },
            {
              "id" : 42,
              "datasetId" : 29,
              "transformationId" : 21,
              "direction" : "TransformationToDataset"
            },
            {
              "id" : 43,
              "datasetId" : 29,
              "transformationId" : 22,
              "direction" : "DatasetToTransformation"
            },
            {
              "id" : 44,
              "datasetId" : 30,
              "transformationId" : 22,
              "direction" : "TransformationToDataset"
            },
            {
              "id" : 45,
              "datasetId" : 30,
              "transformationId" : 23,
              "direction" : "DatasetToTransformation"
            },
            {
              "id" : 46,
              "datasetId" : 31,
              "transformationId" : 23,
              "direction" : "TransformationToDataset"
            },
            {
              "id" : 47,
              "datasetId" : 31,
              "transformationId" : 24,
              "direction" : "DatasetToTransformation"
            },
            {
              "id" : 48,
              "datasetId" : 32,
              "transformationId" : 24,
              "direction" : "TransformationToDataset"
            }
          ],
          "mutants" : [
            {
              "id" : 127,
              "originalProgramId" : 6,
              "mutationOperator" : "UTD",
              "mutationOperatorDescription" : "Unary Transformation Deletion",
              "mutantCode" : "def bestMoviesDecade(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))], minimumVotesRequired: Double, meanOfMeansRatingsOfAllMovies: Double) = {\n  val ratingsStatisticsWithWR: RDD[((Int, String, Int), (Int, Double, Double, Double, Double))] = ratingsStats.map { (s: ((Int, String, Int), (Int, Double, Double, Double))) => (s._1, (s._2._1, s._2._2, s._2._3, s._2._4, weighted_rating(s._2._2, s._2._1.toDouble, minimumVotesRequired, meanOfMeansRatingsOfAllMovies))) }\n  val ratingsStatisticsWithWRDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = ratingsStatisticsWithWR.map { (m: ((Int, String, Int), (Int, Double, Double, Double, Double))) => (m._1._3 / 10 * 10, (m._1._2, m._2)) }\n  val groupByDecade: RDD[(Int, Iterable[(String, (Int, Double, Double, Double, Double))])] = ratingsStatisticsWithWRDecade.groupByKey()\n  val bestMoviesDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = groupByDecade.map { (j: (Int, Iterable[(String, (Int, Double, Double, Double, Double))])) => (j._1, j._2.reduce((j1, j2) => if (j1._2._5 > j2._2._5) j1 else j2)) }\n  val bestMoviesDecadeSorted: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = bestMoviesDecade\n  bestMoviesDecadeSorted\n}",
              "originalCode" : "def bestMoviesDecade(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))], minimumVotesRequired: Double, meanOfMeansRatingsOfAllMovies: Double) = {\n    val ratingsStatisticsWithWR: RDD[((Int, String, Int), (Int, Double, Double, Double, Double))] = ratingsStats.map((s: ((Int, String, Int), (Int, Double, Double, Double))) => (s._1, (s._2._1, s._2._2, s._2._3, s._2._4, weighted_rating(s._2._2, s._2._1.toDouble, minimumVotesRequired, meanOfMeansRatingsOfAllMovies))))\n    val ratingsStatisticsWithWRDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = ratingsStatisticsWithWR.map((m: (((Int, String, Int), (Int, Double, Double, Double, Double)))) => (m._1._3 / 10 * 10, (m._1._2, m._2)))\n    val groupByDecade: RDD[(Int, Iterable[(String, (Int, Double, Double, Double, Double))])] = ratingsStatisticsWithWRDecade.groupByKey()\n    val bestMoviesDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = groupByDecade.map((j: (Int, Iterable[(String, (Int, Double, Double, Double, Double))])) => (j._1, j._2.reduce((j1, j2) => if (j1._2._5 > j2._2._5) j1 else j2)))\n    val bestMoviesDecadeSorted: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = bestMoviesDecade.sortByKey(true)\n    bestMoviesDecadeSorted\n  }",
              "status" : "Lived"
            },
            {
              "id" : 128,
              "originalProgramId" : 6,
              "mutationOperator" : "MTR",
              "mutationOperatorDescription" : "Mapping Transformation Replacement",
              "mutantCode" : "def bestMoviesDecade(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))], minimumVotesRequired: Double, meanOfMeansRatingsOfAllMovies: Double) = {\n  val ratingsStatisticsWithWR: RDD[((Int, String, Int), (Int, Double, Double, Double, Double))] = ratingsStats.map { (s: ((Int, String, Int), (Int, Double, Double, Double))) => (s._1, (s._2._1, s._2._2, s._2._3, s._2._4, weighted_rating(s._2._2, s._2._1.toDouble, minimumVotesRequired, meanOfMeansRatingsOfAllMovies))) }\n  val ratingsStatisticsWithWRDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = ratingsStatisticsWithWR.map { (inputParameter: (Tuple3[Int, String, Int], Tuple5[Int, Double, Double, Double, Double])) => {\n    val originalFunction = ((m: ((Int, String, Int), (Int, Double, Double, Double, Double))) => (m._1._3 / 10 * 10, (m._1._2, m._2)))(_)\n    val originalValue = originalFunction(inputParameter)\n    (0, originalValue._2)\n  } }\n  val groupByDecade: RDD[(Int, Iterable[(String, (Int, Double, Double, Double, Double))])] = ratingsStatisticsWithWRDecade.groupByKey()\n  val bestMoviesDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = groupByDecade.map { (j: (Int, Iterable[(String, (Int, Double, Double, Double, Double))])) => (j._1, j._2.reduce((j1, j2) => if (j1._2._5 > j2._2._5) j1 else j2)) }\n  val bestMoviesDecadeSorted: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = bestMoviesDecade.sortByKey(true)\n  bestMoviesDecadeSorted\n}",
              "originalCode" : "def bestMoviesDecade(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))], minimumVotesRequired: Double, meanOfMeansRatingsOfAllMovies: Double) = {\n    val ratingsStatisticsWithWR: RDD[((Int, String, Int), (Int, Double, Double, Double, Double))] = ratingsStats.map((s: ((Int, String, Int), (Int, Double, Double, Double))) => (s._1, (s._2._1, s._2._2, s._2._3, s._2._4, weighted_rating(s._2._2, s._2._1.toDouble, minimumVotesRequired, meanOfMeansRatingsOfAllMovies))))\n    val ratingsStatisticsWithWRDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = ratingsStatisticsWithWR.map((m: (((Int, String, Int), (Int, Double, Double, Double, Double)))) => (m._1._3 / 10 * 10, (m._1._2, m._2)))\n    val groupByDecade: RDD[(Int, Iterable[(String, (Int, Double, Double, Double, Double))])] = ratingsStatisticsWithWRDecade.groupByKey()\n    val bestMoviesDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = groupByDecade.map((j: (Int, Iterable[(String, (Int, Double, Double, Double, Double))])) => (j._1, j._2.reduce((j1, j2) => if (j1._2._5 > j2._2._5) j1 else j2)))\n    val bestMoviesDecadeSorted: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = bestMoviesDecade.sortByKey(true)\n    bestMoviesDecadeSorted\n  }",
              "status" : "Killed"
            },
            {
              "id" : 129,
              "originalProgramId" : 6,
              "mutationOperator" : "MTR",
              "mutationOperatorDescription" : "Mapping Transformation Replacement",
              "mutantCode" : "def bestMoviesDecade(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))], minimumVotesRequired: Double, meanOfMeansRatingsOfAllMovies: Double) = {\n  val ratingsStatisticsWithWR: RDD[((Int, String, Int), (Int, Double, Double, Double, Double))] = ratingsStats.map { (s: ((Int, String, Int), (Int, Double, Double, Double))) => (s._1, (s._2._1, s._2._2, s._2._3, s._2._4, weighted_rating(s._2._2, s._2._1.toDouble, minimumVotesRequired, meanOfMeansRatingsOfAllMovies))) }\n  val ratingsStatisticsWithWRDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = ratingsStatisticsWithWR.map { (inputParameter: (Tuple3[Int, String, Int], Tuple5[Int, Double, Double, Double, Double])) => {\n    val originalFunction = ((m: ((Int, String, Int), (Int, Double, Double, Double, Double))) => (m._1._3 / 10 * 10, (m._1._2, m._2)))(_)\n    val originalValue = originalFunction(inputParameter)\n    (1, originalValue._2)\n  } }\n  val groupByDecade: RDD[(Int, Iterable[(String, (Int, Double, Double, Double, Double))])] = ratingsStatisticsWithWRDecade.groupByKey()\n  val bestMoviesDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = groupByDecade.map { (j: (Int, Iterable[(String, (Int, Double, Double, Double, Double))])) => (j._1, j._2.reduce((j1, j2) => if (j1._2._5 > j2._2._5) j1 else j2)) }\n  val bestMoviesDecadeSorted: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = bestMoviesDecade.sortByKey(true)\n  bestMoviesDecadeSorted\n}",
              "originalCode" : "def bestMoviesDecade(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))], minimumVotesRequired: Double, meanOfMeansRatingsOfAllMovies: Double) = {\n    val ratingsStatisticsWithWR: RDD[((Int, String, Int), (Int, Double, Double, Double, Double))] = ratingsStats.map((s: ((Int, String, Int), (Int, Double, Double, Double))) => (s._1, (s._2._1, s._2._2, s._2._3, s._2._4, weighted_rating(s._2._2, s._2._1.toDouble, minimumVotesRequired, meanOfMeansRatingsOfAllMovies))))\n    val ratingsStatisticsWithWRDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = ratingsStatisticsWithWR.map((m: (((Int, String, Int), (Int, Double, Double, Double, Double)))) => (m._1._3 / 10 * 10, (m._1._2, m._2)))\n    val groupByDecade: RDD[(Int, Iterable[(String, (Int, Double, Double, Double, Double))])] = ratingsStatisticsWithWRDecade.groupByKey()\n    val bestMoviesDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = groupByDecade.map((j: (Int, Iterable[(String, (Int, Double, Double, Double, Double))])) => (j._1, j._2.reduce((j1, j2) => if (j1._2._5 > j2._2._5) j1 else j2)))\n    val bestMoviesDecadeSorted: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = bestMoviesDecade.sortByKey(true)\n    bestMoviesDecadeSorted\n  }",
              "status" : "Killed"
            },
            {
              "id" : 130,
              "originalProgramId" : 6,
              "mutationOperator" : "MTR",
              "mutationOperatorDescription" : "Mapping Transformation Replacement",
              "mutantCode" : "def bestMoviesDecade(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))], minimumVotesRequired: Double, meanOfMeansRatingsOfAllMovies: Double) = {\n  val ratingsStatisticsWithWR: RDD[((Int, String, Int), (Int, Double, Double, Double, Double))] = ratingsStats.map { (s: ((Int, String, Int), (Int, Double, Double, Double))) => (s._1, (s._2._1, s._2._2, s._2._3, s._2._4, weighted_rating(s._2._2, s._2._1.toDouble, minimumVotesRequired, meanOfMeansRatingsOfAllMovies))) }\n  val ratingsStatisticsWithWRDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = ratingsStatisticsWithWR.map { (inputParameter: (Tuple3[Int, String, Int], Tuple5[Int, Double, Double, Double, Double])) => {\n    val originalFunction = ((m: ((Int, String, Int), (Int, Double, Double, Double, Double))) => (m._1._3 / 10 * 10, (m._1._2, m._2)))(_)\n    val originalValue = originalFunction(inputParameter)\n    (Int.MaxValue, originalValue._2)\n  } }\n  val groupByDecade: RDD[(Int, Iterable[(String, (Int, Double, Double, Double, Double))])] = ratingsStatisticsWithWRDecade.groupByKey()\n  val bestMoviesDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = groupByDecade.map { (j: (Int, Iterable[(String, (Int, Double, Double, Double, Double))])) => (j._1, j._2.reduce((j1, j2) => if (j1._2._5 > j2._2._5) j1 else j2)) }\n  val bestMoviesDecadeSorted: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = bestMoviesDecade.sortByKey(true)\n  bestMoviesDecadeSorted\n}",
              "originalCode" : "def bestMoviesDecade(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))], minimumVotesRequired: Double, meanOfMeansRatingsOfAllMovies: Double) = {\n    val ratingsStatisticsWithWR: RDD[((Int, String, Int), (Int, Double, Double, Double, Double))] = ratingsStats.map((s: ((Int, String, Int), (Int, Double, Double, Double))) => (s._1, (s._2._1, s._2._2, s._2._3, s._2._4, weighted_rating(s._2._2, s._2._1.toDouble, minimumVotesRequired, meanOfMeansRatingsOfAllMovies))))\n    val ratingsStatisticsWithWRDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = ratingsStatisticsWithWR.map((m: (((Int, String, Int), (Int, Double, Double, Double, Double)))) => (m._1._3 / 10 * 10, (m._1._2, m._2)))\n    val groupByDecade: RDD[(Int, Iterable[(String, (Int, Double, Double, Double, Double))])] = ratingsStatisticsWithWRDecade.groupByKey()\n    val bestMoviesDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = groupByDecade.map((j: (Int, Iterable[(String, (Int, Double, Double, Double, Double))])) => (j._1, j._2.reduce((j1, j2) => if (j1._2._5 > j2._2._5) j1 else j2)))\n    val bestMoviesDecadeSorted: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = bestMoviesDecade.sortByKey(true)\n    bestMoviesDecadeSorted\n  }",
              "status" : "Killed"
            },
            {
              "id" : 131,
              "originalProgramId" : 6,
              "mutationOperator" : "MTR",
              "mutationOperatorDescription" : "Mapping Transformation Replacement",
              "mutantCode" : "def bestMoviesDecade(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))], minimumVotesRequired: Double, meanOfMeansRatingsOfAllMovies: Double) = {\n  val ratingsStatisticsWithWR: RDD[((Int, String, Int), (Int, Double, Double, Double, Double))] = ratingsStats.map { (s: ((Int, String, Int), (Int, Double, Double, Double))) => (s._1, (s._2._1, s._2._2, s._2._3, s._2._4, weighted_rating(s._2._2, s._2._1.toDouble, minimumVotesRequired, meanOfMeansRatingsOfAllMovies))) }\n  val ratingsStatisticsWithWRDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = ratingsStatisticsWithWR.map { (inputParameter: (Tuple3[Int, String, Int], Tuple5[Int, Double, Double, Double, Double])) => {\n    val originalFunction = ((m: ((Int, String, Int), (Int, Double, Double, Double, Double))) => (m._1._3 / 10 * 10, (m._1._2, m._2)))(_)\n    val originalValue = originalFunction(inputParameter)\n    (Int.MinValue, originalValue._2)\n  } }\n  val groupByDecade: RDD[(Int, Iterable[(String, (Int, Double, Double, Double, Double))])] = ratingsStatisticsWithWRDecade.groupByKey()\n  val bestMoviesDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = groupByDecade.map { (j: (Int, Iterable[(String, (Int, Double, Double, Double, Double))])) => (j._1, j._2.reduce((j1, j2) => if (j1._2._5 > j2._2._5) j1 else j2)) }\n  val bestMoviesDecadeSorted: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = bestMoviesDecade.sortByKey(true)\n  bestMoviesDecadeSorted\n}",
              "originalCode" : "def bestMoviesDecade(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))], minimumVotesRequired: Double, meanOfMeansRatingsOfAllMovies: Double) = {\n    val ratingsStatisticsWithWR: RDD[((Int, String, Int), (Int, Double, Double, Double, Double))] = ratingsStats.map((s: ((Int, String, Int), (Int, Double, Double, Double))) => (s._1, (s._2._1, s._2._2, s._2._3, s._2._4, weighted_rating(s._2._2, s._2._1.toDouble, minimumVotesRequired, meanOfMeansRatingsOfAllMovies))))\n    val ratingsStatisticsWithWRDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = ratingsStatisticsWithWR.map((m: (((Int, String, Int), (Int, Double, Double, Double, Double)))) => (m._1._3 / 10 * 10, (m._1._2, m._2)))\n    val groupByDecade: RDD[(Int, Iterable[(String, (Int, Double, Double, Double, Double))])] = ratingsStatisticsWithWRDecade.groupByKey()\n    val bestMoviesDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = groupByDecade.map((j: (Int, Iterable[(String, (Int, Double, Double, Double, Double))])) => (j._1, j._2.reduce((j1, j2) => if (j1._2._5 > j2._2._5) j1 else j2)))\n    val bestMoviesDecadeSorted: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = bestMoviesDecade.sortByKey(true)\n    bestMoviesDecadeSorted\n  }",
              "status" : "Killed"
            },
            {
              "id" : 132,
              "originalProgramId" : 6,
              "mutationOperator" : "MTR",
              "mutationOperatorDescription" : "Mapping Transformation Replacement",
              "mutantCode" : "def bestMoviesDecade(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))], minimumVotesRequired: Double, meanOfMeansRatingsOfAllMovies: Double) = {\n  val ratingsStatisticsWithWR: RDD[((Int, String, Int), (Int, Double, Double, Double, Double))] = ratingsStats.map { (s: ((Int, String, Int), (Int, Double, Double, Double))) => (s._1, (s._2._1, s._2._2, s._2._3, s._2._4, weighted_rating(s._2._2, s._2._1.toDouble, minimumVotesRequired, meanOfMeansRatingsOfAllMovies))) }\n  val ratingsStatisticsWithWRDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = ratingsStatisticsWithWR.map { (inputParameter: (Tuple3[Int, String, Int], Tuple5[Int, Double, Double, Double, Double])) => {\n    val originalFunction = ((m: ((Int, String, Int), (Int, Double, Double, Double, Double))) => (m._1._3 / 10 * 10, (m._1._2, m._2)))(_)\n    val originalValue = originalFunction(inputParameter)\n    (-originalValue._1, originalValue._2)\n  } }\n  val groupByDecade: RDD[(Int, Iterable[(String, (Int, Double, Double, Double, Double))])] = ratingsStatisticsWithWRDecade.groupByKey()\n  val bestMoviesDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = groupByDecade.map { (j: (Int, Iterable[(String, (Int, Double, Double, Double, Double))])) => (j._1, j._2.reduce((j1, j2) => if (j1._2._5 > j2._2._5) j1 else j2)) }\n  val bestMoviesDecadeSorted: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = bestMoviesDecade.sortByKey(true)\n  bestMoviesDecadeSorted\n}",
              "originalCode" : "def bestMoviesDecade(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))], minimumVotesRequired: Double, meanOfMeansRatingsOfAllMovies: Double) = {\n    val ratingsStatisticsWithWR: RDD[((Int, String, Int), (Int, Double, Double, Double, Double))] = ratingsStats.map((s: ((Int, String, Int), (Int, Double, Double, Double))) => (s._1, (s._2._1, s._2._2, s._2._3, s._2._4, weighted_rating(s._2._2, s._2._1.toDouble, minimumVotesRequired, meanOfMeansRatingsOfAllMovies))))\n    val ratingsStatisticsWithWRDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = ratingsStatisticsWithWR.map((m: (((Int, String, Int), (Int, Double, Double, Double, Double)))) => (m._1._3 / 10 * 10, (m._1._2, m._2)))\n    val groupByDecade: RDD[(Int, Iterable[(String, (Int, Double, Double, Double, Double))])] = ratingsStatisticsWithWRDecade.groupByKey()\n    val bestMoviesDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = groupByDecade.map((j: (Int, Iterable[(String, (Int, Double, Double, Double, Double))])) => (j._1, j._2.reduce((j1, j2) => if (j1._2._5 > j2._2._5) j1 else j2)))\n    val bestMoviesDecadeSorted: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = bestMoviesDecade.sortByKey(true)\n    bestMoviesDecadeSorted\n  }",
              "status" : "Killed"
            },
            {
              "id" : 133,
              "originalProgramId" : 6,
              "mutationOperator" : "MTR",
              "mutationOperatorDescription" : "Mapping Transformation Replacement",
              "mutantCode" : "def bestMoviesDecade(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))], minimumVotesRequired: Double, meanOfMeansRatingsOfAllMovies: Double) = {\n  val ratingsStatisticsWithWR: RDD[((Int, String, Int), (Int, Double, Double, Double, Double))] = ratingsStats.map { (s: ((Int, String, Int), (Int, Double, Double, Double))) => (s._1, (s._2._1, s._2._2, s._2._3, s._2._4, weighted_rating(s._2._2, s._2._1.toDouble, minimumVotesRequired, meanOfMeansRatingsOfAllMovies))) }\n  val ratingsStatisticsWithWRDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = ratingsStatisticsWithWR.map { (inputParameter: (Tuple3[Int, String, Int], Tuple5[Int, Double, Double, Double, Double])) => {\n    val originalFunction = ((m: ((Int, String, Int), (Int, Double, Double, Double, Double))) => (m._1._3 / 10 * 10, (m._1._2, m._2)))(_)\n    val originalValue = originalFunction(inputParameter)\n    (originalValue._1, (\"\", originalValue._2._2))\n  } }\n  val groupByDecade: RDD[(Int, Iterable[(String, (Int, Double, Double, Double, Double))])] = ratingsStatisticsWithWRDecade.groupByKey()\n  val bestMoviesDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = groupByDecade.map { (j: (Int, Iterable[(String, (Int, Double, Double, Double, Double))])) => (j._1, j._2.reduce((j1, j2) => if (j1._2._5 > j2._2._5) j1 else j2)) }\n  val bestMoviesDecadeSorted: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = bestMoviesDecade.sortByKey(true)\n  bestMoviesDecadeSorted\n}",
              "originalCode" : "def bestMoviesDecade(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))], minimumVotesRequired: Double, meanOfMeansRatingsOfAllMovies: Double) = {\n    val ratingsStatisticsWithWR: RDD[((Int, String, Int), (Int, Double, Double, Double, Double))] = ratingsStats.map((s: ((Int, String, Int), (Int, Double, Double, Double))) => (s._1, (s._2._1, s._2._2, s._2._3, s._2._4, weighted_rating(s._2._2, s._2._1.toDouble, minimumVotesRequired, meanOfMeansRatingsOfAllMovies))))\n    val ratingsStatisticsWithWRDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = ratingsStatisticsWithWR.map((m: (((Int, String, Int), (Int, Double, Double, Double, Double)))) => (m._1._3 / 10 * 10, (m._1._2, m._2)))\n    val groupByDecade: RDD[(Int, Iterable[(String, (Int, Double, Double, Double, Double))])] = ratingsStatisticsWithWRDecade.groupByKey()\n    val bestMoviesDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = groupByDecade.map((j: (Int, Iterable[(String, (Int, Double, Double, Double, Double))])) => (j._1, j._2.reduce((j1, j2) => if (j1._2._5 > j2._2._5) j1 else j2)))\n    val bestMoviesDecadeSorted: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = bestMoviesDecade.sortByKey(true)\n    bestMoviesDecadeSorted\n  }",
              "status" : "Killed"
            },
            {
              "id" : 134,
              "originalProgramId" : 6,
              "mutationOperator" : "MTR",
              "mutationOperatorDescription" : "Mapping Transformation Replacement",
              "mutantCode" : "def bestMoviesDecade(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))], minimumVotesRequired: Double, meanOfMeansRatingsOfAllMovies: Double) = {\n  val ratingsStatisticsWithWR: RDD[((Int, String, Int), (Int, Double, Double, Double, Double))] = ratingsStats.map { (s: ((Int, String, Int), (Int, Double, Double, Double))) => (s._1, (s._2._1, s._2._2, s._2._3, s._2._4, weighted_rating(s._2._2, s._2._1.toDouble, minimumVotesRequired, meanOfMeansRatingsOfAllMovies))) }\n  val ratingsStatisticsWithWRDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = ratingsStatisticsWithWR.map { (m: ((Int, String, Int), (Int, Double, Double, Double, Double))) => (m._1._3 / 10 * 10, (m._1._2, m._2)) }\n  val groupByDecade: RDD[(Int, Iterable[(String, (Int, Double, Double, Double, Double))])] = ratingsStatisticsWithWRDecade.groupByKey()\n  val bestMoviesDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = groupByDecade.map { (inputParameter: (Int, Iterable[(String, Tuple5[Int, Double, Double, Double, Double])])) => {\n    val originalFunction = ((j: (Int, Iterable[(String, (Int, Double, Double, Double, Double))])) => (j._1, j._2.reduce((j1, j2) => if (j1._2._5 > j2._2._5) j1 else j2)))(_)\n    val originalValue = originalFunction(inputParameter)\n    (0, originalValue._2)\n  } }\n  val bestMoviesDecadeSorted: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = bestMoviesDecade.sortByKey(true)\n  bestMoviesDecadeSorted\n}",
              "originalCode" : "def bestMoviesDecade(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))], minimumVotesRequired: Double, meanOfMeansRatingsOfAllMovies: Double) = {\n    val ratingsStatisticsWithWR: RDD[((Int, String, Int), (Int, Double, Double, Double, Double))] = ratingsStats.map((s: ((Int, String, Int), (Int, Double, Double, Double))) => (s._1, (s._2._1, s._2._2, s._2._3, s._2._4, weighted_rating(s._2._2, s._2._1.toDouble, minimumVotesRequired, meanOfMeansRatingsOfAllMovies))))\n    val ratingsStatisticsWithWRDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = ratingsStatisticsWithWR.map((m: (((Int, String, Int), (Int, Double, Double, Double, Double)))) => (m._1._3 / 10 * 10, (m._1._2, m._2)))\n    val groupByDecade: RDD[(Int, Iterable[(String, (Int, Double, Double, Double, Double))])] = ratingsStatisticsWithWRDecade.groupByKey()\n    val bestMoviesDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = groupByDecade.map((j: (Int, Iterable[(String, (Int, Double, Double, Double, Double))])) => (j._1, j._2.reduce((j1, j2) => if (j1._2._5 > j2._2._5) j1 else j2)))\n    val bestMoviesDecadeSorted: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = bestMoviesDecade.sortByKey(true)\n    bestMoviesDecadeSorted\n  }",
              "status" : "Killed"
            },
            {
              "id" : 135,
              "originalProgramId" : 6,
              "mutationOperator" : "MTR",
              "mutationOperatorDescription" : "Mapping Transformation Replacement",
              "mutantCode" : "def bestMoviesDecade(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))], minimumVotesRequired: Double, meanOfMeansRatingsOfAllMovies: Double) = {\n  val ratingsStatisticsWithWR: RDD[((Int, String, Int), (Int, Double, Double, Double, Double))] = ratingsStats.map { (s: ((Int, String, Int), (Int, Double, Double, Double))) => (s._1, (s._2._1, s._2._2, s._2._3, s._2._4, weighted_rating(s._2._2, s._2._1.toDouble, minimumVotesRequired, meanOfMeansRatingsOfAllMovies))) }\n  val ratingsStatisticsWithWRDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = ratingsStatisticsWithWR.map { (m: ((Int, String, Int), (Int, Double, Double, Double, Double))) => (m._1._3 / 10 * 10, (m._1._2, m._2)) }\n  val groupByDecade: RDD[(Int, Iterable[(String, (Int, Double, Double, Double, Double))])] = ratingsStatisticsWithWRDecade.groupByKey()\n  val bestMoviesDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = groupByDecade.map { (inputParameter: (Int, Iterable[(String, Tuple5[Int, Double, Double, Double, Double])])) => {\n    val originalFunction = ((j: (Int, Iterable[(String, (Int, Double, Double, Double, Double))])) => (j._1, j._2.reduce((j1, j2) => if (j1._2._5 > j2._2._5) j1 else j2)))(_)\n    val originalValue = originalFunction(inputParameter)\n    (1, originalValue._2)\n  } }\n  val bestMoviesDecadeSorted: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = bestMoviesDecade.sortByKey(true)\n  bestMoviesDecadeSorted\n}",
              "originalCode" : "def bestMoviesDecade(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))], minimumVotesRequired: Double, meanOfMeansRatingsOfAllMovies: Double) = {\n    val ratingsStatisticsWithWR: RDD[((Int, String, Int), (Int, Double, Double, Double, Double))] = ratingsStats.map((s: ((Int, String, Int), (Int, Double, Double, Double))) => (s._1, (s._2._1, s._2._2, s._2._3, s._2._4, weighted_rating(s._2._2, s._2._1.toDouble, minimumVotesRequired, meanOfMeansRatingsOfAllMovies))))\n    val ratingsStatisticsWithWRDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = ratingsStatisticsWithWR.map((m: (((Int, String, Int), (Int, Double, Double, Double, Double)))) => (m._1._3 / 10 * 10, (m._1._2, m._2)))\n    val groupByDecade: RDD[(Int, Iterable[(String, (Int, Double, Double, Double, Double))])] = ratingsStatisticsWithWRDecade.groupByKey()\n    val bestMoviesDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = groupByDecade.map((j: (Int, Iterable[(String, (Int, Double, Double, Double, Double))])) => (j._1, j._2.reduce((j1, j2) => if (j1._2._5 > j2._2._5) j1 else j2)))\n    val bestMoviesDecadeSorted: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = bestMoviesDecade.sortByKey(true)\n    bestMoviesDecadeSorted\n  }",
              "status" : "Killed"
            },
            {
              "id" : 136,
              "originalProgramId" : 6,
              "mutationOperator" : "MTR",
              "mutationOperatorDescription" : "Mapping Transformation Replacement",
              "mutantCode" : "def bestMoviesDecade(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))], minimumVotesRequired: Double, meanOfMeansRatingsOfAllMovies: Double) = {\n  val ratingsStatisticsWithWR: RDD[((Int, String, Int), (Int, Double, Double, Double, Double))] = ratingsStats.map { (s: ((Int, String, Int), (Int, Double, Double, Double))) => (s._1, (s._2._1, s._2._2, s._2._3, s._2._4, weighted_rating(s._2._2, s._2._1.toDouble, minimumVotesRequired, meanOfMeansRatingsOfAllMovies))) }\n  val ratingsStatisticsWithWRDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = ratingsStatisticsWithWR.map { (m: ((Int, String, Int), (Int, Double, Double, Double, Double))) => (m._1._3 / 10 * 10, (m._1._2, m._2)) }\n  val groupByDecade: RDD[(Int, Iterable[(String, (Int, Double, Double, Double, Double))])] = ratingsStatisticsWithWRDecade.groupByKey()\n  val bestMoviesDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = groupByDecade.map { (inputParameter: (Int, Iterable[(String, Tuple5[Int, Double, Double, Double, Double])])) => {\n    val originalFunction = ((j: (Int, Iterable[(String, (Int, Double, Double, Double, Double))])) => (j._1, j._2.reduce((j1, j2) => if (j1._2._5 > j2._2._5) j1 else j2)))(_)\n    val originalValue = originalFunction(inputParameter)\n    (Int.MaxValue, originalValue._2)\n  } }\n  val bestMoviesDecadeSorted: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = bestMoviesDecade.sortByKey(true)\n  bestMoviesDecadeSorted\n}",
              "originalCode" : "def bestMoviesDecade(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))], minimumVotesRequired: Double, meanOfMeansRatingsOfAllMovies: Double) = {\n    val ratingsStatisticsWithWR: RDD[((Int, String, Int), (Int, Double, Double, Double, Double))] = ratingsStats.map((s: ((Int, String, Int), (Int, Double, Double, Double))) => (s._1, (s._2._1, s._2._2, s._2._3, s._2._4, weighted_rating(s._2._2, s._2._1.toDouble, minimumVotesRequired, meanOfMeansRatingsOfAllMovies))))\n    val ratingsStatisticsWithWRDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = ratingsStatisticsWithWR.map((m: (((Int, String, Int), (Int, Double, Double, Double, Double)))) => (m._1._3 / 10 * 10, (m._1._2, m._2)))\n    val groupByDecade: RDD[(Int, Iterable[(String, (Int, Double, Double, Double, Double))])] = ratingsStatisticsWithWRDecade.groupByKey()\n    val bestMoviesDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = groupByDecade.map((j: (Int, Iterable[(String, (Int, Double, Double, Double, Double))])) => (j._1, j._2.reduce((j1, j2) => if (j1._2._5 > j2._2._5) j1 else j2)))\n    val bestMoviesDecadeSorted: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = bestMoviesDecade.sortByKey(true)\n    bestMoviesDecadeSorted\n  }",
              "status" : "Killed"
            },
            {
              "id" : 137,
              "originalProgramId" : 6,
              "mutationOperator" : "MTR",
              "mutationOperatorDescription" : "Mapping Transformation Replacement",
              "mutantCode" : "def bestMoviesDecade(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))], minimumVotesRequired: Double, meanOfMeansRatingsOfAllMovies: Double) = {\n  val ratingsStatisticsWithWR: RDD[((Int, String, Int), (Int, Double, Double, Double, Double))] = ratingsStats.map { (s: ((Int, String, Int), (Int, Double, Double, Double))) => (s._1, (s._2._1, s._2._2, s._2._3, s._2._4, weighted_rating(s._2._2, s._2._1.toDouble, minimumVotesRequired, meanOfMeansRatingsOfAllMovies))) }\n  val ratingsStatisticsWithWRDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = ratingsStatisticsWithWR.map { (m: ((Int, String, Int), (Int, Double, Double, Double, Double))) => (m._1._3 / 10 * 10, (m._1._2, m._2)) }\n  val groupByDecade: RDD[(Int, Iterable[(String, (Int, Double, Double, Double, Double))])] = ratingsStatisticsWithWRDecade.groupByKey()\n  val bestMoviesDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = groupByDecade.map { (inputParameter: (Int, Iterable[(String, Tuple5[Int, Double, Double, Double, Double])])) => {\n    val originalFunction = ((j: (Int, Iterable[(String, (Int, Double, Double, Double, Double))])) => (j._1, j._2.reduce((j1, j2) => if (j1._2._5 > j2._2._5) j1 else j2)))(_)\n    val originalValue = originalFunction(inputParameter)\n    (Int.MinValue, originalValue._2)\n  } }\n  val bestMoviesDecadeSorted: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = bestMoviesDecade.sortByKey(true)\n  bestMoviesDecadeSorted\n}",
              "originalCode" : "def bestMoviesDecade(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))], minimumVotesRequired: Double, meanOfMeansRatingsOfAllMovies: Double) = {\n    val ratingsStatisticsWithWR: RDD[((Int, String, Int), (Int, Double, Double, Double, Double))] = ratingsStats.map((s: ((Int, String, Int), (Int, Double, Double, Double))) => (s._1, (s._2._1, s._2._2, s._2._3, s._2._4, weighted_rating(s._2._2, s._2._1.toDouble, minimumVotesRequired, meanOfMeansRatingsOfAllMovies))))\n    val ratingsStatisticsWithWRDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = ratingsStatisticsWithWR.map((m: (((Int, String, Int), (Int, Double, Double, Double, Double)))) => (m._1._3 / 10 * 10, (m._1._2, m._2)))\n    val groupByDecade: RDD[(Int, Iterable[(String, (Int, Double, Double, Double, Double))])] = ratingsStatisticsWithWRDecade.groupByKey()\n    val bestMoviesDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = groupByDecade.map((j: (Int, Iterable[(String, (Int, Double, Double, Double, Double))])) => (j._1, j._2.reduce((j1, j2) => if (j1._2._5 > j2._2._5) j1 else j2)))\n    val bestMoviesDecadeSorted: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = bestMoviesDecade.sortByKey(true)\n    bestMoviesDecadeSorted\n  }",
              "status" : "Killed"
            },
            {
              "id" : 138,
              "originalProgramId" : 6,
              "mutationOperator" : "MTR",
              "mutationOperatorDescription" : "Mapping Transformation Replacement",
              "mutantCode" : "def bestMoviesDecade(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))], minimumVotesRequired: Double, meanOfMeansRatingsOfAllMovies: Double) = {\n  val ratingsStatisticsWithWR: RDD[((Int, String, Int), (Int, Double, Double, Double, Double))] = ratingsStats.map { (s: ((Int, String, Int), (Int, Double, Double, Double))) => (s._1, (s._2._1, s._2._2, s._2._3, s._2._4, weighted_rating(s._2._2, s._2._1.toDouble, minimumVotesRequired, meanOfMeansRatingsOfAllMovies))) }\n  val ratingsStatisticsWithWRDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = ratingsStatisticsWithWR.map { (m: ((Int, String, Int), (Int, Double, Double, Double, Double))) => (m._1._3 / 10 * 10, (m._1._2, m._2)) }\n  val groupByDecade: RDD[(Int, Iterable[(String, (Int, Double, Double, Double, Double))])] = ratingsStatisticsWithWRDecade.groupByKey()\n  val bestMoviesDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = groupByDecade.map { (inputParameter: (Int, Iterable[(String, Tuple5[Int, Double, Double, Double, Double])])) => {\n    val originalFunction = ((j: (Int, Iterable[(String, (Int, Double, Double, Double, Double))])) => (j._1, j._2.reduce((j1, j2) => if (j1._2._5 > j2._2._5) j1 else j2)))(_)\n    val originalValue = originalFunction(inputParameter)\n    (-originalValue._1, originalValue._2)\n  } }\n  val bestMoviesDecadeSorted: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = bestMoviesDecade.sortByKey(true)\n  bestMoviesDecadeSorted\n}",
              "originalCode" : "def bestMoviesDecade(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))], minimumVotesRequired: Double, meanOfMeansRatingsOfAllMovies: Double) = {\n    val ratingsStatisticsWithWR: RDD[((Int, String, Int), (Int, Double, Double, Double, Double))] = ratingsStats.map((s: ((Int, String, Int), (Int, Double, Double, Double))) => (s._1, (s._2._1, s._2._2, s._2._3, s._2._4, weighted_rating(s._2._2, s._2._1.toDouble, minimumVotesRequired, meanOfMeansRatingsOfAllMovies))))\n    val ratingsStatisticsWithWRDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = ratingsStatisticsWithWR.map((m: (((Int, String, Int), (Int, Double, Double, Double, Double)))) => (m._1._3 / 10 * 10, (m._1._2, m._2)))\n    val groupByDecade: RDD[(Int, Iterable[(String, (Int, Double, Double, Double, Double))])] = ratingsStatisticsWithWRDecade.groupByKey()\n    val bestMoviesDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = groupByDecade.map((j: (Int, Iterable[(String, (Int, Double, Double, Double, Double))])) => (j._1, j._2.reduce((j1, j2) => if (j1._2._5 > j2._2._5) j1 else j2)))\n    val bestMoviesDecadeSorted: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = bestMoviesDecade.sortByKey(true)\n    bestMoviesDecadeSorted\n  }",
              "status" : "Killed"
            },
            {
              "id" : 139,
              "originalProgramId" : 6,
              "mutationOperator" : "MTR",
              "mutationOperatorDescription" : "Mapping Transformation Replacement",
              "mutantCode" : "def bestMoviesDecade(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))], minimumVotesRequired: Double, meanOfMeansRatingsOfAllMovies: Double) = {\n  val ratingsStatisticsWithWR: RDD[((Int, String, Int), (Int, Double, Double, Double, Double))] = ratingsStats.map { (s: ((Int, String, Int), (Int, Double, Double, Double))) => (s._1, (s._2._1, s._2._2, s._2._3, s._2._4, weighted_rating(s._2._2, s._2._1.toDouble, minimumVotesRequired, meanOfMeansRatingsOfAllMovies))) }\n  val ratingsStatisticsWithWRDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = ratingsStatisticsWithWR.map { (m: ((Int, String, Int), (Int, Double, Double, Double, Double))) => (m._1._3 / 10 * 10, (m._1._2, m._2)) }\n  val groupByDecade: RDD[(Int, Iterable[(String, (Int, Double, Double, Double, Double))])] = ratingsStatisticsWithWRDecade.groupByKey()\n  val bestMoviesDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = groupByDecade.map { (inputParameter: (Int, Iterable[(String, Tuple5[Int, Double, Double, Double, Double])])) => {\n    val originalFunction = ((j: (Int, Iterable[(String, (Int, Double, Double, Double, Double))])) => (j._1, j._2.reduce((j1, j2) => if (j1._2._5 > j2._2._5) j1 else j2)))(_)\n    val originalValue = originalFunction(inputParameter)\n    (originalValue._1, (\"\", originalValue._2._2))\n  } }\n  val bestMoviesDecadeSorted: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = bestMoviesDecade.sortByKey(true)\n  bestMoviesDecadeSorted\n}",
              "originalCode" : "def bestMoviesDecade(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))], minimumVotesRequired: Double, meanOfMeansRatingsOfAllMovies: Double) = {\n    val ratingsStatisticsWithWR: RDD[((Int, String, Int), (Int, Double, Double, Double, Double))] = ratingsStats.map((s: ((Int, String, Int), (Int, Double, Double, Double))) => (s._1, (s._2._1, s._2._2, s._2._3, s._2._4, weighted_rating(s._2._2, s._2._1.toDouble, minimumVotesRequired, meanOfMeansRatingsOfAllMovies))))\n    val ratingsStatisticsWithWRDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = ratingsStatisticsWithWR.map((m: (((Int, String, Int), (Int, Double, Double, Double, Double)))) => (m._1._3 / 10 * 10, (m._1._2, m._2)))\n    val groupByDecade: RDD[(Int, Iterable[(String, (Int, Double, Double, Double, Double))])] = ratingsStatisticsWithWRDecade.groupByKey()\n    val bestMoviesDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = groupByDecade.map((j: (Int, Iterable[(String, (Int, Double, Double, Double, Double))])) => (j._1, j._2.reduce((j1, j2) => if (j1._2._5 > j2._2._5) j1 else j2)))\n    val bestMoviesDecadeSorted: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = bestMoviesDecade.sortByKey(true)\n    bestMoviesDecadeSorted\n  }",
              "status" : "Killed"
            },
            {
              "id" : 140,
              "originalProgramId" : 6,
              "mutationOperator" : "DTI",
              "mutationOperatorDescription" : "Distinct Transformation Insertion",
              "mutantCode" : "def bestMoviesDecade(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))], minimumVotesRequired: Double, meanOfMeansRatingsOfAllMovies: Double) = {\n  val ratingsStatisticsWithWR: RDD[((Int, String, Int), (Int, Double, Double, Double, Double))] = ratingsStats.map { (s: ((Int, String, Int), (Int, Double, Double, Double))) => (s._1, (s._2._1, s._2._2, s._2._3, s._2._4, weighted_rating(s._2._2, s._2._1.toDouble, minimumVotesRequired, meanOfMeansRatingsOfAllMovies))) }.distinct()\n  val ratingsStatisticsWithWRDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = ratingsStatisticsWithWR.map { (m: ((Int, String, Int), (Int, Double, Double, Double, Double))) => (m._1._3 / 10 * 10, (m._1._2, m._2)) }\n  val groupByDecade: RDD[(Int, Iterable[(String, (Int, Double, Double, Double, Double))])] = ratingsStatisticsWithWRDecade.groupByKey()\n  val bestMoviesDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = groupByDecade.map { (j: (Int, Iterable[(String, (Int, Double, Double, Double, Double))])) => (j._1, j._2.reduce((j1, j2) => if (j1._2._5 > j2._2._5) j1 else j2)) }\n  val bestMoviesDecadeSorted: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = bestMoviesDecade.sortByKey(true)\n  bestMoviesDecadeSorted\n}",
              "originalCode" : "def bestMoviesDecade(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))], minimumVotesRequired: Double, meanOfMeansRatingsOfAllMovies: Double) = {\n    val ratingsStatisticsWithWR: RDD[((Int, String, Int), (Int, Double, Double, Double, Double))] = ratingsStats.map((s: ((Int, String, Int), (Int, Double, Double, Double))) => (s._1, (s._2._1, s._2._2, s._2._3, s._2._4, weighted_rating(s._2._2, s._2._1.toDouble, minimumVotesRequired, meanOfMeansRatingsOfAllMovies))))\n    val ratingsStatisticsWithWRDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = ratingsStatisticsWithWR.map((m: (((Int, String, Int), (Int, Double, Double, Double, Double)))) => (m._1._3 / 10 * 10, (m._1._2, m._2)))\n    val groupByDecade: RDD[(Int, Iterable[(String, (Int, Double, Double, Double, Double))])] = ratingsStatisticsWithWRDecade.groupByKey()\n    val bestMoviesDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = groupByDecade.map((j: (Int, Iterable[(String, (Int, Double, Double, Double, Double))])) => (j._1, j._2.reduce((j1, j2) => if (j1._2._5 > j2._2._5) j1 else j2)))\n    val bestMoviesDecadeSorted: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = bestMoviesDecade.sortByKey(true)\n    bestMoviesDecadeSorted\n  }",
              "status" : "Equivalent"
            },
            {
              "id" : 141,
              "originalProgramId" : 6,
              "mutationOperator" : "DTI",
              "mutationOperatorDescription" : "Distinct Transformation Insertion",
              "mutantCode" : "def bestMoviesDecade(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))], minimumVotesRequired: Double, meanOfMeansRatingsOfAllMovies: Double) = {\n  val ratingsStatisticsWithWR: RDD[((Int, String, Int), (Int, Double, Double, Double, Double))] = ratingsStats.map { (s: ((Int, String, Int), (Int, Double, Double, Double))) => (s._1, (s._2._1, s._2._2, s._2._3, s._2._4, weighted_rating(s._2._2, s._2._1.toDouble, minimumVotesRequired, meanOfMeansRatingsOfAllMovies))) }\n  val ratingsStatisticsWithWRDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = ratingsStatisticsWithWR.map { (m: ((Int, String, Int), (Int, Double, Double, Double, Double))) => (m._1._3 / 10 * 10, (m._1._2, m._2)) }.distinct()\n  val groupByDecade: RDD[(Int, Iterable[(String, (Int, Double, Double, Double, Double))])] = ratingsStatisticsWithWRDecade.groupByKey()\n  val bestMoviesDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = groupByDecade.map { (j: (Int, Iterable[(String, (Int, Double, Double, Double, Double))])) => (j._1, j._2.reduce((j1, j2) => if (j1._2._5 > j2._2._5) j1 else j2)) }\n  val bestMoviesDecadeSorted: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = bestMoviesDecade.sortByKey(true)\n  bestMoviesDecadeSorted\n}",
              "originalCode" : "def bestMoviesDecade(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))], minimumVotesRequired: Double, meanOfMeansRatingsOfAllMovies: Double) = {\n    val ratingsStatisticsWithWR: RDD[((Int, String, Int), (Int, Double, Double, Double, Double))] = ratingsStats.map((s: ((Int, String, Int), (Int, Double, Double, Double))) => (s._1, (s._2._1, s._2._2, s._2._3, s._2._4, weighted_rating(s._2._2, s._2._1.toDouble, minimumVotesRequired, meanOfMeansRatingsOfAllMovies))))\n    val ratingsStatisticsWithWRDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = ratingsStatisticsWithWR.map((m: (((Int, String, Int), (Int, Double, Double, Double, Double)))) => (m._1._3 / 10 * 10, (m._1._2, m._2)))\n    val groupByDecade: RDD[(Int, Iterable[(String, (Int, Double, Double, Double, Double))])] = ratingsStatisticsWithWRDecade.groupByKey()\n    val bestMoviesDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = groupByDecade.map((j: (Int, Iterable[(String, (Int, Double, Double, Double, Double))])) => (j._1, j._2.reduce((j1, j2) => if (j1._2._5 > j2._2._5) j1 else j2)))\n    val bestMoviesDecadeSorted: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = bestMoviesDecade.sortByKey(true)\n    bestMoviesDecadeSorted\n  }",
              "status" : "Equivalent"
            },
            {
              "id" : 142,
              "originalProgramId" : 6,
              "mutationOperator" : "DTI",
              "mutationOperatorDescription" : "Distinct Transformation Insertion",
              "mutantCode" : "def bestMoviesDecade(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))], minimumVotesRequired: Double, meanOfMeansRatingsOfAllMovies: Double) = {\n  val ratingsStatisticsWithWR: RDD[((Int, String, Int), (Int, Double, Double, Double, Double))] = ratingsStats.map { (s: ((Int, String, Int), (Int, Double, Double, Double))) => (s._1, (s._2._1, s._2._2, s._2._3, s._2._4, weighted_rating(s._2._2, s._2._1.toDouble, minimumVotesRequired, meanOfMeansRatingsOfAllMovies))) }\n  val ratingsStatisticsWithWRDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = ratingsStatisticsWithWR.map { (m: ((Int, String, Int), (Int, Double, Double, Double, Double))) => (m._1._3 / 10 * 10, (m._1._2, m._2)) }\n  val groupByDecade: RDD[(Int, Iterable[(String, (Int, Double, Double, Double, Double))])] = ratingsStatisticsWithWRDecade.groupByKey().distinct()\n  val bestMoviesDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = groupByDecade.map { (j: (Int, Iterable[(String, (Int, Double, Double, Double, Double))])) => (j._1, j._2.reduce((j1, j2) => if (j1._2._5 > j2._2._5) j1 else j2)) }\n  val bestMoviesDecadeSorted: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = bestMoviesDecade.sortByKey(true)\n  bestMoviesDecadeSorted\n}",
              "originalCode" : "def bestMoviesDecade(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))], minimumVotesRequired: Double, meanOfMeansRatingsOfAllMovies: Double) = {\n    val ratingsStatisticsWithWR: RDD[((Int, String, Int), (Int, Double, Double, Double, Double))] = ratingsStats.map((s: ((Int, String, Int), (Int, Double, Double, Double))) => (s._1, (s._2._1, s._2._2, s._2._3, s._2._4, weighted_rating(s._2._2, s._2._1.toDouble, minimumVotesRequired, meanOfMeansRatingsOfAllMovies))))\n    val ratingsStatisticsWithWRDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = ratingsStatisticsWithWR.map((m: (((Int, String, Int), (Int, Double, Double, Double, Double)))) => (m._1._3 / 10 * 10, (m._1._2, m._2)))\n    val groupByDecade: RDD[(Int, Iterable[(String, (Int, Double, Double, Double, Double))])] = ratingsStatisticsWithWRDecade.groupByKey()\n    val bestMoviesDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = groupByDecade.map((j: (Int, Iterable[(String, (Int, Double, Double, Double, Double))])) => (j._1, j._2.reduce((j1, j2) => if (j1._2._5 > j2._2._5) j1 else j2)))\n    val bestMoviesDecadeSorted: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = bestMoviesDecade.sortByKey(true)\n    bestMoviesDecadeSorted\n  }",
              "status" : "Equivalent"
            },
            {
              "id" : 143,
              "originalProgramId" : 6,
              "mutationOperator" : "DTI",
              "mutationOperatorDescription" : "Distinct Transformation Insertion",
              "mutantCode" : "def bestMoviesDecade(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))], minimumVotesRequired: Double, meanOfMeansRatingsOfAllMovies: Double) = {\n  val ratingsStatisticsWithWR: RDD[((Int, String, Int), (Int, Double, Double, Double, Double))] = ratingsStats.map { (s: ((Int, String, Int), (Int, Double, Double, Double))) => (s._1, (s._2._1, s._2._2, s._2._3, s._2._4, weighted_rating(s._2._2, s._2._1.toDouble, minimumVotesRequired, meanOfMeansRatingsOfAllMovies))) }\n  val ratingsStatisticsWithWRDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = ratingsStatisticsWithWR.map { (m: ((Int, String, Int), (Int, Double, Double, Double, Double))) => (m._1._3 / 10 * 10, (m._1._2, m._2)) }\n  val groupByDecade: RDD[(Int, Iterable[(String, (Int, Double, Double, Double, Double))])] = ratingsStatisticsWithWRDecade.groupByKey()\n  val bestMoviesDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = groupByDecade.map { (j: (Int, Iterable[(String, (Int, Double, Double, Double, Double))])) => (j._1, j._2.reduce((j1, j2) => if (j1._2._5 > j2._2._5) j1 else j2)) }.distinct()\n  val bestMoviesDecadeSorted: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = bestMoviesDecade.sortByKey(true)\n  bestMoviesDecadeSorted\n}",
              "originalCode" : "def bestMoviesDecade(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))], minimumVotesRequired: Double, meanOfMeansRatingsOfAllMovies: Double) = {\n    val ratingsStatisticsWithWR: RDD[((Int, String, Int), (Int, Double, Double, Double, Double))] = ratingsStats.map((s: ((Int, String, Int), (Int, Double, Double, Double))) => (s._1, (s._2._1, s._2._2, s._2._3, s._2._4, weighted_rating(s._2._2, s._2._1.toDouble, minimumVotesRequired, meanOfMeansRatingsOfAllMovies))))\n    val ratingsStatisticsWithWRDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = ratingsStatisticsWithWR.map((m: (((Int, String, Int), (Int, Double, Double, Double, Double)))) => (m._1._3 / 10 * 10, (m._1._2, m._2)))\n    val groupByDecade: RDD[(Int, Iterable[(String, (Int, Double, Double, Double, Double))])] = ratingsStatisticsWithWRDecade.groupByKey()\n    val bestMoviesDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = groupByDecade.map((j: (Int, Iterable[(String, (Int, Double, Double, Double, Double))])) => (j._1, j._2.reduce((j1, j2) => if (j1._2._5 > j2._2._5) j1 else j2)))\n    val bestMoviesDecadeSorted: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = bestMoviesDecade.sortByKey(true)\n    bestMoviesDecadeSorted\n  }",
              "status" : "Equivalent"
            },
            {
              "id" : 144,
              "originalProgramId" : 6,
              "mutationOperator" : "DTI",
              "mutationOperatorDescription" : "Distinct Transformation Insertion",
              "mutantCode" : "def bestMoviesDecade(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))], minimumVotesRequired: Double, meanOfMeansRatingsOfAllMovies: Double) = {\n  val ratingsStatisticsWithWR: RDD[((Int, String, Int), (Int, Double, Double, Double, Double))] = ratingsStats.map { (s: ((Int, String, Int), (Int, Double, Double, Double))) => (s._1, (s._2._1, s._2._2, s._2._3, s._2._4, weighted_rating(s._2._2, s._2._1.toDouble, minimumVotesRequired, meanOfMeansRatingsOfAllMovies))) }\n  val ratingsStatisticsWithWRDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = ratingsStatisticsWithWR.map { (m: ((Int, String, Int), (Int, Double, Double, Double, Double))) => (m._1._3 / 10 * 10, (m._1._2, m._2)) }\n  val groupByDecade: RDD[(Int, Iterable[(String, (Int, Double, Double, Double, Double))])] = ratingsStatisticsWithWRDecade.groupByKey()\n  val bestMoviesDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = groupByDecade.map { (j: (Int, Iterable[(String, (Int, Double, Double, Double, Double))])) => (j._1, j._2.reduce((j1, j2) => if (j1._2._5 > j2._2._5) j1 else j2)) }\n  val bestMoviesDecadeSorted: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = bestMoviesDecade.sortByKey(true).distinct()\n  bestMoviesDecadeSorted\n}",
              "originalCode" : "def bestMoviesDecade(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))], minimumVotesRequired: Double, meanOfMeansRatingsOfAllMovies: Double) = {\n    val ratingsStatisticsWithWR: RDD[((Int, String, Int), (Int, Double, Double, Double, Double))] = ratingsStats.map((s: ((Int, String, Int), (Int, Double, Double, Double))) => (s._1, (s._2._1, s._2._2, s._2._3, s._2._4, weighted_rating(s._2._2, s._2._1.toDouble, minimumVotesRequired, meanOfMeansRatingsOfAllMovies))))\n    val ratingsStatisticsWithWRDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = ratingsStatisticsWithWR.map((m: (((Int, String, Int), (Int, Double, Double, Double, Double)))) => (m._1._3 / 10 * 10, (m._1._2, m._2)))\n    val groupByDecade: RDD[(Int, Iterable[(String, (Int, Double, Double, Double, Double))])] = ratingsStatisticsWithWRDecade.groupByKey()\n    val bestMoviesDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = groupByDecade.map((j: (Int, Iterable[(String, (Int, Double, Double, Double, Double))])) => (j._1, j._2.reduce((j1, j2) => if (j1._2._5 > j2._2._5) j1 else j2)))\n    val bestMoviesDecadeSorted: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = bestMoviesDecade.sortByKey(true)\n    bestMoviesDecadeSorted\n  }",
              "status" : "Lived"
            },
            {
              "id" : 145,
              "originalProgramId" : 6,
              "mutationOperator" : "OTD",
              "mutationOperatorDescription" : "Order Transformation Deletion",
              "mutantCode" : "def bestMoviesDecade(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))], minimumVotesRequired: Double, meanOfMeansRatingsOfAllMovies: Double) = {\n  val ratingsStatisticsWithWR: RDD[((Int, String, Int), (Int, Double, Double, Double, Double))] = ratingsStats.map { (s: ((Int, String, Int), (Int, Double, Double, Double))) => (s._1, (s._2._1, s._2._2, s._2._3, s._2._4, weighted_rating(s._2._2, s._2._1.toDouble, minimumVotesRequired, meanOfMeansRatingsOfAllMovies))) }\n  val ratingsStatisticsWithWRDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = ratingsStatisticsWithWR.map { (m: ((Int, String, Int), (Int, Double, Double, Double, Double))) => (m._1._3 / 10 * 10, (m._1._2, m._2)) }\n  val groupByDecade: RDD[(Int, Iterable[(String, (Int, Double, Double, Double, Double))])] = ratingsStatisticsWithWRDecade.groupByKey()\n  val bestMoviesDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = groupByDecade.map { (j: (Int, Iterable[(String, (Int, Double, Double, Double, Double))])) => (j._1, j._2.reduce((j1, j2) => if (j1._2._5 > j2._2._5) j1 else j2)) }\n  val bestMoviesDecadeSorted: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = bestMoviesDecade\n  bestMoviesDecadeSorted\n}",
              "originalCode" : "def bestMoviesDecade(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))], minimumVotesRequired: Double, meanOfMeansRatingsOfAllMovies: Double) = {\n    val ratingsStatisticsWithWR: RDD[((Int, String, Int), (Int, Double, Double, Double, Double))] = ratingsStats.map((s: ((Int, String, Int), (Int, Double, Double, Double))) => (s._1, (s._2._1, s._2._2, s._2._3, s._2._4, weighted_rating(s._2._2, s._2._1.toDouble, minimumVotesRequired, meanOfMeansRatingsOfAllMovies))))\n    val ratingsStatisticsWithWRDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = ratingsStatisticsWithWR.map((m: (((Int, String, Int), (Int, Double, Double, Double, Double)))) => (m._1._3 / 10 * 10, (m._1._2, m._2)))\n    val groupByDecade: RDD[(Int, Iterable[(String, (Int, Double, Double, Double, Double))])] = ratingsStatisticsWithWRDecade.groupByKey()\n    val bestMoviesDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = groupByDecade.map((j: (Int, Iterable[(String, (Int, Double, Double, Double, Double))])) => (j._1, j._2.reduce((j1, j2) => if (j1._2._5 > j2._2._5) j1 else j2)))\n    val bestMoviesDecadeSorted: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = bestMoviesDecade.sortByKey(true)\n    bestMoviesDecadeSorted\n  }",
              "status" : "Lived"
            },
            {
              "id" : 146,
              "originalProgramId" : 6,
              "mutationOperator" : "OTI",
              "mutationOperatorDescription" : "Order Transformation Inversion",
              "mutantCode" : "def bestMoviesDecade(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))], minimumVotesRequired: Double, meanOfMeansRatingsOfAllMovies: Double) = {\n  val ratingsStatisticsWithWR: RDD[((Int, String, Int), (Int, Double, Double, Double, Double))] = ratingsStats.map { (s: ((Int, String, Int), (Int, Double, Double, Double))) => (s._1, (s._2._1, s._2._2, s._2._3, s._2._4, weighted_rating(s._2._2, s._2._1.toDouble, minimumVotesRequired, meanOfMeansRatingsOfAllMovies))) }\n  val ratingsStatisticsWithWRDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = ratingsStatisticsWithWR.map { (m: ((Int, String, Int), (Int, Double, Double, Double, Double))) => (m._1._3 / 10 * 10, (m._1._2, m._2)) }\n  val groupByDecade: RDD[(Int, Iterable[(String, (Int, Double, Double, Double, Double))])] = ratingsStatisticsWithWRDecade.groupByKey()\n  val bestMoviesDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = groupByDecade.map { (j: (Int, Iterable[(String, (Int, Double, Double, Double, Double))])) => (j._1, j._2.reduce((j1, j2) => if (j1._2._5 > j2._2._5) j1 else j2)) }\n  val bestMoviesDecadeSorted: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = bestMoviesDecade.sortByKey(false)\n  bestMoviesDecadeSorted\n}",
              "originalCode" : "def bestMoviesDecade(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))], minimumVotesRequired: Double, meanOfMeansRatingsOfAllMovies: Double) = {\n    val ratingsStatisticsWithWR: RDD[((Int, String, Int), (Int, Double, Double, Double, Double))] = ratingsStats.map((s: ((Int, String, Int), (Int, Double, Double, Double))) => (s._1, (s._2._1, s._2._2, s._2._3, s._2._4, weighted_rating(s._2._2, s._2._1.toDouble, minimumVotesRequired, meanOfMeansRatingsOfAllMovies))))\n    val ratingsStatisticsWithWRDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = ratingsStatisticsWithWR.map((m: (((Int, String, Int), (Int, Double, Double, Double, Double)))) => (m._1._3 / 10 * 10, (m._1._2, m._2)))\n    val groupByDecade: RDD[(Int, Iterable[(String, (Int, Double, Double, Double, Double))])] = ratingsStatisticsWithWRDecade.groupByKey()\n    val bestMoviesDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = groupByDecade.map((j: (Int, Iterable[(String, (Int, Double, Double, Double, Double))])) => (j._1, j._2.reduce((j1, j2) => if (j1._2._5 > j2._2._5) j1 else j2)))\n    val bestMoviesDecadeSorted: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = bestMoviesDecade.sortByKey(true)\n    bestMoviesDecadeSorted\n  }",
              "status" : "Lived"
            }
          ],
          "removedMutants" : [
          ],
          "mutationOperatorsMetrics" : {
            "totalMutantsPerOperator" : {
              "FTD" : 0,
              "JTR" : 0,
              "UTR" : 0,
              "MTR" : 12,
              "UTD" : 1,
              "OTD" : 1,
              "BTR" : 0,
              "STR" : 0,
              "BTS" : 0,
              "ATR" : 0,
              "OTI" : 1,
              "DTI" : 5,
              "DTD" : 0,
              "NFTP" : 0,
              "UTS" : 0
            },
            "totalKilledMutantsPerOperator" : {
              "FTD" : 0,
              "JTR" : 0,
              "UTR" : 0,
              "MTR" : 12,
              "UTD" : 0,
              "OTD" : 0,
              "BTR" : 0,
              "STR" : 0,
              "BTS" : 0,
              "ATR" : 0,
              "OTI" : 0,
              "DTI" : 0,
              "DTD" : 0,
              "NFTP" : 0,
              "UTS" : 0
            },
            "totalLivedMutantsPerOperator" : {
              "FTD" : 0,
              "JTR" : 0,
              "UTR" : 0,
              "MTR" : 0,
              "UTD" : 1,
              "OTD" : 1,
              "BTR" : 0,
              "STR" : 0,
              "BTS" : 0,
              "ATR" : 0,
              "OTI" : 1,
              "DTI" : 1,
              "DTD" : 0,
              "NFTP" : 0,
              "UTS" : 0
            },
            "totalEquivalentMutantsPerOperator" : {
              "FTD" : 0,
              "JTR" : 0,
              "UTR" : 0,
              "MTR" : 0,
              "UTD" : 0,
              "OTD" : 0,
              "BTR" : 0,
              "STR" : 0,
              "BTS" : 0,
              "ATR" : 0,
              "OTI" : 0,
              "DTI" : 4,
              "DTD" : 0,
              "NFTP" : 0,
              "UTS" : 0
            },
            "totalErrorMutantsPerOperator" : {
              "FTD" : 0,
              "JTR" : 0,
              "UTR" : 0,
              "MTR" : 0,
              "UTD" : 0,
              "OTD" : 0,
              "BTR" : 0,
              "STR" : 0,
              "BTS" : 0,
              "ATR" : 0,
              "OTI" : 0,
              "DTI" : 0,
              "DTD" : 0,
              "NFTP" : 0,
              "UTS" : 0
            },
            "totalRemovedMutantsPerOperator" : {
              "FTD" : 0,
              "JTR" : 0,
              "UTR" : 0,
              "MTR" : 0,
              "UTD" : 0,
              "OTD" : 0,
              "BTR" : 0,
              "STR" : 0,
              "BTS" : 0,
              "ATR" : 0,
              "OTI" : 0,
              "DTI" : 0,
              "DTD" : 0,
              "NFTP" : 0,
              "UTS" : 0
            },
            "descriptionPerOperator" : {
              "FTD" : "Filter Transformation Deletion",
              "JTR" : "Join Transformation Replacement",
              "UTR" : "Unary Transformation Replacement",
              "MTR" : "Mapping Transformation Replacement",
              "UTD" : "Unary Transformation Deletion",
              "OTD" : "Order Transformation Deletion",
              "BTR" : "Binary Transformation Replacement",
              "STR" : "Set Transformation Replacement",
              "BTS" : "Binary Transformation Swap",
              "ATR" : "Aggregation Transformation Replacement",
              "OTI" : "Order Transformation Inversion",
              "DTI" : "Distinct Transformation Insertion",
              "DTD" : "Distinct Transformation Deletion",
              "NFTP" : "Negation of Filter Transformation Predicate",
              "UTS" : "Unary Transformation Swap"
            }
          },
          "totalDatasets" : 6,
          "totalTransformations" : 5,
          "totalMutants" : 20,
          "totalKilledMutants" : 12,
          "totalLivedMutants" : 4,
          "totalEquivalentMutants" : 4,
          "totalErrorMutants" : 0,
          "totalRemovedMutants" : 0,
          "mutationScore" : 0.75
        },
        {
          "id" : 7,
          "programSourceId" : 1,
          "name" : "genresTagsCount",
          "code" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val tagsMovieIdKey: RDD[(Int, String)] = tags.map((t: Tag) => (t.movieId, t.tag))\n    val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n    val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap((mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)))\n    val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey((w: Int, z: Int) => w + z)\n    val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n    genresTagsCountSorted\n  }",
          "datasets" : [
            {
              "id" : 33,
              "name" : "movies",
              "datasetType" : "RDD[Movie]",
              "inputDataset" : true,
              "outputDataset" : false
            },
            {
              "id" : 34,
              "name" : "tags",
              "datasetType" : "RDD[Tag]",
              "inputDataset" : true,
              "outputDataset" : false
            },
            {
              "id" : 35,
              "name" : "moviesIdKey",
              "datasetType" : "RDD[(Int, Movie)]",
              "inputDataset" : false,
              "outputDataset" : false
            },
            {
              "id" : 36,
              "name" : "tagsMovieIdKey",
              "datasetType" : "RDD[(Int, String)]",
              "inputDataset" : false,
              "outputDataset" : false
            },
            {
              "id" : 37,
              "name" : "joinMoviesTags",
              "datasetType" : "RDD[(Int, (Movie, String))]",
              "inputDataset" : false,
              "outputDataset" : false
            },
            {
              "id" : 38,
              "name" : "genresTags",
              "datasetType" : "RDD[((String, String), Int)]",
              "inputDataset" : false,
              "outputDataset" : false
            },
            {
              "id" : 39,
              "name" : "genresTagsCounts",
              "datasetType" : "RDD[((String, String), Int)]",
              "inputDataset" : false,
              "outputDataset" : false
            },
            {
              "id" : 40,
              "name" : "genresTagsCountMapped",
              "datasetType" : "RDD[(String, (String, Int))]",
              "inputDataset" : false,
              "outputDataset" : false
            },
            {
              "id" : 41,
              "name" : "genresTagsCountSorted",
              "datasetType" : "RDD[(String, (String, Int))]",
              "inputDataset" : false,
              "outputDataset" : true
            }
          ],
          "transformations" : [
            {
              "id" : 25,
              "name" : "map",
              "inputTypes" : [
                "RDD[Movie]"
              ],
              "outputTypes" : [
                "RDD[(Int, Movie)]"
              ],
              "loadTransformation" : false
            },
            {
              "id" : 26,
              "name" : "map",
              "inputTypes" : [
                "RDD[Tag]"
              ],
              "outputTypes" : [
                "RDD[(Int, String)]"
              ],
              "loadTransformation" : false
            },
            {
              "id" : 27,
              "name" : "join",
              "inputTypes" : [
                "RDD[(Int, Movie)]",
                "RDD[(Int, String)]"
              ],
              "outputTypes" : [
                "RDD[(Int, (Movie, String))]"
              ],
              "loadTransformation" : false
            },
            {
              "id" : 28,
              "name" : "flatMap",
              "inputTypes" : [
                "RDD[(Int, (Movie, String))]"
              ],
              "outputTypes" : [
                "RDD[((String, String), Int)]"
              ],
              "loadTransformation" : false
            },
            {
              "id" : 29,
              "name" : "reduceByKey",
              "inputTypes" : [
                "RDD[((String, String), Int)]"
              ],
              "outputTypes" : [
                "RDD[((String, String), Int)]"
              ],
              "loadTransformation" : false
            },
            {
              "id" : 30,
              "name" : "map",
              "inputTypes" : [
                "RDD[((String, String), Int)]"
              ],
              "outputTypes" : [
                "RDD[(String, (String, Int))]"
              ],
              "loadTransformation" : false
            },
            {
              "id" : 31,
              "name" : "sortByKey",
              "inputTypes" : [
                "RDD[(String, (String, Int))]"
              ],
              "outputTypes" : [
                "RDD[(String, (String, Int))]"
              ],
              "loadTransformation" : false
            }
          ],
          "edges" : [
            {
              "id" : 49,
              "datasetId" : 33,
              "transformationId" : 25,
              "direction" : "DatasetToTransformation"
            },
            {
              "id" : 50,
              "datasetId" : 35,
              "transformationId" : 25,
              "direction" : "TransformationToDataset"
            },
            {
              "id" : 51,
              "datasetId" : 34,
              "transformationId" : 26,
              "direction" : "DatasetToTransformation"
            },
            {
              "id" : 52,
              "datasetId" : 36,
              "transformationId" : 26,
              "direction" : "TransformationToDataset"
            },
            {
              "id" : 53,
              "datasetId" : 35,
              "transformationId" : 27,
              "direction" : "DatasetToTransformation"
            },
            {
              "id" : 54,
              "datasetId" : 36,
              "transformationId" : 27,
              "direction" : "DatasetToTransformation"
            },
            {
              "id" : 55,
              "datasetId" : 37,
              "transformationId" : 27,
              "direction" : "TransformationToDataset"
            },
            {
              "id" : 56,
              "datasetId" : 37,
              "transformationId" : 28,
              "direction" : "DatasetToTransformation"
            },
            {
              "id" : 57,
              "datasetId" : 38,
              "transformationId" : 28,
              "direction" : "TransformationToDataset"
            },
            {
              "id" : 58,
              "datasetId" : 38,
              "transformationId" : 29,
              "direction" : "DatasetToTransformation"
            },
            {
              "id" : 59,
              "datasetId" : 39,
              "transformationId" : 29,
              "direction" : "TransformationToDataset"
            },
            {
              "id" : 60,
              "datasetId" : 39,
              "transformationId" : 30,
              "direction" : "DatasetToTransformation"
            },
            {
              "id" : 61,
              "datasetId" : 40,
              "transformationId" : 30,
              "direction" : "TransformationToDataset"
            },
            {
              "id" : 62,
              "datasetId" : 40,
              "transformationId" : 31,
              "direction" : "DatasetToTransformation"
            },
            {
              "id" : 63,
              "datasetId" : 41,
              "transformationId" : 31,
              "direction" : "TransformationToDataset"
            }
          ],
          "mutants" : [
            {
              "id" : 147,
              "originalProgramId" : 7,
              "mutationOperator" : "UTD",
              "mutationOperatorDescription" : "Unary Transformation Deletion",
              "mutantCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val tagsMovieIdKey: RDD[(Int, String)] = tags.map { (t: Tag) => (t.movieId, t.tag) }\n  val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n  val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap { (mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)) }\n  val genresTagsCounts: RDD[((String, String), Int)] = genresTags\n  val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map { (g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n  genresTagsCountSorted\n}",
              "originalCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val tagsMovieIdKey: RDD[(Int, String)] = tags.map((t: Tag) => (t.movieId, t.tag))\n    val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n    val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap((mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)))\n    val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey((w: Int, z: Int) => w + z)\n    val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n    genresTagsCountSorted\n  }",
              "status" : "Killed"
            },
            {
              "id" : 148,
              "originalProgramId" : 7,
              "mutationOperator" : "UTD",
              "mutationOperatorDescription" : "Unary Transformation Deletion",
              "mutantCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val tagsMovieIdKey: RDD[(Int, String)] = tags.map { (t: Tag) => (t.movieId, t.tag) }\n  val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n  val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap { (mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)) }\n  val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey { (w: Int, z: Int) => w + z }\n  val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map { (g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped\n  genresTagsCountSorted\n}",
              "originalCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val tagsMovieIdKey: RDD[(Int, String)] = tags.map((t: Tag) => (t.movieId, t.tag))\n    val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n    val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap((mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)))\n    val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey((w: Int, z: Int) => w + z)\n    val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n    genresTagsCountSorted\n  }",
              "status" : "Killed"
            },
            {
              "id" : 149,
              "originalProgramId" : 7,
              "mutationOperator" : "MTR",
              "mutationOperatorDescription" : "Mapping Transformation Replacement",
              "mutantCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (inputParameter: Movie) => {\n    val originalFunction = ((m: Movie) => (m.movieId, m))(_)\n    val originalValue = originalFunction(inputParameter)\n    (0, originalValue._2)\n  } }\n  val tagsMovieIdKey: RDD[(Int, String)] = tags.map { (t: Tag) => (t.movieId, t.tag) }\n  val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n  val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap { (mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)) }\n  val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey { (w: Int, z: Int) => w + z }\n  val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map { (g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n  genresTagsCountSorted\n}",
              "originalCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val tagsMovieIdKey: RDD[(Int, String)] = tags.map((t: Tag) => (t.movieId, t.tag))\n    val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n    val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap((mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)))\n    val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey((w: Int, z: Int) => w + z)\n    val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n    genresTagsCountSorted\n  }",
              "status" : "Killed"
            },
            {
              "id" : 150,
              "originalProgramId" : 7,
              "mutationOperator" : "MTR",
              "mutationOperatorDescription" : "Mapping Transformation Replacement",
              "mutantCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (inputParameter: Movie) => {\n    val originalFunction = ((m: Movie) => (m.movieId, m))(_)\n    val originalValue = originalFunction(inputParameter)\n    (1, originalValue._2)\n  } }\n  val tagsMovieIdKey: RDD[(Int, String)] = tags.map { (t: Tag) => (t.movieId, t.tag) }\n  val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n  val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap { (mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)) }\n  val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey { (w: Int, z: Int) => w + z }\n  val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map { (g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n  genresTagsCountSorted\n}",
              "originalCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val tagsMovieIdKey: RDD[(Int, String)] = tags.map((t: Tag) => (t.movieId, t.tag))\n    val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n    val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap((mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)))\n    val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey((w: Int, z: Int) => w + z)\n    val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n    genresTagsCountSorted\n  }",
              "status" : "Killed"
            },
            {
              "id" : 151,
              "originalProgramId" : 7,
              "mutationOperator" : "MTR",
              "mutationOperatorDescription" : "Mapping Transformation Replacement",
              "mutantCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (inputParameter: Movie) => {\n    val originalFunction = ((m: Movie) => (m.movieId, m))(_)\n    val originalValue = originalFunction(inputParameter)\n    (Int.MaxValue, originalValue._2)\n  } }\n  val tagsMovieIdKey: RDD[(Int, String)] = tags.map { (t: Tag) => (t.movieId, t.tag) }\n  val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n  val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap { (mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)) }\n  val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey { (w: Int, z: Int) => w + z }\n  val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map { (g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n  genresTagsCountSorted\n}",
              "originalCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val tagsMovieIdKey: RDD[(Int, String)] = tags.map((t: Tag) => (t.movieId, t.tag))\n    val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n    val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap((mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)))\n    val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey((w: Int, z: Int) => w + z)\n    val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n    genresTagsCountSorted\n  }",
              "status" : "Killed"
            },
            {
              "id" : 152,
              "originalProgramId" : 7,
              "mutationOperator" : "MTR",
              "mutationOperatorDescription" : "Mapping Transformation Replacement",
              "mutantCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (inputParameter: Movie) => {\n    val originalFunction = ((m: Movie) => (m.movieId, m))(_)\n    val originalValue = originalFunction(inputParameter)\n    (Int.MinValue, originalValue._2)\n  } }\n  val tagsMovieIdKey: RDD[(Int, String)] = tags.map { (t: Tag) => (t.movieId, t.tag) }\n  val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n  val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap { (mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)) }\n  val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey { (w: Int, z: Int) => w + z }\n  val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map { (g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n  genresTagsCountSorted\n}",
              "originalCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val tagsMovieIdKey: RDD[(Int, String)] = tags.map((t: Tag) => (t.movieId, t.tag))\n    val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n    val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap((mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)))\n    val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey((w: Int, z: Int) => w + z)\n    val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n    genresTagsCountSorted\n  }",
              "status" : "Killed"
            },
            {
              "id" : 153,
              "originalProgramId" : 7,
              "mutationOperator" : "MTR",
              "mutationOperatorDescription" : "Mapping Transformation Replacement",
              "mutantCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (inputParameter: Movie) => {\n    val originalFunction = ((m: Movie) => (m.movieId, m))(_)\n    val originalValue = originalFunction(inputParameter)\n    (-originalValue._1, originalValue._2)\n  } }\n  val tagsMovieIdKey: RDD[(Int, String)] = tags.map { (t: Tag) => (t.movieId, t.tag) }\n  val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n  val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap { (mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)) }\n  val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey { (w: Int, z: Int) => w + z }\n  val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map { (g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n  genresTagsCountSorted\n}",
              "originalCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val tagsMovieIdKey: RDD[(Int, String)] = tags.map((t: Tag) => (t.movieId, t.tag))\n    val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n    val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap((mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)))\n    val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey((w: Int, z: Int) => w + z)\n    val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n    genresTagsCountSorted\n  }",
              "status" : "Killed"
            },
            {
              "id" : 154,
              "originalProgramId" : 7,
              "mutationOperator" : "MTR",
              "mutationOperatorDescription" : "Mapping Transformation Replacement",
              "mutantCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (inputParameter: Movie) => {\n    val originalFunction = ((m: Movie) => (m.movieId, m))(_)\n    val originalValue = originalFunction(inputParameter)\n    (originalValue._1, null.asInstanceOf[Movie])\n  } }\n  val tagsMovieIdKey: RDD[(Int, String)] = tags.map { (t: Tag) => (t.movieId, t.tag) }\n  val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n  val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap { (mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)) }\n  val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey { (w: Int, z: Int) => w + z }\n  val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map { (g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n  genresTagsCountSorted\n}",
              "originalCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val tagsMovieIdKey: RDD[(Int, String)] = tags.map((t: Tag) => (t.movieId, t.tag))\n    val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n    val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap((mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)))\n    val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey((w: Int, z: Int) => w + z)\n    val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n    genresTagsCountSorted\n  }",
              "status" : "Killed"
            },
            {
              "id" : 155,
              "originalProgramId" : 7,
              "mutationOperator" : "MTR",
              "mutationOperatorDescription" : "Mapping Transformation Replacement",
              "mutantCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val tagsMovieIdKey: RDD[(Int, String)] = tags.map { (inputParameter: Tag) => {\n    val originalFunction = ((t: Tag) => (t.movieId, t.tag))(_)\n    val originalValue = originalFunction(inputParameter)\n    (0, originalValue._2)\n  } }\n  val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n  val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap { (mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)) }\n  val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey { (w: Int, z: Int) => w + z }\n  val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map { (g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n  genresTagsCountSorted\n}",
              "originalCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val tagsMovieIdKey: RDD[(Int, String)] = tags.map((t: Tag) => (t.movieId, t.tag))\n    val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n    val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap((mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)))\n    val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey((w: Int, z: Int) => w + z)\n    val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n    genresTagsCountSorted\n  }",
              "status" : "Killed"
            },
            {
              "id" : 156,
              "originalProgramId" : 7,
              "mutationOperator" : "MTR",
              "mutationOperatorDescription" : "Mapping Transformation Replacement",
              "mutantCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val tagsMovieIdKey: RDD[(Int, String)] = tags.map { (inputParameter: Tag) => {\n    val originalFunction = ((t: Tag) => (t.movieId, t.tag))(_)\n    val originalValue = originalFunction(inputParameter)\n    (1, originalValue._2)\n  } }\n  val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n  val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap { (mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)) }\n  val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey { (w: Int, z: Int) => w + z }\n  val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map { (g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n  genresTagsCountSorted\n}",
              "originalCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val tagsMovieIdKey: RDD[(Int, String)] = tags.map((t: Tag) => (t.movieId, t.tag))\n    val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n    val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap((mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)))\n    val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey((w: Int, z: Int) => w + z)\n    val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n    genresTagsCountSorted\n  }",
              "status" : "Killed"
            },
            {
              "id" : 157,
              "originalProgramId" : 7,
              "mutationOperator" : "MTR",
              "mutationOperatorDescription" : "Mapping Transformation Replacement",
              "mutantCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val tagsMovieIdKey: RDD[(Int, String)] = tags.map { (inputParameter: Tag) => {\n    val originalFunction = ((t: Tag) => (t.movieId, t.tag))(_)\n    val originalValue = originalFunction(inputParameter)\n    (Int.MaxValue, originalValue._2)\n  } }\n  val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n  val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap { (mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)) }\n  val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey { (w: Int, z: Int) => w + z }\n  val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map { (g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n  genresTagsCountSorted\n}",
              "originalCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val tagsMovieIdKey: RDD[(Int, String)] = tags.map((t: Tag) => (t.movieId, t.tag))\n    val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n    val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap((mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)))\n    val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey((w: Int, z: Int) => w + z)\n    val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n    genresTagsCountSorted\n  }",
              "status" : "Killed"
            },
            {
              "id" : 158,
              "originalProgramId" : 7,
              "mutationOperator" : "MTR",
              "mutationOperatorDescription" : "Mapping Transformation Replacement",
              "mutantCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val tagsMovieIdKey: RDD[(Int, String)] = tags.map { (inputParameter: Tag) => {\n    val originalFunction = ((t: Tag) => (t.movieId, t.tag))(_)\n    val originalValue = originalFunction(inputParameter)\n    (Int.MinValue, originalValue._2)\n  } }\n  val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n  val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap { (mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)) }\n  val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey { (w: Int, z: Int) => w + z }\n  val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map { (g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n  genresTagsCountSorted\n}",
              "originalCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val tagsMovieIdKey: RDD[(Int, String)] = tags.map((t: Tag) => (t.movieId, t.tag))\n    val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n    val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap((mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)))\n    val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey((w: Int, z: Int) => w + z)\n    val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n    genresTagsCountSorted\n  }",
              "status" : "Killed"
            },
            {
              "id" : 159,
              "originalProgramId" : 7,
              "mutationOperator" : "MTR",
              "mutationOperatorDescription" : "Mapping Transformation Replacement",
              "mutantCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val tagsMovieIdKey: RDD[(Int, String)] = tags.map { (inputParameter: Tag) => {\n    val originalFunction = ((t: Tag) => (t.movieId, t.tag))(_)\n    val originalValue = originalFunction(inputParameter)\n    (-originalValue._1, originalValue._2)\n  } }\n  val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n  val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap { (mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)) }\n  val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey { (w: Int, z: Int) => w + z }\n  val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map { (g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n  genresTagsCountSorted\n}",
              "originalCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val tagsMovieIdKey: RDD[(Int, String)] = tags.map((t: Tag) => (t.movieId, t.tag))\n    val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n    val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap((mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)))\n    val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey((w: Int, z: Int) => w + z)\n    val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n    genresTagsCountSorted\n  }",
              "status" : "Killed"
            },
            {
              "id" : 160,
              "originalProgramId" : 7,
              "mutationOperator" : "MTR",
              "mutationOperatorDescription" : "Mapping Transformation Replacement",
              "mutantCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val tagsMovieIdKey: RDD[(Int, String)] = tags.map { (inputParameter: Tag) => {\n    val originalFunction = ((t: Tag) => (t.movieId, t.tag))(_)\n    val originalValue = originalFunction(inputParameter)\n    (originalValue._1, \"\")\n  } }\n  val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n  val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap { (mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)) }\n  val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey { (w: Int, z: Int) => w + z }\n  val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map { (g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n  genresTagsCountSorted\n}",
              "originalCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val tagsMovieIdKey: RDD[(Int, String)] = tags.map((t: Tag) => (t.movieId, t.tag))\n    val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n    val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap((mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)))\n    val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey((w: Int, z: Int) => w + z)\n    val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n    genresTagsCountSorted\n  }",
              "status" : "Killed"
            },
            {
              "id" : 161,
              "originalProgramId" : 7,
              "mutationOperator" : "MTR",
              "mutationOperatorDescription" : "Mapping Transformation Replacement",
              "mutantCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val tagsMovieIdKey: RDD[(Int, String)] = tags.map { (t: Tag) => (t.movieId, t.tag) }\n  val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n  val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap { (inputParameter: (Int, (Movie, String))) => {\n    val originalFunction = ((mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)))(_)\n    val originalValue = originalFunction(inputParameter)\n    originalValue.headOption\n  } }\n  val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey { (w: Int, z: Int) => w + z }\n  val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map { (g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n  genresTagsCountSorted\n}",
              "originalCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val tagsMovieIdKey: RDD[(Int, String)] = tags.map((t: Tag) => (t.movieId, t.tag))\n    val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n    val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap((mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)))\n    val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey((w: Int, z: Int) => w + z)\n    val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n    genresTagsCountSorted\n  }",
              "status" : "Killed"
            },
            {
              "id" : 162,
              "originalProgramId" : 7,
              "mutationOperator" : "MTR",
              "mutationOperatorDescription" : "Mapping Transformation Replacement",
              "mutantCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val tagsMovieIdKey: RDD[(Int, String)] = tags.map { (t: Tag) => (t.movieId, t.tag) }\n  val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n  val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap { (inputParameter: (Int, (Movie, String))) => {\n    val originalFunction = ((mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)))(_)\n    val originalValue = originalFunction(inputParameter)\n    originalValue.toList.tail\n  } }\n  val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey { (w: Int, z: Int) => w + z }\n  val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map { (g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n  genresTagsCountSorted\n}",
              "originalCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val tagsMovieIdKey: RDD[(Int, String)] = tags.map((t: Tag) => (t.movieId, t.tag))\n    val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n    val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap((mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)))\n    val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey((w: Int, z: Int) => w + z)\n    val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n    genresTagsCountSorted\n  }",
              "status" : "Killed"
            },
            {
              "id" : 163,
              "originalProgramId" : 7,
              "mutationOperator" : "MTR",
              "mutationOperatorDescription" : "Mapping Transformation Replacement",
              "mutantCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val tagsMovieIdKey: RDD[(Int, String)] = tags.map { (t: Tag) => (t.movieId, t.tag) }\n  val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n  val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap { (inputParameter: (Int, (Movie, String))) => {\n    val originalFunction = ((mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)))(_)\n    val originalValue = originalFunction(inputParameter)\n    originalValue.toList.reverse\n  } }\n  val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey { (w: Int, z: Int) => w + z }\n  val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map { (g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n  genresTagsCountSorted\n}",
              "originalCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val tagsMovieIdKey: RDD[(Int, String)] = tags.map((t: Tag) => (t.movieId, t.tag))\n    val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n    val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap((mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)))\n    val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey((w: Int, z: Int) => w + z)\n    val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n    genresTagsCountSorted\n  }",
              "status" : "Equivalent"
            },
            {
              "id" : 164,
              "originalProgramId" : 7,
              "mutationOperator" : "MTR",
              "mutationOperatorDescription" : "Mapping Transformation Replacement",
              "mutantCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val tagsMovieIdKey: RDD[(Int, String)] = tags.map { (t: Tag) => (t.movieId, t.tag) }\n  val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n  val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap { (inputParameter: (Int, (Movie, String))) => {\n    val originalFunction = ((mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)))(_)\n    val originalValue = originalFunction(inputParameter)\n    List[((String, String), Int)]()\n  } }\n  val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey { (w: Int, z: Int) => w + z }\n  val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map { (g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n  genresTagsCountSorted\n}",
              "originalCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val tagsMovieIdKey: RDD[(Int, String)] = tags.map((t: Tag) => (t.movieId, t.tag))\n    val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n    val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap((mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)))\n    val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey((w: Int, z: Int) => w + z)\n    val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n    genresTagsCountSorted\n  }",
              "status" : "Killed"
            },
            {
              "id" : 165,
              "originalProgramId" : 7,
              "mutationOperator" : "MTR",
              "mutationOperatorDescription" : "Mapping Transformation Replacement",
              "mutantCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val tagsMovieIdKey: RDD[(Int, String)] = tags.map { (t: Tag) => (t.movieId, t.tag) }\n  val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n  val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap { (mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)) }\n  val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey { (w: Int, z: Int) => w + z }\n  val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map { (inputParameter: ((String, String), Int)) => {\n    val originalFunction = ((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))(_)\n    val originalValue = originalFunction(inputParameter)\n    (\"\", originalValue._2)\n  } }\n  val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n  genresTagsCountSorted\n}",
              "originalCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val tagsMovieIdKey: RDD[(Int, String)] = tags.map((t: Tag) => (t.movieId, t.tag))\n    val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n    val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap((mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)))\n    val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey((w: Int, z: Int) => w + z)\n    val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n    genresTagsCountSorted\n  }",
              "status" : "Killed"
            },
            {
              "id" : 166,
              "originalProgramId" : 7,
              "mutationOperator" : "MTR",
              "mutationOperatorDescription" : "Mapping Transformation Replacement",
              "mutantCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val tagsMovieIdKey: RDD[(Int, String)] = tags.map { (t: Tag) => (t.movieId, t.tag) }\n  val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n  val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap { (mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)) }\n  val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey { (w: Int, z: Int) => w + z }\n  val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map { (inputParameter: ((String, String), Int)) => {\n    val originalFunction = ((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))(_)\n    val originalValue = originalFunction(inputParameter)\n    (originalValue._1, (\"\", originalValue._2._2))\n  } }\n  val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n  genresTagsCountSorted\n}",
              "originalCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val tagsMovieIdKey: RDD[(Int, String)] = tags.map((t: Tag) => (t.movieId, t.tag))\n    val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n    val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap((mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)))\n    val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey((w: Int, z: Int) => w + z)\n    val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n    genresTagsCountSorted\n  }",
              "status" : "Killed"
            },
            {
              "id" : 167,
              "originalProgramId" : 7,
              "mutationOperator" : "MTR",
              "mutationOperatorDescription" : "Mapping Transformation Replacement",
              "mutantCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val tagsMovieIdKey: RDD[(Int, String)] = tags.map { (t: Tag) => (t.movieId, t.tag) }\n  val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n  val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap { (mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)) }\n  val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey { (w: Int, z: Int) => w + z }\n  val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map { (inputParameter: ((String, String), Int)) => {\n    val originalFunction = ((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))(_)\n    val originalValue = originalFunction(inputParameter)\n    (originalValue._1, (originalValue._2._1, 0))\n  } }\n  val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n  genresTagsCountSorted\n}",
              "originalCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val tagsMovieIdKey: RDD[(Int, String)] = tags.map((t: Tag) => (t.movieId, t.tag))\n    val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n    val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap((mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)))\n    val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey((w: Int, z: Int) => w + z)\n    val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n    genresTagsCountSorted\n  }",
              "status" : "Killed"
            },
            {
              "id" : 168,
              "originalProgramId" : 7,
              "mutationOperator" : "MTR",
              "mutationOperatorDescription" : "Mapping Transformation Replacement",
              "mutantCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val tagsMovieIdKey: RDD[(Int, String)] = tags.map { (t: Tag) => (t.movieId, t.tag) }\n  val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n  val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap { (mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)) }\n  val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey { (w: Int, z: Int) => w + z }\n  val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map { (inputParameter: ((String, String), Int)) => {\n    val originalFunction = ((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))(_)\n    val originalValue = originalFunction(inputParameter)\n    (originalValue._1, (originalValue._2._1, 1))\n  } }\n  val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n  genresTagsCountSorted\n}",
              "originalCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val tagsMovieIdKey: RDD[(Int, String)] = tags.map((t: Tag) => (t.movieId, t.tag))\n    val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n    val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap((mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)))\n    val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey((w: Int, z: Int) => w + z)\n    val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n    genresTagsCountSorted\n  }",
              "status" : "Killed"
            },
            {
              "id" : 169,
              "originalProgramId" : 7,
              "mutationOperator" : "MTR",
              "mutationOperatorDescription" : "Mapping Transformation Replacement",
              "mutantCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val tagsMovieIdKey: RDD[(Int, String)] = tags.map { (t: Tag) => (t.movieId, t.tag) }\n  val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n  val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap { (mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)) }\n  val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey { (w: Int, z: Int) => w + z }\n  val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map { (inputParameter: ((String, String), Int)) => {\n    val originalFunction = ((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))(_)\n    val originalValue = originalFunction(inputParameter)\n    (originalValue._1, (originalValue._2._1, Int.MaxValue))\n  } }\n  val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n  genresTagsCountSorted\n}",
              "originalCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val tagsMovieIdKey: RDD[(Int, String)] = tags.map((t: Tag) => (t.movieId, t.tag))\n    val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n    val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap((mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)))\n    val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey((w: Int, z: Int) => w + z)\n    val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n    genresTagsCountSorted\n  }",
              "status" : "Killed"
            },
            {
              "id" : 170,
              "originalProgramId" : 7,
              "mutationOperator" : "MTR",
              "mutationOperatorDescription" : "Mapping Transformation Replacement",
              "mutantCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val tagsMovieIdKey: RDD[(Int, String)] = tags.map { (t: Tag) => (t.movieId, t.tag) }\n  val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n  val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap { (mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)) }\n  val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey { (w: Int, z: Int) => w + z }\n  val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map { (inputParameter: ((String, String), Int)) => {\n    val originalFunction = ((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))(_)\n    val originalValue = originalFunction(inputParameter)\n    (originalValue._1, (originalValue._2._1, Int.MinValue))\n  } }\n  val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n  genresTagsCountSorted\n}",
              "originalCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val tagsMovieIdKey: RDD[(Int, String)] = tags.map((t: Tag) => (t.movieId, t.tag))\n    val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n    val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap((mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)))\n    val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey((w: Int, z: Int) => w + z)\n    val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n    genresTagsCountSorted\n  }",
              "status" : "Killed"
            },
            {
              "id" : 171,
              "originalProgramId" : 7,
              "mutationOperator" : "MTR",
              "mutationOperatorDescription" : "Mapping Transformation Replacement",
              "mutantCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val tagsMovieIdKey: RDD[(Int, String)] = tags.map { (t: Tag) => (t.movieId, t.tag) }\n  val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n  val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap { (mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)) }\n  val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey { (w: Int, z: Int) => w + z }\n  val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map { (inputParameter: ((String, String), Int)) => {\n    val originalFunction = ((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))(_)\n    val originalValue = originalFunction(inputParameter)\n    (originalValue._1, (originalValue._2._1, -originalValue._2._2))\n  } }\n  val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n  genresTagsCountSorted\n}",
              "originalCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val tagsMovieIdKey: RDD[(Int, String)] = tags.map((t: Tag) => (t.movieId, t.tag))\n    val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n    val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap((mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)))\n    val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey((w: Int, z: Int) => w + z)\n    val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n    genresTagsCountSorted\n  }",
              "status" : "Killed"
            },
            {
              "id" : 172,
              "originalProgramId" : 7,
              "mutationOperator" : "DTI",
              "mutationOperatorDescription" : "Distinct Transformation Insertion",
              "mutantCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }.distinct()\n  val tagsMovieIdKey: RDD[(Int, String)] = tags.map { (t: Tag) => (t.movieId, t.tag) }\n  val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n  val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap { (mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)) }\n  val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey { (w: Int, z: Int) => w + z }\n  val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map { (g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n  genresTagsCountSorted\n}",
              "originalCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val tagsMovieIdKey: RDD[(Int, String)] = tags.map((t: Tag) => (t.movieId, t.tag))\n    val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n    val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap((mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)))\n    val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey((w: Int, z: Int) => w + z)\n    val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n    genresTagsCountSorted\n  }",
              "status" : "Lived"
            },
            {
              "id" : 173,
              "originalProgramId" : 7,
              "mutationOperator" : "DTI",
              "mutationOperatorDescription" : "Distinct Transformation Insertion",
              "mutantCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val tagsMovieIdKey: RDD[(Int, String)] = tags.map { (t: Tag) => (t.movieId, t.tag) }.distinct()\n  val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n  val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap { (mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)) }\n  val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey { (w: Int, z: Int) => w + z }\n  val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map { (g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n  genresTagsCountSorted\n}",
              "originalCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val tagsMovieIdKey: RDD[(Int, String)] = tags.map((t: Tag) => (t.movieId, t.tag))\n    val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n    val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap((mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)))\n    val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey((w: Int, z: Int) => w + z)\n    val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n    genresTagsCountSorted\n  }",
              "status" : "Killed"
            },
            {
              "id" : 174,
              "originalProgramId" : 7,
              "mutationOperator" : "DTI",
              "mutationOperatorDescription" : "Distinct Transformation Insertion",
              "mutantCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val tagsMovieIdKey: RDD[(Int, String)] = tags.map { (t: Tag) => (t.movieId, t.tag) }\n  val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey).distinct()\n  val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap { (mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)) }\n  val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey { (w: Int, z: Int) => w + z }\n  val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map { (g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n  genresTagsCountSorted\n}",
              "originalCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val tagsMovieIdKey: RDD[(Int, String)] = tags.map((t: Tag) => (t.movieId, t.tag))\n    val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n    val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap((mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)))\n    val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey((w: Int, z: Int) => w + z)\n    val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n    genresTagsCountSorted\n  }",
              "status" : "Killed"
            },
            {
              "id" : 175,
              "originalProgramId" : 7,
              "mutationOperator" : "DTI",
              "mutationOperatorDescription" : "Distinct Transformation Insertion",
              "mutantCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val tagsMovieIdKey: RDD[(Int, String)] = tags.map { (t: Tag) => (t.movieId, t.tag) }\n  val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n  val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap { (mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)) }.distinct()\n  val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey { (w: Int, z: Int) => w + z }\n  val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map { (g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n  genresTagsCountSorted\n}",
              "originalCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val tagsMovieIdKey: RDD[(Int, String)] = tags.map((t: Tag) => (t.movieId, t.tag))\n    val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n    val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap((mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)))\n    val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey((w: Int, z: Int) => w + z)\n    val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n    genresTagsCountSorted\n  }",
              "status" : "Killed"
            },
            {
              "id" : 176,
              "originalProgramId" : 7,
              "mutationOperator" : "DTI",
              "mutationOperatorDescription" : "Distinct Transformation Insertion",
              "mutantCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val tagsMovieIdKey: RDD[(Int, String)] = tags.map { (t: Tag) => (t.movieId, t.tag) }\n  val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n  val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap { (mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)) }\n  val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey { (w: Int, z: Int) => w + z }.distinct()\n  val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map { (g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n  genresTagsCountSorted\n}",
              "originalCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val tagsMovieIdKey: RDD[(Int, String)] = tags.map((t: Tag) => (t.movieId, t.tag))\n    val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n    val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap((mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)))\n    val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey((w: Int, z: Int) => w + z)\n    val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n    genresTagsCountSorted\n  }",
              "status" : "Killed"
            },
            {
              "id" : 177,
              "originalProgramId" : 7,
              "mutationOperator" : "DTI",
              "mutationOperatorDescription" : "Distinct Transformation Insertion",
              "mutantCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val tagsMovieIdKey: RDD[(Int, String)] = tags.map { (t: Tag) => (t.movieId, t.tag) }\n  val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n  val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap { (mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)) }\n  val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey { (w: Int, z: Int) => w + z }\n  val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map { (g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)) }.distinct()\n  val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n  genresTagsCountSorted\n}",
              "originalCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val tagsMovieIdKey: RDD[(Int, String)] = tags.map((t: Tag) => (t.movieId, t.tag))\n    val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n    val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap((mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)))\n    val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey((w: Int, z: Int) => w + z)\n    val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n    genresTagsCountSorted\n  }",
              "status" : "Lived"
            },
            {
              "id" : 178,
              "originalProgramId" : 7,
              "mutationOperator" : "DTI",
              "mutationOperatorDescription" : "Distinct Transformation Insertion",
              "mutantCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val tagsMovieIdKey: RDD[(Int, String)] = tags.map { (t: Tag) => (t.movieId, t.tag) }\n  val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n  val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap { (mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)) }\n  val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey { (w: Int, z: Int) => w + z }\n  val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map { (g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true).distinct()\n  genresTagsCountSorted\n}",
              "originalCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val tagsMovieIdKey: RDD[(Int, String)] = tags.map((t: Tag) => (t.movieId, t.tag))\n    val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n    val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap((mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)))\n    val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey((w: Int, z: Int) => w + z)\n    val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n    genresTagsCountSorted\n  }",
              "status" : "Killed"
            },
            {
              "id" : 179,
              "originalProgramId" : 7,
              "mutationOperator" : "ATR",
              "mutationOperatorDescription" : "Aggregation Transformation Replacement",
              "mutantCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val tagsMovieIdKey: RDD[(Int, String)] = tags.map { (t: Tag) => (t.movieId, t.tag) }\n  val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n  val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap { (mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)) }\n  val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey { (firstParameter: Int, secondParameter: Int) => firstParameter }\n  val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map { (g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n  genresTagsCountSorted\n}",
              "originalCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val tagsMovieIdKey: RDD[(Int, String)] = tags.map((t: Tag) => (t.movieId, t.tag))\n    val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n    val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap((mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)))\n    val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey((w: Int, z: Int) => w + z)\n    val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n    genresTagsCountSorted\n  }",
              "status" : "Killed"
            },
            {
              "id" : 180,
              "originalProgramId" : 7,
              "mutationOperator" : "ATR",
              "mutationOperatorDescription" : "Aggregation Transformation Replacement",
              "mutantCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val tagsMovieIdKey: RDD[(Int, String)] = tags.map { (t: Tag) => (t.movieId, t.tag) }\n  val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n  val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap { (mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)) }\n  val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey { (firstParameter: Int, secondParameter: Int) => secondParameter }\n  val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map { (g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n  genresTagsCountSorted\n}",
              "originalCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val tagsMovieIdKey: RDD[(Int, String)] = tags.map((t: Tag) => (t.movieId, t.tag))\n    val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n    val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap((mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)))\n    val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey((w: Int, z: Int) => w + z)\n    val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n    genresTagsCountSorted\n  }",
              "status" : "Killed"
            },
            {
              "id" : 181,
              "originalProgramId" : 7,
              "mutationOperator" : "ATR",
              "mutationOperatorDescription" : "Aggregation Transformation Replacement",
              "mutantCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val tagsMovieIdKey: RDD[(Int, String)] = tags.map { (t: Tag) => (t.movieId, t.tag) }\n  val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n  val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap { (mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)) }\n  val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey { (firstParameter: Int, secondParameter: Int) => {\n    val originalFunction = ((w: Int, z: Int) => w + z)(_, _)\n    originalFunction(firstParameter, firstParameter)\n  } }\n  val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map { (g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n  genresTagsCountSorted\n}",
              "originalCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val tagsMovieIdKey: RDD[(Int, String)] = tags.map((t: Tag) => (t.movieId, t.tag))\n    val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n    val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap((mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)))\n    val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey((w: Int, z: Int) => w + z)\n    val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n    genresTagsCountSorted\n  }",
              "status" : "Lived"
            },
            {
              "id" : 182,
              "originalProgramId" : 7,
              "mutationOperator" : "ATR",
              "mutationOperatorDescription" : "Aggregation Transformation Replacement",
              "mutantCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val tagsMovieIdKey: RDD[(Int, String)] = tags.map { (t: Tag) => (t.movieId, t.tag) }\n  val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n  val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap { (mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)) }\n  val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey { (firstParameter: Int, secondParameter: Int) => {\n    val originalFunction = ((w: Int, z: Int) => w + z)(_, _)\n    originalFunction(secondParameter, secondParameter)\n  } }\n  val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map { (g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n  genresTagsCountSorted\n}",
              "originalCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val tagsMovieIdKey: RDD[(Int, String)] = tags.map((t: Tag) => (t.movieId, t.tag))\n    val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n    val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap((mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)))\n    val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey((w: Int, z: Int) => w + z)\n    val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n    genresTagsCountSorted\n  }",
              "status" : "Lived"
            },
            {
              "id" : 183,
              "originalProgramId" : 7,
              "mutationOperator" : "ATR",
              "mutationOperatorDescription" : "Aggregation Transformation Replacement",
              "mutantCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val tagsMovieIdKey: RDD[(Int, String)] = tags.map { (t: Tag) => (t.movieId, t.tag) }\n  val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n  val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap { (mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)) }\n  val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey { (firstParameter: Int, secondParameter: Int) => {\n    val originalFunction = ((w: Int, z: Int) => w + z)(_, _)\n    originalFunction(secondParameter, firstParameter)\n  } }\n  val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map { (g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n  genresTagsCountSorted\n}",
              "originalCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val tagsMovieIdKey: RDD[(Int, String)] = tags.map((t: Tag) => (t.movieId, t.tag))\n    val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n    val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap((mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)))\n    val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey((w: Int, z: Int) => w + z)\n    val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n    genresTagsCountSorted\n  }",
              "status" : "Equivalent"
            },
            {
              "id" : 184,
              "originalProgramId" : 7,
              "mutationOperator" : "JTR",
              "mutationOperatorDescription" : "Join Transformation Replacement",
              "mutantCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val tagsMovieIdKey: RDD[(Int, String)] = tags.map { (t: Tag) => (t.movieId, t.tag) }\n  val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.leftOuterJoin(tagsMovieIdKey).map(tuple => (tuple._1, (tuple._2._1, tuple._2._2.getOrElse(\"\"))))\n  val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap { (mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)) }\n  val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey { (w: Int, z: Int) => w + z }\n  val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map { (g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n  genresTagsCountSorted\n}",
              "originalCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val tagsMovieIdKey: RDD[(Int, String)] = tags.map((t: Tag) => (t.movieId, t.tag))\n    val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n    val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap((mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)))\n    val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey((w: Int, z: Int) => w + z)\n    val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n    genresTagsCountSorted\n  }",
              "status" : "Lived"
            },
            {
              "id" : 185,
              "originalProgramId" : 7,
              "mutationOperator" : "JTR",
              "mutationOperatorDescription" : "Join Transformation Replacement",
              "mutantCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val tagsMovieIdKey: RDD[(Int, String)] = tags.map { (t: Tag) => (t.movieId, t.tag) }\n  val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.rightOuterJoin(tagsMovieIdKey).map(tuple => (tuple._1, (tuple._2._1.getOrElse(null.asInstanceOf[Movie]), tuple._2._2)))\n  val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap { (mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)) }\n  val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey { (w: Int, z: Int) => w + z }\n  val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map { (g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n  genresTagsCountSorted\n}",
              "originalCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val tagsMovieIdKey: RDD[(Int, String)] = tags.map((t: Tag) => (t.movieId, t.tag))\n    val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n    val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap((mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)))\n    val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey((w: Int, z: Int) => w + z)\n    val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n    genresTagsCountSorted\n  }",
              "status" : "Lived"
            },
            {
              "id" : 186,
              "originalProgramId" : 7,
              "mutationOperator" : "JTR",
              "mutationOperatorDescription" : "Join Transformation Replacement",
              "mutantCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val tagsMovieIdKey: RDD[(Int, String)] = tags.map { (t: Tag) => (t.movieId, t.tag) }\n  val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.fullOuterJoin(tagsMovieIdKey).map(tuple => (tuple._1, (tuple._2._1.getOrElse(null.asInstanceOf[Movie]), tuple._2._2.getOrElse(\"\"))))\n  val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap { (mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)) }\n  val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey { (w: Int, z: Int) => w + z }\n  val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map { (g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n  genresTagsCountSorted\n}",
              "originalCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val tagsMovieIdKey: RDD[(Int, String)] = tags.map((t: Tag) => (t.movieId, t.tag))\n    val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n    val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap((mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)))\n    val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey((w: Int, z: Int) => w + z)\n    val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n    genresTagsCountSorted\n  }",
              "status" : "Lived"
            },
            {
              "id" : 187,
              "originalProgramId" : 7,
              "mutationOperator" : "OTD",
              "mutationOperatorDescription" : "Order Transformation Deletion",
              "mutantCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val tagsMovieIdKey: RDD[(Int, String)] = tags.map { (t: Tag) => (t.movieId, t.tag) }\n  val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n  val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap { (mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)) }\n  val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey { (w: Int, z: Int) => w + z }\n  val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map { (g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped\n  genresTagsCountSorted\n}",
              "originalCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val tagsMovieIdKey: RDD[(Int, String)] = tags.map((t: Tag) => (t.movieId, t.tag))\n    val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n    val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap((mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)))\n    val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey((w: Int, z: Int) => w + z)\n    val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n    genresTagsCountSorted\n  }",
              "status" : "Killed"
            },
            {
              "id" : 188,
              "originalProgramId" : 7,
              "mutationOperator" : "OTI",
              "mutationOperatorDescription" : "Order Transformation Inversion",
              "mutantCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val tagsMovieIdKey: RDD[(Int, String)] = tags.map { (t: Tag) => (t.movieId, t.tag) }\n  val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n  val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap { (mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)) }\n  val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey { (w: Int, z: Int) => w + z }\n  val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map { (g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(false)\n  genresTagsCountSorted\n}",
              "originalCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val tagsMovieIdKey: RDD[(Int, String)] = tags.map((t: Tag) => (t.movieId, t.tag))\n    val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n    val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap((mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)))\n    val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey((w: Int, z: Int) => w + z)\n    val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n    genresTagsCountSorted\n  }",
              "status" : "Killed"
            }
          ],
          "removedMutants" : [
          ],
          "mutationOperatorsMetrics" : {
            "totalMutantsPerOperator" : {
              "FTD" : 0,
              "JTR" : 3,
              "UTR" : 0,
              "MTR" : 23,
              "UTD" : 2,
              "OTD" : 1,
              "BTR" : 0,
              "STR" : 0,
              "BTS" : 0,
              "ATR" : 5,
              "OTI" : 1,
              "DTI" : 7,
              "DTD" : 0,
              "NFTP" : 0,
              "UTS" : 0
            },
            "totalKilledMutantsPerOperator" : {
              "FTD" : 0,
              "JTR" : 0,
              "UTR" : 0,
              "MTR" : 22,
              "UTD" : 2,
              "OTD" : 1,
              "BTR" : 0,
              "STR" : 0,
              "BTS" : 0,
              "ATR" : 2,
              "OTI" : 1,
              "DTI" : 5,
              "DTD" : 0,
              "NFTP" : 0,
              "UTS" : 0
            },
            "totalLivedMutantsPerOperator" : {
              "FTD" : 0,
              "JTR" : 3,
              "UTR" : 0,
              "MTR" : 0,
              "UTD" : 0,
              "OTD" : 0,
              "BTR" : 0,
              "STR" : 0,
              "BTS" : 0,
              "ATR" : 2,
              "OTI" : 0,
              "DTI" : 2,
              "DTD" : 0,
              "NFTP" : 0,
              "UTS" : 0
            },
            "totalEquivalentMutantsPerOperator" : {
              "FTD" : 0,
              "JTR" : 0,
              "UTR" : 0,
              "MTR" : 1,
              "UTD" : 0,
              "OTD" : 0,
              "BTR" : 0,
              "STR" : 0,
              "BTS" : 0,
              "ATR" : 1,
              "OTI" : 0,
              "DTI" : 0,
              "DTD" : 0,
              "NFTP" : 0,
              "UTS" : 0
            },
            "totalErrorMutantsPerOperator" : {
              "FTD" : 0,
              "JTR" : 0,
              "UTR" : 0,
              "MTR" : 0,
              "UTD" : 0,
              "OTD" : 0,
              "BTR" : 0,
              "STR" : 0,
              "BTS" : 0,
              "ATR" : 0,
              "OTI" : 0,
              "DTI" : 0,
              "DTD" : 0,
              "NFTP" : 0,
              "UTS" : 0
            },
            "totalRemovedMutantsPerOperator" : {
              "FTD" : 0,
              "JTR" : 0,
              "UTR" : 0,
              "MTR" : 0,
              "UTD" : 0,
              "OTD" : 0,
              "BTR" : 0,
              "STR" : 0,
              "BTS" : 0,
              "ATR" : 0,
              "OTI" : 0,
              "DTI" : 0,
              "DTD" : 0,
              "NFTP" : 0,
              "UTS" : 0
            },
            "descriptionPerOperator" : {
              "FTD" : "Filter Transformation Deletion",
              "JTR" : "Join Transformation Replacement",
              "UTR" : "Unary Transformation Replacement",
              "MTR" : "Mapping Transformation Replacement",
              "UTD" : "Unary Transformation Deletion",
              "OTD" : "Order Transformation Deletion",
              "BTR" : "Binary Transformation Replacement",
              "STR" : "Set Transformation Replacement",
              "BTS" : "Binary Transformation Swap",
              "ATR" : "Aggregation Transformation Replacement",
              "OTI" : "Order Transformation Inversion",
              "DTI" : "Distinct Transformation Insertion",
              "DTD" : "Distinct Transformation Deletion",
              "NFTP" : "Negation of Filter Transformation Predicate",
              "UTS" : "Unary Transformation Swap"
            }
          },
          "totalDatasets" : 9,
          "totalTransformations" : 7,
          "totalMutants" : 42,
          "totalKilledMutants" : 33,
          "totalLivedMutants" : 7,
          "totalEquivalentMutants" : 2,
          "totalErrorMutants" : 0,
          "totalRemovedMutants" : 0,
          "mutationScore" : 0.825
        },
        {
          "id" : 8,
          "programSourceId" : 1,
          "name" : "tagBestSummarizeGenre",
          "code" : "def tagBestSummarizeGenre(genresTagsCountSorted: RDD[(String, (String, Int))]) = {\n    val genresTagsCountSortedGrouped: RDD[(String, Iterable[(String, Int)])] = genresTagsCountSorted.groupByKey()\n    val genresTagsCountSortedTop5: RDD[(String, List[(String, Int)])] = genresTagsCountSortedGrouped.map((l: (String, Iterable[(String, Int)])) => (l._1, l._2.toList.sortBy(_._2).reverse.take(5)))\n    genresTagsCountSortedTop5\n  }",
          "datasets" : [
            {
              "id" : 42,
              "name" : "genresTagsCountSorted",
              "datasetType" : "RDD[(String, (String, Int))]",
              "inputDataset" : true,
              "outputDataset" : false
            },
            {
              "id" : 43,
              "name" : "genresTagsCountSortedGrouped",
              "datasetType" : "RDD[(String, Iterable[(String, Int)])]",
              "inputDataset" : false,
              "outputDataset" : false
            },
            {
              "id" : 44,
              "name" : "genresTagsCountSortedTop5",
              "datasetType" : "RDD[(String, List[(String, Int)])]",
              "inputDataset" : false,
              "outputDataset" : true
            }
          ],
          "transformations" : [
            {
              "id" : 32,
              "name" : "groupByKey",
              "inputTypes" : [
                "RDD[(String, (String, Int))]"
              ],
              "outputTypes" : [
                "RDD[(String, Iterable[(String, Int)])]"
              ],
              "loadTransformation" : false
            },
            {
              "id" : 33,
              "name" : "map",
              "inputTypes" : [
                "RDD[(String, Iterable[(String, Int)])]"
              ],
              "outputTypes" : [
                "RDD[(String, List[(String, Int)])]"
              ],
              "loadTransformation" : false
            }
          ],
          "edges" : [
            {
              "id" : 64,
              "datasetId" : 42,
              "transformationId" : 32,
              "direction" : "DatasetToTransformation"
            },
            {
              "id" : 65,
              "datasetId" : 43,
              "transformationId" : 32,
              "direction" : "TransformationToDataset"
            },
            {
              "id" : 66,
              "datasetId" : 43,
              "transformationId" : 33,
              "direction" : "DatasetToTransformation"
            },
            {
              "id" : 67,
              "datasetId" : 44,
              "transformationId" : 33,
              "direction" : "TransformationToDataset"
            }
          ],
          "mutants" : [
            {
              "id" : 189,
              "originalProgramId" : 8,
              "mutationOperator" : "MTR",
              "mutationOperatorDescription" : "Mapping Transformation Replacement",
              "mutantCode" : "def tagBestSummarizeGenre(genresTagsCountSorted: RDD[(String, (String, Int))]) = {\n  val genresTagsCountSortedGrouped: RDD[(String, Iterable[(String, Int)])] = genresTagsCountSorted.groupByKey()\n  val genresTagsCountSortedTop5: RDD[(String, List[(String, Int)])] = genresTagsCountSortedGrouped.map { (inputParameter: (String, Iterable[(String, Int)])) => {\n    val originalFunction = ((l: (String, Iterable[(String, Int)])) => (l._1, l._2.toList.sortBy(_._2).reverse.take(5)))(_)\n    val originalValue = originalFunction(inputParameter)\n    (\"\", originalValue._2)\n  } }\n  genresTagsCountSortedTop5\n}",
              "originalCode" : "def tagBestSummarizeGenre(genresTagsCountSorted: RDD[(String, (String, Int))]) = {\n    val genresTagsCountSortedGrouped: RDD[(String, Iterable[(String, Int)])] = genresTagsCountSorted.groupByKey()\n    val genresTagsCountSortedTop5: RDD[(String, List[(String, Int)])] = genresTagsCountSortedGrouped.map((l: (String, Iterable[(String, Int)])) => (l._1, l._2.toList.sortBy(_._2).reverse.take(5)))\n    genresTagsCountSortedTop5\n  }",
              "status" : "Killed"
            },
            {
              "id" : 190,
              "originalProgramId" : 8,
              "mutationOperator" : "MTR",
              "mutationOperatorDescription" : "Mapping Transformation Replacement",
              "mutantCode" : "def tagBestSummarizeGenre(genresTagsCountSorted: RDD[(String, (String, Int))]) = {\n  val genresTagsCountSortedGrouped: RDD[(String, Iterable[(String, Int)])] = genresTagsCountSorted.groupByKey()\n  val genresTagsCountSortedTop5: RDD[(String, List[(String, Int)])] = genresTagsCountSortedGrouped.map { (inputParameter: (String, Iterable[(String, Int)])) => {\n    val originalFunction = ((l: (String, Iterable[(String, Int)])) => (l._1, l._2.toList.sortBy(_._2).reverse.take(5)))(_)\n    val originalValue = originalFunction(inputParameter)\n    (originalValue._1, List[(String, Int)](originalValue._2.head))\n  } }\n  genresTagsCountSortedTop5\n}",
              "originalCode" : "def tagBestSummarizeGenre(genresTagsCountSorted: RDD[(String, (String, Int))]) = {\n    val genresTagsCountSortedGrouped: RDD[(String, Iterable[(String, Int)])] = genresTagsCountSorted.groupByKey()\n    val genresTagsCountSortedTop5: RDD[(String, List[(String, Int)])] = genresTagsCountSortedGrouped.map((l: (String, Iterable[(String, Int)])) => (l._1, l._2.toList.sortBy(_._2).reverse.take(5)))\n    genresTagsCountSortedTop5\n  }",
              "status" : "Killed"
            },
            {
              "id" : 191,
              "originalProgramId" : 8,
              "mutationOperator" : "MTR",
              "mutationOperatorDescription" : "Mapping Transformation Replacement",
              "mutantCode" : "def tagBestSummarizeGenre(genresTagsCountSorted: RDD[(String, (String, Int))]) = {\n  val genresTagsCountSortedGrouped: RDD[(String, Iterable[(String, Int)])] = genresTagsCountSorted.groupByKey()\n  val genresTagsCountSortedTop5: RDD[(String, List[(String, Int)])] = genresTagsCountSortedGrouped.map { (inputParameter: (String, Iterable[(String, Int)])) => {\n    val originalFunction = ((l: (String, Iterable[(String, Int)])) => (l._1, l._2.toList.sortBy(_._2).reverse.take(5)))(_)\n    val originalValue = originalFunction(inputParameter)\n    (originalValue._1, originalValue._2.tail)\n  } }\n  genresTagsCountSortedTop5\n}",
              "originalCode" : "def tagBestSummarizeGenre(genresTagsCountSorted: RDD[(String, (String, Int))]) = {\n    val genresTagsCountSortedGrouped: RDD[(String, Iterable[(String, Int)])] = genresTagsCountSorted.groupByKey()\n    val genresTagsCountSortedTop5: RDD[(String, List[(String, Int)])] = genresTagsCountSortedGrouped.map((l: (String, Iterable[(String, Int)])) => (l._1, l._2.toList.sortBy(_._2).reverse.take(5)))\n    genresTagsCountSortedTop5\n  }",
              "status" : "Killed"
            },
            {
              "id" : 192,
              "originalProgramId" : 8,
              "mutationOperator" : "MTR",
              "mutationOperatorDescription" : "Mapping Transformation Replacement",
              "mutantCode" : "def tagBestSummarizeGenre(genresTagsCountSorted: RDD[(String, (String, Int))]) = {\n  val genresTagsCountSortedGrouped: RDD[(String, Iterable[(String, Int)])] = genresTagsCountSorted.groupByKey()\n  val genresTagsCountSortedTop5: RDD[(String, List[(String, Int)])] = genresTagsCountSortedGrouped.map { (inputParameter: (String, Iterable[(String, Int)])) => {\n    val originalFunction = ((l: (String, Iterable[(String, Int)])) => (l._1, l._2.toList.sortBy(_._2).reverse.take(5)))(_)\n    val originalValue = originalFunction(inputParameter)\n    (originalValue._1, originalValue._2.reverse)\n  } }\n  genresTagsCountSortedTop5\n}",
              "originalCode" : "def tagBestSummarizeGenre(genresTagsCountSorted: RDD[(String, (String, Int))]) = {\n    val genresTagsCountSortedGrouped: RDD[(String, Iterable[(String, Int)])] = genresTagsCountSorted.groupByKey()\n    val genresTagsCountSortedTop5: RDD[(String, List[(String, Int)])] = genresTagsCountSortedGrouped.map((l: (String, Iterable[(String, Int)])) => (l._1, l._2.toList.sortBy(_._2).reverse.take(5)))\n    genresTagsCountSortedTop5\n  }",
              "status" : "Killed"
            },
            {
              "id" : 193,
              "originalProgramId" : 8,
              "mutationOperator" : "MTR",
              "mutationOperatorDescription" : "Mapping Transformation Replacement",
              "mutantCode" : "def tagBestSummarizeGenre(genresTagsCountSorted: RDD[(String, (String, Int))]) = {\n  val genresTagsCountSortedGrouped: RDD[(String, Iterable[(String, Int)])] = genresTagsCountSorted.groupByKey()\n  val genresTagsCountSortedTop5: RDD[(String, List[(String, Int)])] = genresTagsCountSortedGrouped.map { (inputParameter: (String, Iterable[(String, Int)])) => {\n    val originalFunction = ((l: (String, Iterable[(String, Int)])) => (l._1, l._2.toList.sortBy(_._2).reverse.take(5)))(_)\n    val originalValue = originalFunction(inputParameter)\n    (originalValue._1, List[(String, Int)]())\n  } }\n  genresTagsCountSortedTop5\n}",
              "originalCode" : "def tagBestSummarizeGenre(genresTagsCountSorted: RDD[(String, (String, Int))]) = {\n    val genresTagsCountSortedGrouped: RDD[(String, Iterable[(String, Int)])] = genresTagsCountSorted.groupByKey()\n    val genresTagsCountSortedTop5: RDD[(String, List[(String, Int)])] = genresTagsCountSortedGrouped.map((l: (String, Iterable[(String, Int)])) => (l._1, l._2.toList.sortBy(_._2).reverse.take(5)))\n    genresTagsCountSortedTop5\n  }",
              "status" : "Killed"
            },
            {
              "id" : 194,
              "originalProgramId" : 8,
              "mutationOperator" : "DTI",
              "mutationOperatorDescription" : "Distinct Transformation Insertion",
              "mutantCode" : "def tagBestSummarizeGenre(genresTagsCountSorted: RDD[(String, (String, Int))]) = {\n  val genresTagsCountSortedGrouped: RDD[(String, Iterable[(String, Int)])] = genresTagsCountSorted.groupByKey().distinct()\n  val genresTagsCountSortedTop5: RDD[(String, List[(String, Int)])] = genresTagsCountSortedGrouped.map { (l: (String, Iterable[(String, Int)])) => (l._1, l._2.toList.sortBy(_._2).reverse.take(5)) }\n  genresTagsCountSortedTop5\n}",
              "originalCode" : "def tagBestSummarizeGenre(genresTagsCountSorted: RDD[(String, (String, Int))]) = {\n    val genresTagsCountSortedGrouped: RDD[(String, Iterable[(String, Int)])] = genresTagsCountSorted.groupByKey()\n    val genresTagsCountSortedTop5: RDD[(String, List[(String, Int)])] = genresTagsCountSortedGrouped.map((l: (String, Iterable[(String, Int)])) => (l._1, l._2.toList.sortBy(_._2).reverse.take(5)))\n    genresTagsCountSortedTop5\n  }",
              "status" : "Equivalent"
            },
            {
              "id" : 195,
              "originalProgramId" : 8,
              "mutationOperator" : "DTI",
              "mutationOperatorDescription" : "Distinct Transformation Insertion",
              "mutantCode" : "def tagBestSummarizeGenre(genresTagsCountSorted: RDD[(String, (String, Int))]) = {\n  val genresTagsCountSortedGrouped: RDD[(String, Iterable[(String, Int)])] = genresTagsCountSorted.groupByKey()\n  val genresTagsCountSortedTop5: RDD[(String, List[(String, Int)])] = genresTagsCountSortedGrouped.map { (l: (String, Iterable[(String, Int)])) => (l._1, l._2.toList.sortBy(_._2).reverse.take(5)) }.distinct()\n  genresTagsCountSortedTop5\n}",
              "originalCode" : "def tagBestSummarizeGenre(genresTagsCountSorted: RDD[(String, (String, Int))]) = {\n    val genresTagsCountSortedGrouped: RDD[(String, Iterable[(String, Int)])] = genresTagsCountSorted.groupByKey()\n    val genresTagsCountSortedTop5: RDD[(String, List[(String, Int)])] = genresTagsCountSortedGrouped.map((l: (String, Iterable[(String, Int)])) => (l._1, l._2.toList.sortBy(_._2).reverse.take(5)))\n    genresTagsCountSortedTop5\n  }",
              "status" : "Equivalent"
            }
          ],
          "removedMutants" : [
          ],
          "mutationOperatorsMetrics" : {
            "totalMutantsPerOperator" : {
              "FTD" : 0,
              "JTR" : 0,
              "UTR" : 0,
              "MTR" : 5,
              "UTD" : 0,
              "OTD" : 0,
              "BTR" : 0,
              "STR" : 0,
              "BTS" : 0,
              "ATR" : 0,
              "OTI" : 0,
              "DTI" : 2,
              "DTD" : 0,
              "NFTP" : 0,
              "UTS" : 0
            },
            "totalKilledMutantsPerOperator" : {
              "FTD" : 0,
              "JTR" : 0,
              "UTR" : 0,
              "MTR" : 5,
              "UTD" : 0,
              "OTD" : 0,
              "BTR" : 0,
              "STR" : 0,
              "BTS" : 0,
              "ATR" : 0,
              "OTI" : 0,
              "DTI" : 0,
              "DTD" : 0,
              "NFTP" : 0,
              "UTS" : 0
            },
            "totalLivedMutantsPerOperator" : {
              "FTD" : 0,
              "JTR" : 0,
              "UTR" : 0,
              "MTR" : 0,
              "UTD" : 0,
              "OTD" : 0,
              "BTR" : 0,
              "STR" : 0,
              "BTS" : 0,
              "ATR" : 0,
              "OTI" : 0,
              "DTI" : 0,
              "DTD" : 0,
              "NFTP" : 0,
              "UTS" : 0
            },
            "totalEquivalentMutantsPerOperator" : {
              "FTD" : 0,
              "JTR" : 0,
              "UTR" : 0,
              "MTR" : 0,
              "UTD" : 0,
              "OTD" : 0,
              "BTR" : 0,
              "STR" : 0,
              "BTS" : 0,
              "ATR" : 0,
              "OTI" : 0,
              "DTI" : 2,
              "DTD" : 0,
              "NFTP" : 0,
              "UTS" : 0
            },
            "totalErrorMutantsPerOperator" : {
              "FTD" : 0,
              "JTR" : 0,
              "UTR" : 0,
              "MTR" : 0,
              "UTD" : 0,
              "OTD" : 0,
              "BTR" : 0,
              "STR" : 0,
              "BTS" : 0,
              "ATR" : 0,
              "OTI" : 0,
              "DTI" : 0,
              "DTD" : 0,
              "NFTP" : 0,
              "UTS" : 0
            },
            "totalRemovedMutantsPerOperator" : {
              "FTD" : 0,
              "JTR" : 0,
              "UTR" : 0,
              "MTR" : 0,
              "UTD" : 0,
              "OTD" : 0,
              "BTR" : 0,
              "STR" : 0,
              "BTS" : 0,
              "ATR" : 0,
              "OTI" : 0,
              "DTI" : 0,
              "DTD" : 0,
              "NFTP" : 0,
              "UTS" : 0
            },
            "descriptionPerOperator" : {
              "FTD" : "Filter Transformation Deletion",
              "JTR" : "Join Transformation Replacement",
              "UTR" : "Unary Transformation Replacement",
              "MTR" : "Mapping Transformation Replacement",
              "UTD" : "Unary Transformation Deletion",
              "OTD" : "Order Transformation Deletion",
              "BTR" : "Binary Transformation Replacement",
              "STR" : "Set Transformation Replacement",
              "BTS" : "Binary Transformation Swap",
              "ATR" : "Aggregation Transformation Replacement",
              "OTI" : "Order Transformation Inversion",
              "DTI" : "Distinct Transformation Insertion",
              "DTD" : "Distinct Transformation Deletion",
              "NFTP" : "Negation of Filter Transformation Predicate",
              "UTS" : "Unary Transformation Swap"
            }
          },
          "totalDatasets" : 3,
          "totalTransformations" : 2,
          "totalMutants" : 7,
          "totalKilledMutants" : 5,
          "totalLivedMutants" : 0,
          "totalEquivalentMutants" : 2,
          "totalErrorMutants" : 0,
          "totalRemovedMutants" : 0,
          "mutationScore" : 1.0
        }
      ],
      "mutants" : [
        {
          "id" : 1,
          "originalProgramId" : 1,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def parseRDDs(ratingsCSV: RDD[String], moviesCSV: RDD[String], tagsCSV: RDD[String]): (RDD[Rating], RDD[Movie], RDD[Tag]) = {\n  val ratings: RDD[Rating] = ratingsCSV.flatMap { (inputParameter: String) => {\n    val originalFunction = parseRatings(_)\n    val originalValue = originalFunction(inputParameter)\n    originalValue.headOption\n  } }\n  val movies: RDD[Movie] = moviesCSV.flatMap(parseMovies)\n  val tags: RDD[Tag] = tagsCSV.flatMap(parseTags)\n  (ratings, movies, tags)\n}",
          "originalCode" : "def parseRDDs(ratingsCSV: RDD[String], moviesCSV: RDD[String], tagsCSV: RDD[String]): (RDD[Rating], RDD[Movie], RDD[Tag]) = {\n    val ratings: RDD[Rating] = ratingsCSV.flatMap(parseRatings)\n    val movies: RDD[Movie] = moviesCSV.flatMap(parseMovies)\n    val tags: RDD[Tag] = tagsCSV.flatMap(parseTags)\n    (ratings, movies, tags)\n  }",
          "status" : "Equivalent"
        },
        {
          "id" : 2,
          "originalProgramId" : 1,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def parseRDDs(ratingsCSV: RDD[String], moviesCSV: RDD[String], tagsCSV: RDD[String]): (RDD[Rating], RDD[Movie], RDD[Tag]) = {\n  val ratings: RDD[Rating] = ratingsCSV.flatMap { (inputParameter: String) => {\n    val originalFunction = parseRatings(_)\n    val originalValue = originalFunction(inputParameter)\n    originalValue.toList.tail\n  } }\n  val movies: RDD[Movie] = moviesCSV.flatMap(parseMovies)\n  val tags: RDD[Tag] = tagsCSV.flatMap(parseTags)\n  (ratings, movies, tags)\n}",
          "originalCode" : "def parseRDDs(ratingsCSV: RDD[String], moviesCSV: RDD[String], tagsCSV: RDD[String]): (RDD[Rating], RDD[Movie], RDD[Tag]) = {\n    val ratings: RDD[Rating] = ratingsCSV.flatMap(parseRatings)\n    val movies: RDD[Movie] = moviesCSV.flatMap(parseMovies)\n    val tags: RDD[Tag] = tagsCSV.flatMap(parseTags)\n    (ratings, movies, tags)\n  }",
          "status" : "Killed"
        },
        {
          "id" : 3,
          "originalProgramId" : 1,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def parseRDDs(ratingsCSV: RDD[String], moviesCSV: RDD[String], tagsCSV: RDD[String]): (RDD[Rating], RDD[Movie], RDD[Tag]) = {\n  val ratings: RDD[Rating] = ratingsCSV.flatMap { (inputParameter: String) => {\n    val originalFunction = parseRatings(_)\n    val originalValue = originalFunction(inputParameter)\n    originalValue.toList.reverse\n  } }\n  val movies: RDD[Movie] = moviesCSV.flatMap(parseMovies)\n  val tags: RDD[Tag] = tagsCSV.flatMap(parseTags)\n  (ratings, movies, tags)\n}",
          "originalCode" : "def parseRDDs(ratingsCSV: RDD[String], moviesCSV: RDD[String], tagsCSV: RDD[String]): (RDD[Rating], RDD[Movie], RDD[Tag]) = {\n    val ratings: RDD[Rating] = ratingsCSV.flatMap(parseRatings)\n    val movies: RDD[Movie] = moviesCSV.flatMap(parseMovies)\n    val tags: RDD[Tag] = tagsCSV.flatMap(parseTags)\n    (ratings, movies, tags)\n  }",
          "status" : "Equivalent"
        },
        {
          "id" : 4,
          "originalProgramId" : 1,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def parseRDDs(ratingsCSV: RDD[String], moviesCSV: RDD[String], tagsCSV: RDD[String]): (RDD[Rating], RDD[Movie], RDD[Tag]) = {\n  val ratings: RDD[Rating] = ratingsCSV.flatMap { (inputParameter: String) => {\n    val originalFunction = parseRatings(_)\n    val originalValue = originalFunction(inputParameter)\n    List[Rating]()\n  } }\n  val movies: RDD[Movie] = moviesCSV.flatMap(parseMovies)\n  val tags: RDD[Tag] = tagsCSV.flatMap(parseTags)\n  (ratings, movies, tags)\n}",
          "originalCode" : "def parseRDDs(ratingsCSV: RDD[String], moviesCSV: RDD[String], tagsCSV: RDD[String]): (RDD[Rating], RDD[Movie], RDD[Tag]) = {\n    val ratings: RDD[Rating] = ratingsCSV.flatMap(parseRatings)\n    val movies: RDD[Movie] = moviesCSV.flatMap(parseMovies)\n    val tags: RDD[Tag] = tagsCSV.flatMap(parseTags)\n    (ratings, movies, tags)\n  }",
          "status" : "Killed"
        },
        {
          "id" : 5,
          "originalProgramId" : 1,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def parseRDDs(ratingsCSV: RDD[String], moviesCSV: RDD[String], tagsCSV: RDD[String]): (RDD[Rating], RDD[Movie], RDD[Tag]) = {\n  val ratings: RDD[Rating] = ratingsCSV.flatMap(parseRatings)\n  val movies: RDD[Movie] = moviesCSV.flatMap { (inputParameter: String) => {\n    val originalFunction = parseMovies(_)\n    val originalValue = originalFunction(inputParameter)\n    originalValue.headOption\n  } }\n  val tags: RDD[Tag] = tagsCSV.flatMap(parseTags)\n  (ratings, movies, tags)\n}",
          "originalCode" : "def parseRDDs(ratingsCSV: RDD[String], moviesCSV: RDD[String], tagsCSV: RDD[String]): (RDD[Rating], RDD[Movie], RDD[Tag]) = {\n    val ratings: RDD[Rating] = ratingsCSV.flatMap(parseRatings)\n    val movies: RDD[Movie] = moviesCSV.flatMap(parseMovies)\n    val tags: RDD[Tag] = tagsCSV.flatMap(parseTags)\n    (ratings, movies, tags)\n  }",
          "status" : "Equivalent"
        },
        {
          "id" : 6,
          "originalProgramId" : 1,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def parseRDDs(ratingsCSV: RDD[String], moviesCSV: RDD[String], tagsCSV: RDD[String]): (RDD[Rating], RDD[Movie], RDD[Tag]) = {\n  val ratings: RDD[Rating] = ratingsCSV.flatMap(parseRatings)\n  val movies: RDD[Movie] = moviesCSV.flatMap { (inputParameter: String) => {\n    val originalFunction = parseMovies(_)\n    val originalValue = originalFunction(inputParameter)\n    originalValue.toList.tail\n  } }\n  val tags: RDD[Tag] = tagsCSV.flatMap(parseTags)\n  (ratings, movies, tags)\n}",
          "originalCode" : "def parseRDDs(ratingsCSV: RDD[String], moviesCSV: RDD[String], tagsCSV: RDD[String]): (RDD[Rating], RDD[Movie], RDD[Tag]) = {\n    val ratings: RDD[Rating] = ratingsCSV.flatMap(parseRatings)\n    val movies: RDD[Movie] = moviesCSV.flatMap(parseMovies)\n    val tags: RDD[Tag] = tagsCSV.flatMap(parseTags)\n    (ratings, movies, tags)\n  }",
          "status" : "Killed"
        },
        {
          "id" : 7,
          "originalProgramId" : 1,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def parseRDDs(ratingsCSV: RDD[String], moviesCSV: RDD[String], tagsCSV: RDD[String]): (RDD[Rating], RDD[Movie], RDD[Tag]) = {\n  val ratings: RDD[Rating] = ratingsCSV.flatMap(parseRatings)\n  val movies: RDD[Movie] = moviesCSV.flatMap { (inputParameter: String) => {\n    val originalFunction = parseMovies(_)\n    val originalValue = originalFunction(inputParameter)\n    originalValue.toList.reverse\n  } }\n  val tags: RDD[Tag] = tagsCSV.flatMap(parseTags)\n  (ratings, movies, tags)\n}",
          "originalCode" : "def parseRDDs(ratingsCSV: RDD[String], moviesCSV: RDD[String], tagsCSV: RDD[String]): (RDD[Rating], RDD[Movie], RDD[Tag]) = {\n    val ratings: RDD[Rating] = ratingsCSV.flatMap(parseRatings)\n    val movies: RDD[Movie] = moviesCSV.flatMap(parseMovies)\n    val tags: RDD[Tag] = tagsCSV.flatMap(parseTags)\n    (ratings, movies, tags)\n  }",
          "status" : "Equivalent"
        },
        {
          "id" : 8,
          "originalProgramId" : 1,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def parseRDDs(ratingsCSV: RDD[String], moviesCSV: RDD[String], tagsCSV: RDD[String]): (RDD[Rating], RDD[Movie], RDD[Tag]) = {\n  val ratings: RDD[Rating] = ratingsCSV.flatMap(parseRatings)\n  val movies: RDD[Movie] = moviesCSV.flatMap { (inputParameter: String) => {\n    val originalFunction = parseMovies(_)\n    val originalValue = originalFunction(inputParameter)\n    List[Movie]()\n  } }\n  val tags: RDD[Tag] = tagsCSV.flatMap(parseTags)\n  (ratings, movies, tags)\n}",
          "originalCode" : "def parseRDDs(ratingsCSV: RDD[String], moviesCSV: RDD[String], tagsCSV: RDD[String]): (RDD[Rating], RDD[Movie], RDD[Tag]) = {\n    val ratings: RDD[Rating] = ratingsCSV.flatMap(parseRatings)\n    val movies: RDD[Movie] = moviesCSV.flatMap(parseMovies)\n    val tags: RDD[Tag] = tagsCSV.flatMap(parseTags)\n    (ratings, movies, tags)\n  }",
          "status" : "Killed"
        },
        {
          "id" : 9,
          "originalProgramId" : 1,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def parseRDDs(ratingsCSV: RDD[String], moviesCSV: RDD[String], tagsCSV: RDD[String]): (RDD[Rating], RDD[Movie], RDD[Tag]) = {\n  val ratings: RDD[Rating] = ratingsCSV.flatMap(parseRatings)\n  val movies: RDD[Movie] = moviesCSV.flatMap(parseMovies)\n  val tags: RDD[Tag] = tagsCSV.flatMap { (inputParameter: String) => {\n    val originalFunction = parseTags(_)\n    val originalValue = originalFunction(inputParameter)\n    originalValue.headOption\n  } }\n  (ratings, movies, tags)\n}",
          "originalCode" : "def parseRDDs(ratingsCSV: RDD[String], moviesCSV: RDD[String], tagsCSV: RDD[String]): (RDD[Rating], RDD[Movie], RDD[Tag]) = {\n    val ratings: RDD[Rating] = ratingsCSV.flatMap(parseRatings)\n    val movies: RDD[Movie] = moviesCSV.flatMap(parseMovies)\n    val tags: RDD[Tag] = tagsCSV.flatMap(parseTags)\n    (ratings, movies, tags)\n  }",
          "status" : "Equivalent"
        },
        {
          "id" : 10,
          "originalProgramId" : 1,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def parseRDDs(ratingsCSV: RDD[String], moviesCSV: RDD[String], tagsCSV: RDD[String]): (RDD[Rating], RDD[Movie], RDD[Tag]) = {\n  val ratings: RDD[Rating] = ratingsCSV.flatMap(parseRatings)\n  val movies: RDD[Movie] = moviesCSV.flatMap(parseMovies)\n  val tags: RDD[Tag] = tagsCSV.flatMap { (inputParameter: String) => {\n    val originalFunction = parseTags(_)\n    val originalValue = originalFunction(inputParameter)\n    originalValue.toList.tail\n  } }\n  (ratings, movies, tags)\n}",
          "originalCode" : "def parseRDDs(ratingsCSV: RDD[String], moviesCSV: RDD[String], tagsCSV: RDD[String]): (RDD[Rating], RDD[Movie], RDD[Tag]) = {\n    val ratings: RDD[Rating] = ratingsCSV.flatMap(parseRatings)\n    val movies: RDD[Movie] = moviesCSV.flatMap(parseMovies)\n    val tags: RDD[Tag] = tagsCSV.flatMap(parseTags)\n    (ratings, movies, tags)\n  }",
          "status" : "Killed"
        },
        {
          "id" : 11,
          "originalProgramId" : 1,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def parseRDDs(ratingsCSV: RDD[String], moviesCSV: RDD[String], tagsCSV: RDD[String]): (RDD[Rating], RDD[Movie], RDD[Tag]) = {\n  val ratings: RDD[Rating] = ratingsCSV.flatMap(parseRatings)\n  val movies: RDD[Movie] = moviesCSV.flatMap(parseMovies)\n  val tags: RDD[Tag] = tagsCSV.flatMap { (inputParameter: String) => {\n    val originalFunction = parseTags(_)\n    val originalValue = originalFunction(inputParameter)\n    originalValue.toList.reverse\n  } }\n  (ratings, movies, tags)\n}",
          "originalCode" : "def parseRDDs(ratingsCSV: RDD[String], moviesCSV: RDD[String], tagsCSV: RDD[String]): (RDD[Rating], RDD[Movie], RDD[Tag]) = {\n    val ratings: RDD[Rating] = ratingsCSV.flatMap(parseRatings)\n    val movies: RDD[Movie] = moviesCSV.flatMap(parseMovies)\n    val tags: RDD[Tag] = tagsCSV.flatMap(parseTags)\n    (ratings, movies, tags)\n  }",
          "status" : "Equivalent"
        },
        {
          "id" : 12,
          "originalProgramId" : 1,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def parseRDDs(ratingsCSV: RDD[String], moviesCSV: RDD[String], tagsCSV: RDD[String]): (RDD[Rating], RDD[Movie], RDD[Tag]) = {\n  val ratings: RDD[Rating] = ratingsCSV.flatMap(parseRatings)\n  val movies: RDD[Movie] = moviesCSV.flatMap(parseMovies)\n  val tags: RDD[Tag] = tagsCSV.flatMap { (inputParameter: String) => {\n    val originalFunction = parseTags(_)\n    val originalValue = originalFunction(inputParameter)\n    List[Tag]()\n  } }\n  (ratings, movies, tags)\n}",
          "originalCode" : "def parseRDDs(ratingsCSV: RDD[String], moviesCSV: RDD[String], tagsCSV: RDD[String]): (RDD[Rating], RDD[Movie], RDD[Tag]) = {\n    val ratings: RDD[Rating] = ratingsCSV.flatMap(parseRatings)\n    val movies: RDD[Movie] = moviesCSV.flatMap(parseMovies)\n    val tags: RDD[Tag] = tagsCSV.flatMap(parseTags)\n    (ratings, movies, tags)\n  }",
          "status" : "Killed"
        },
        {
          "id" : 13,
          "originalProgramId" : 1,
          "mutationOperator" : "DTI",
          "mutationOperatorDescription" : "Distinct Transformation Insertion",
          "mutantCode" : "def parseRDDs(ratingsCSV: RDD[String], moviesCSV: RDD[String], tagsCSV: RDD[String]): (RDD[Rating], RDD[Movie], RDD[Tag]) = {\n  val ratings: RDD[Rating] = ratingsCSV.flatMap(parseRatings).distinct()\n  val movies: RDD[Movie] = moviesCSV.flatMap(parseMovies)\n  val tags: RDD[Tag] = tagsCSV.flatMap(parseTags)\n  (ratings, movies, tags)\n}",
          "originalCode" : "def parseRDDs(ratingsCSV: RDD[String], moviesCSV: RDD[String], tagsCSV: RDD[String]): (RDD[Rating], RDD[Movie], RDD[Tag]) = {\n    val ratings: RDD[Rating] = ratingsCSV.flatMap(parseRatings)\n    val movies: RDD[Movie] = moviesCSV.flatMap(parseMovies)\n    val tags: RDD[Tag] = tagsCSV.flatMap(parseTags)\n    (ratings, movies, tags)\n  }",
          "status" : "Lived"
        },
        {
          "id" : 14,
          "originalProgramId" : 1,
          "mutationOperator" : "DTI",
          "mutationOperatorDescription" : "Distinct Transformation Insertion",
          "mutantCode" : "def parseRDDs(ratingsCSV: RDD[String], moviesCSV: RDD[String], tagsCSV: RDD[String]): (RDD[Rating], RDD[Movie], RDD[Tag]) = {\n  val ratings: RDD[Rating] = ratingsCSV.flatMap(parseRatings)\n  val movies: RDD[Movie] = moviesCSV.flatMap(parseMovies).distinct()\n  val tags: RDD[Tag] = tagsCSV.flatMap(parseTags)\n  (ratings, movies, tags)\n}",
          "originalCode" : "def parseRDDs(ratingsCSV: RDD[String], moviesCSV: RDD[String], tagsCSV: RDD[String]): (RDD[Rating], RDD[Movie], RDD[Tag]) = {\n    val ratings: RDD[Rating] = ratingsCSV.flatMap(parseRatings)\n    val movies: RDD[Movie] = moviesCSV.flatMap(parseMovies)\n    val tags: RDD[Tag] = tagsCSV.flatMap(parseTags)\n    (ratings, movies, tags)\n  }",
          "status" : "Lived"
        },
        {
          "id" : 15,
          "originalProgramId" : 1,
          "mutationOperator" : "DTI",
          "mutationOperatorDescription" : "Distinct Transformation Insertion",
          "mutantCode" : "def parseRDDs(ratingsCSV: RDD[String], moviesCSV: RDD[String], tagsCSV: RDD[String]): (RDD[Rating], RDD[Movie], RDD[Tag]) = {\n  val ratings: RDD[Rating] = ratingsCSV.flatMap(parseRatings)\n  val movies: RDD[Movie] = moviesCSV.flatMap(parseMovies)\n  val tags: RDD[Tag] = tagsCSV.flatMap(parseTags).distinct()\n  (ratings, movies, tags)\n}",
          "originalCode" : "def parseRDDs(ratingsCSV: RDD[String], moviesCSV: RDD[String], tagsCSV: RDD[String]): (RDD[Rating], RDD[Movie], RDD[Tag]) = {\n    val ratings: RDD[Rating] = ratingsCSV.flatMap(parseRatings)\n    val movies: RDD[Movie] = moviesCSV.flatMap(parseMovies)\n    val tags: RDD[Tag] = tagsCSV.flatMap(parseTags)\n    (ratings, movies, tags)\n  }",
          "status" : "Lived"
        },
        {
          "id" : 16,
          "originalProgramId" : 2,
          "mutationOperator" : "UTS",
          "mutationOperatorDescription" : "Unary Transformation Swap",
          "mutantCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n  val yearTuple: RDD[(Int, Int)] = movies.map { (m: Movie) => (m.year, 1) }\n  val moviesPerYear: RDD[(Int, Int)] = yearTuple.map { (t: (Int, Int)) => (t._2, t._1) }\n  val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.reduceByKey { (a: Int, b: Int) => a + b }\n  val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n  moviesPerYearInverseSorted\n}",
          "originalCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n    val yearTuple: RDD[(Int, Int)] = movies.map((m: Movie) => (m.year, 1))\n    val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey((a: Int, b: Int) => a + b)\n    val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map((t: (Int, Int)) => (t._2, t._1))\n    val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n    moviesPerYearInverseSorted\n  }",
          "status" : "Killed"
        },
        {
          "id" : 17,
          "originalProgramId" : 2,
          "mutationOperator" : "UTS",
          "mutationOperatorDescription" : "Unary Transformation Swap",
          "mutantCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n  val yearTuple: RDD[(Int, Int)] = movies.map { (m: Movie) => (m.year, 1) }\n  val moviesPerYear: RDD[(Int, Int)] = yearTuple.sortByKey(false)\n  val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map { (t: (Int, Int)) => (t._2, t._1) }\n  val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.reduceByKey { (a: Int, b: Int) => a + b }\n  moviesPerYearInverseSorted\n}",
          "originalCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n    val yearTuple: RDD[(Int, Int)] = movies.map((m: Movie) => (m.year, 1))\n    val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey((a: Int, b: Int) => a + b)\n    val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map((t: (Int, Int)) => (t._2, t._1))\n    val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n    moviesPerYearInverseSorted\n  }",
          "status" : "Killed"
        },
        {
          "id" : 18,
          "originalProgramId" : 2,
          "mutationOperator" : "UTS",
          "mutationOperatorDescription" : "Unary Transformation Swap",
          "mutantCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n  val yearTuple: RDD[(Int, Int)] = movies.map { (m: Movie) => (m.year, 1) }\n  val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey { (a: Int, b: Int) => a + b }\n  val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.sortByKey(false)\n  val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.map { (t: (Int, Int)) => (t._2, t._1) }\n  moviesPerYearInverseSorted\n}",
          "originalCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n    val yearTuple: RDD[(Int, Int)] = movies.map((m: Movie) => (m.year, 1))\n    val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey((a: Int, b: Int) => a + b)\n    val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map((t: (Int, Int)) => (t._2, t._1))\n    val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n    moviesPerYearInverseSorted\n  }",
          "status" : "Lived"
        },
        {
          "id" : 19,
          "originalProgramId" : 2,
          "mutationOperator" : "UTR",
          "mutationOperatorDescription" : "Unary Transformation Replacement",
          "mutantCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n  val yearTuple: RDD[(Int, Int)] = movies.map { (m: Movie) => (m.year, 1) }\n  val moviesPerYear: RDD[(Int, Int)] = yearTuple.map { (t: (Int, Int)) => (t._2, t._1) }\n  val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map { (t: (Int, Int)) => (t._2, t._1) }\n  val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n  moviesPerYearInverseSorted\n}",
          "originalCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n    val yearTuple: RDD[(Int, Int)] = movies.map((m: Movie) => (m.year, 1))\n    val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey((a: Int, b: Int) => a + b)\n    val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map((t: (Int, Int)) => (t._2, t._1))\n    val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n    moviesPerYearInverseSorted\n  }",
          "status" : "Killed"
        },
        {
          "id" : 20,
          "originalProgramId" : 2,
          "mutationOperator" : "UTR",
          "mutationOperatorDescription" : "Unary Transformation Replacement",
          "mutantCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n  val yearTuple: RDD[(Int, Int)] = movies.map { (m: Movie) => (m.year, 1) }\n  val moviesPerYear: RDD[(Int, Int)] = yearTuple.sortByKey(false)\n  val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map { (t: (Int, Int)) => (t._2, t._1) }\n  val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n  moviesPerYearInverseSorted\n}",
          "originalCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n    val yearTuple: RDD[(Int, Int)] = movies.map((m: Movie) => (m.year, 1))\n    val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey((a: Int, b: Int) => a + b)\n    val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map((t: (Int, Int)) => (t._2, t._1))\n    val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n    moviesPerYearInverseSorted\n  }",
          "status" : "Killed"
        },
        {
          "id" : 21,
          "originalProgramId" : 2,
          "mutationOperator" : "UTR",
          "mutationOperatorDescription" : "Unary Transformation Replacement",
          "mutantCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n  val yearTuple: RDD[(Int, Int)] = movies.map { (m: Movie) => (m.year, 1) }\n  val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey { (a: Int, b: Int) => a + b }\n  val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.reduceByKey { (a: Int, b: Int) => a + b }\n  val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n  moviesPerYearInverseSorted\n}",
          "originalCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n    val yearTuple: RDD[(Int, Int)] = movies.map((m: Movie) => (m.year, 1))\n    val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey((a: Int, b: Int) => a + b)\n    val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map((t: (Int, Int)) => (t._2, t._1))\n    val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n    moviesPerYearInverseSorted\n  }",
          "status" : "Killed"
        },
        {
          "id" : 22,
          "originalProgramId" : 2,
          "mutationOperator" : "UTR",
          "mutationOperatorDescription" : "Unary Transformation Replacement",
          "mutantCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n  val yearTuple: RDD[(Int, Int)] = movies.map { (m: Movie) => (m.year, 1) }\n  val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey { (a: Int, b: Int) => a + b }\n  val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.sortByKey(false)\n  val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n  moviesPerYearInverseSorted\n}",
          "originalCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n    val yearTuple: RDD[(Int, Int)] = movies.map((m: Movie) => (m.year, 1))\n    val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey((a: Int, b: Int) => a + b)\n    val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map((t: (Int, Int)) => (t._2, t._1))\n    val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n    moviesPerYearInverseSorted\n  }",
          "status" : "Killed"
        },
        {
          "id" : 23,
          "originalProgramId" : 2,
          "mutationOperator" : "UTR",
          "mutationOperatorDescription" : "Unary Transformation Replacement",
          "mutantCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n  val yearTuple: RDD[(Int, Int)] = movies.map { (m: Movie) => (m.year, 1) }\n  val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey { (a: Int, b: Int) => a + b }\n  val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map { (t: (Int, Int)) => (t._2, t._1) }\n  val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.reduceByKey { (a: Int, b: Int) => a + b }\n  moviesPerYearInverseSorted\n}",
          "originalCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n    val yearTuple: RDD[(Int, Int)] = movies.map((m: Movie) => (m.year, 1))\n    val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey((a: Int, b: Int) => a + b)\n    val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map((t: (Int, Int)) => (t._2, t._1))\n    val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n    moviesPerYearInverseSorted\n  }",
          "status" : "Lived"
        },
        {
          "id" : 24,
          "originalProgramId" : 2,
          "mutationOperator" : "UTR",
          "mutationOperatorDescription" : "Unary Transformation Replacement",
          "mutantCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n  val yearTuple: RDD[(Int, Int)] = movies.map { (m: Movie) => (m.year, 1) }\n  val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey { (a: Int, b: Int) => a + b }\n  val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map { (t: (Int, Int)) => (t._2, t._1) }\n  val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.map { (t: (Int, Int)) => (t._2, t._1) }\n  moviesPerYearInverseSorted\n}",
          "originalCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n    val yearTuple: RDD[(Int, Int)] = movies.map((m: Movie) => (m.year, 1))\n    val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey((a: Int, b: Int) => a + b)\n    val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map((t: (Int, Int)) => (t._2, t._1))\n    val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n    moviesPerYearInverseSorted\n  }",
          "status" : "Killed"
        },
        {
          "id" : 25,
          "originalProgramId" : 2,
          "mutationOperator" : "UTD",
          "mutationOperatorDescription" : "Unary Transformation Deletion",
          "mutantCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n  val yearTuple: RDD[(Int, Int)] = movies.map { (m: Movie) => (m.year, 1) }\n  val moviesPerYear: RDD[(Int, Int)] = yearTuple\n  val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map { (t: (Int, Int)) => (t._2, t._1) }\n  val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n  moviesPerYearInverseSorted\n}",
          "originalCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n    val yearTuple: RDD[(Int, Int)] = movies.map((m: Movie) => (m.year, 1))\n    val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey((a: Int, b: Int) => a + b)\n    val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map((t: (Int, Int)) => (t._2, t._1))\n    val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n    moviesPerYearInverseSorted\n  }",
          "status" : "Killed"
        },
        {
          "id" : 26,
          "originalProgramId" : 2,
          "mutationOperator" : "UTD",
          "mutationOperatorDescription" : "Unary Transformation Deletion",
          "mutantCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n  val yearTuple: RDD[(Int, Int)] = movies.map { (m: Movie) => (m.year, 1) }\n  val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey { (a: Int, b: Int) => a + b }\n  val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear\n  val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n  moviesPerYearInverseSorted\n}",
          "originalCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n    val yearTuple: RDD[(Int, Int)] = movies.map((m: Movie) => (m.year, 1))\n    val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey((a: Int, b: Int) => a + b)\n    val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map((t: (Int, Int)) => (t._2, t._1))\n    val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n    moviesPerYearInverseSorted\n  }",
          "status" : "Killed"
        },
        {
          "id" : 27,
          "originalProgramId" : 2,
          "mutationOperator" : "UTD",
          "mutationOperatorDescription" : "Unary Transformation Deletion",
          "mutantCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n  val yearTuple: RDD[(Int, Int)] = movies.map { (m: Movie) => (m.year, 1) }\n  val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey { (a: Int, b: Int) => a + b }\n  val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map { (t: (Int, Int)) => (t._2, t._1) }\n  val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse\n  moviesPerYearInverseSorted\n}",
          "originalCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n    val yearTuple: RDD[(Int, Int)] = movies.map((m: Movie) => (m.year, 1))\n    val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey((a: Int, b: Int) => a + b)\n    val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map((t: (Int, Int)) => (t._2, t._1))\n    val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n    moviesPerYearInverseSorted\n  }",
          "status" : "Lived"
        },
        {
          "id" : 28,
          "originalProgramId" : 2,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n  val yearTuple: RDD[(Int, Int)] = movies.map { (inputParameter: Movie) => {\n    val originalFunction = ((m: Movie) => (m.year, 1))(_)\n    val originalValue = originalFunction(inputParameter)\n    (0, originalValue._2)\n  } }\n  val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey { (a: Int, b: Int) => a + b }\n  val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map { (t: (Int, Int)) => (t._2, t._1) }\n  val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n  moviesPerYearInverseSorted\n}",
          "originalCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n    val yearTuple: RDD[(Int, Int)] = movies.map((m: Movie) => (m.year, 1))\n    val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey((a: Int, b: Int) => a + b)\n    val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map((t: (Int, Int)) => (t._2, t._1))\n    val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n    moviesPerYearInverseSorted\n  }",
          "status" : "Killed"
        },
        {
          "id" : 29,
          "originalProgramId" : 2,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n  val yearTuple: RDD[(Int, Int)] = movies.map { (inputParameter: Movie) => {\n    val originalFunction = ((m: Movie) => (m.year, 1))(_)\n    val originalValue = originalFunction(inputParameter)\n    (1, originalValue._2)\n  } }\n  val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey { (a: Int, b: Int) => a + b }\n  val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map { (t: (Int, Int)) => (t._2, t._1) }\n  val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n  moviesPerYearInverseSorted\n}",
          "originalCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n    val yearTuple: RDD[(Int, Int)] = movies.map((m: Movie) => (m.year, 1))\n    val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey((a: Int, b: Int) => a + b)\n    val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map((t: (Int, Int)) => (t._2, t._1))\n    val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n    moviesPerYearInverseSorted\n  }",
          "status" : "Killed"
        },
        {
          "id" : 30,
          "originalProgramId" : 2,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n  val yearTuple: RDD[(Int, Int)] = movies.map { (inputParameter: Movie) => {\n    val originalFunction = ((m: Movie) => (m.year, 1))(_)\n    val originalValue = originalFunction(inputParameter)\n    (Int.MaxValue, originalValue._2)\n  } }\n  val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey { (a: Int, b: Int) => a + b }\n  val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map { (t: (Int, Int)) => (t._2, t._1) }\n  val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n  moviesPerYearInverseSorted\n}",
          "originalCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n    val yearTuple: RDD[(Int, Int)] = movies.map((m: Movie) => (m.year, 1))\n    val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey((a: Int, b: Int) => a + b)\n    val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map((t: (Int, Int)) => (t._2, t._1))\n    val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n    moviesPerYearInverseSorted\n  }",
          "status" : "Killed"
        },
        {
          "id" : 31,
          "originalProgramId" : 2,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n  val yearTuple: RDD[(Int, Int)] = movies.map { (inputParameter: Movie) => {\n    val originalFunction = ((m: Movie) => (m.year, 1))(_)\n    val originalValue = originalFunction(inputParameter)\n    (Int.MinValue, originalValue._2)\n  } }\n  val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey { (a: Int, b: Int) => a + b }\n  val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map { (t: (Int, Int)) => (t._2, t._1) }\n  val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n  moviesPerYearInverseSorted\n}",
          "originalCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n    val yearTuple: RDD[(Int, Int)] = movies.map((m: Movie) => (m.year, 1))\n    val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey((a: Int, b: Int) => a + b)\n    val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map((t: (Int, Int)) => (t._2, t._1))\n    val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n    moviesPerYearInverseSorted\n  }",
          "status" : "Killed"
        },
        {
          "id" : 32,
          "originalProgramId" : 2,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n  val yearTuple: RDD[(Int, Int)] = movies.map { (inputParameter: Movie) => {\n    val originalFunction = ((m: Movie) => (m.year, 1))(_)\n    val originalValue = originalFunction(inputParameter)\n    (-originalValue._1, originalValue._2)\n  } }\n  val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey { (a: Int, b: Int) => a + b }\n  val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map { (t: (Int, Int)) => (t._2, t._1) }\n  val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n  moviesPerYearInverseSorted\n}",
          "originalCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n    val yearTuple: RDD[(Int, Int)] = movies.map((m: Movie) => (m.year, 1))\n    val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey((a: Int, b: Int) => a + b)\n    val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map((t: (Int, Int)) => (t._2, t._1))\n    val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n    moviesPerYearInverseSorted\n  }",
          "status" : "Killed"
        },
        {
          "id" : 33,
          "originalProgramId" : 2,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n  val yearTuple: RDD[(Int, Int)] = movies.map { (inputParameter: Movie) => {\n    val originalFunction = ((m: Movie) => (m.year, 1))(_)\n    val originalValue = originalFunction(inputParameter)\n    (originalValue._1, 0)\n  } }\n  val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey { (a: Int, b: Int) => a + b }\n  val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map { (t: (Int, Int)) => (t._2, t._1) }\n  val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n  moviesPerYearInverseSorted\n}",
          "originalCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n    val yearTuple: RDD[(Int, Int)] = movies.map((m: Movie) => (m.year, 1))\n    val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey((a: Int, b: Int) => a + b)\n    val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map((t: (Int, Int)) => (t._2, t._1))\n    val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n    moviesPerYearInverseSorted\n  }",
          "status" : "Killed"
        },
        {
          "id" : 34,
          "originalProgramId" : 2,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n  val yearTuple: RDD[(Int, Int)] = movies.map { (inputParameter: Movie) => {\n    val originalFunction = ((m: Movie) => (m.year, 1))(_)\n    val originalValue = originalFunction(inputParameter)\n    (originalValue._1, 1)\n  } }\n  val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey { (a: Int, b: Int) => a + b }\n  val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map { (t: (Int, Int)) => (t._2, t._1) }\n  val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n  moviesPerYearInverseSorted\n}",
          "originalCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n    val yearTuple: RDD[(Int, Int)] = movies.map((m: Movie) => (m.year, 1))\n    val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey((a: Int, b: Int) => a + b)\n    val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map((t: (Int, Int)) => (t._2, t._1))\n    val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n    moviesPerYearInverseSorted\n  }",
          "status" : "Equivalent"
        },
        {
          "id" : 35,
          "originalProgramId" : 2,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n  val yearTuple: RDD[(Int, Int)] = movies.map { (inputParameter: Movie) => {\n    val originalFunction = ((m: Movie) => (m.year, 1))(_)\n    val originalValue = originalFunction(inputParameter)\n    (originalValue._1, Int.MaxValue)\n  } }\n  val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey { (a: Int, b: Int) => a + b }\n  val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map { (t: (Int, Int)) => (t._2, t._1) }\n  val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n  moviesPerYearInverseSorted\n}",
          "originalCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n    val yearTuple: RDD[(Int, Int)] = movies.map((m: Movie) => (m.year, 1))\n    val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey((a: Int, b: Int) => a + b)\n    val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map((t: (Int, Int)) => (t._2, t._1))\n    val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n    moviesPerYearInverseSorted\n  }",
          "status" : "Killed"
        },
        {
          "id" : 36,
          "originalProgramId" : 2,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n  val yearTuple: RDD[(Int, Int)] = movies.map { (inputParameter: Movie) => {\n    val originalFunction = ((m: Movie) => (m.year, 1))(_)\n    val originalValue = originalFunction(inputParameter)\n    (originalValue._1, Int.MinValue)\n  } }\n  val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey { (a: Int, b: Int) => a + b }\n  val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map { (t: (Int, Int)) => (t._2, t._1) }\n  val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n  moviesPerYearInverseSorted\n}",
          "originalCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n    val yearTuple: RDD[(Int, Int)] = movies.map((m: Movie) => (m.year, 1))\n    val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey((a: Int, b: Int) => a + b)\n    val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map((t: (Int, Int)) => (t._2, t._1))\n    val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n    moviesPerYearInverseSorted\n  }",
          "status" : "Killed"
        },
        {
          "id" : 37,
          "originalProgramId" : 2,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n  val yearTuple: RDD[(Int, Int)] = movies.map { (inputParameter: Movie) => {\n    val originalFunction = ((m: Movie) => (m.year, 1))(_)\n    val originalValue = originalFunction(inputParameter)\n    (originalValue._1, -originalValue._2)\n  } }\n  val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey { (a: Int, b: Int) => a + b }\n  val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map { (t: (Int, Int)) => (t._2, t._1) }\n  val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n  moviesPerYearInverseSorted\n}",
          "originalCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n    val yearTuple: RDD[(Int, Int)] = movies.map((m: Movie) => (m.year, 1))\n    val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey((a: Int, b: Int) => a + b)\n    val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map((t: (Int, Int)) => (t._2, t._1))\n    val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n    moviesPerYearInverseSorted\n  }",
          "status" : "Killed"
        },
        {
          "id" : 38,
          "originalProgramId" : 2,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n  val yearTuple: RDD[(Int, Int)] = movies.map { (m: Movie) => (m.year, 1) }\n  val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey { (a: Int, b: Int) => a + b }\n  val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map { (inputParameter: (Int, Int)) => {\n    val originalFunction = ((t: (Int, Int)) => (t._2, t._1))(_)\n    val originalValue = originalFunction(inputParameter)\n    (0, originalValue._2)\n  } }\n  val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n  moviesPerYearInverseSorted\n}",
          "originalCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n    val yearTuple: RDD[(Int, Int)] = movies.map((m: Movie) => (m.year, 1))\n    val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey((a: Int, b: Int) => a + b)\n    val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map((t: (Int, Int)) => (t._2, t._1))\n    val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n    moviesPerYearInverseSorted\n  }",
          "status" : "Killed"
        },
        {
          "id" : 39,
          "originalProgramId" : 2,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n  val yearTuple: RDD[(Int, Int)] = movies.map { (m: Movie) => (m.year, 1) }\n  val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey { (a: Int, b: Int) => a + b }\n  val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map { (inputParameter: (Int, Int)) => {\n    val originalFunction = ((t: (Int, Int)) => (t._2, t._1))(_)\n    val originalValue = originalFunction(inputParameter)\n    (1, originalValue._2)\n  } }\n  val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n  moviesPerYearInverseSorted\n}",
          "originalCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n    val yearTuple: RDD[(Int, Int)] = movies.map((m: Movie) => (m.year, 1))\n    val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey((a: Int, b: Int) => a + b)\n    val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map((t: (Int, Int)) => (t._2, t._1))\n    val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n    moviesPerYearInverseSorted\n  }",
          "status" : "Killed"
        },
        {
          "id" : 40,
          "originalProgramId" : 2,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n  val yearTuple: RDD[(Int, Int)] = movies.map { (m: Movie) => (m.year, 1) }\n  val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey { (a: Int, b: Int) => a + b }\n  val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map { (inputParameter: (Int, Int)) => {\n    val originalFunction = ((t: (Int, Int)) => (t._2, t._1))(_)\n    val originalValue = originalFunction(inputParameter)\n    (Int.MaxValue, originalValue._2)\n  } }\n  val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n  moviesPerYearInverseSorted\n}",
          "originalCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n    val yearTuple: RDD[(Int, Int)] = movies.map((m: Movie) => (m.year, 1))\n    val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey((a: Int, b: Int) => a + b)\n    val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map((t: (Int, Int)) => (t._2, t._1))\n    val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n    moviesPerYearInverseSorted\n  }",
          "status" : "Killed"
        },
        {
          "id" : 41,
          "originalProgramId" : 2,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n  val yearTuple: RDD[(Int, Int)] = movies.map { (m: Movie) => (m.year, 1) }\n  val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey { (a: Int, b: Int) => a + b }\n  val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map { (inputParameter: (Int, Int)) => {\n    val originalFunction = ((t: (Int, Int)) => (t._2, t._1))(_)\n    val originalValue = originalFunction(inputParameter)\n    (Int.MinValue, originalValue._2)\n  } }\n  val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n  moviesPerYearInverseSorted\n}",
          "originalCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n    val yearTuple: RDD[(Int, Int)] = movies.map((m: Movie) => (m.year, 1))\n    val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey((a: Int, b: Int) => a + b)\n    val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map((t: (Int, Int)) => (t._2, t._1))\n    val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n    moviesPerYearInverseSorted\n  }",
          "status" : "Killed"
        },
        {
          "id" : 42,
          "originalProgramId" : 2,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n  val yearTuple: RDD[(Int, Int)] = movies.map { (m: Movie) => (m.year, 1) }\n  val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey { (a: Int, b: Int) => a + b }\n  val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map { (inputParameter: (Int, Int)) => {\n    val originalFunction = ((t: (Int, Int)) => (t._2, t._1))(_)\n    val originalValue = originalFunction(inputParameter)\n    (-originalValue._1, originalValue._2)\n  } }\n  val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n  moviesPerYearInverseSorted\n}",
          "originalCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n    val yearTuple: RDD[(Int, Int)] = movies.map((m: Movie) => (m.year, 1))\n    val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey((a: Int, b: Int) => a + b)\n    val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map((t: (Int, Int)) => (t._2, t._1))\n    val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n    moviesPerYearInverseSorted\n  }",
          "status" : "Killed"
        },
        {
          "id" : 43,
          "originalProgramId" : 2,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n  val yearTuple: RDD[(Int, Int)] = movies.map { (m: Movie) => (m.year, 1) }\n  val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey { (a: Int, b: Int) => a + b }\n  val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map { (inputParameter: (Int, Int)) => {\n    val originalFunction = ((t: (Int, Int)) => (t._2, t._1))(_)\n    val originalValue = originalFunction(inputParameter)\n    (originalValue._1, 0)\n  } }\n  val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n  moviesPerYearInverseSorted\n}",
          "originalCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n    val yearTuple: RDD[(Int, Int)] = movies.map((m: Movie) => (m.year, 1))\n    val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey((a: Int, b: Int) => a + b)\n    val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map((t: (Int, Int)) => (t._2, t._1))\n    val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n    moviesPerYearInverseSorted\n  }",
          "status" : "Killed"
        },
        {
          "id" : 44,
          "originalProgramId" : 2,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n  val yearTuple: RDD[(Int, Int)] = movies.map { (m: Movie) => (m.year, 1) }\n  val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey { (a: Int, b: Int) => a + b }\n  val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map { (inputParameter: (Int, Int)) => {\n    val originalFunction = ((t: (Int, Int)) => (t._2, t._1))(_)\n    val originalValue = originalFunction(inputParameter)\n    (originalValue._1, 1)\n  } }\n  val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n  moviesPerYearInverseSorted\n}",
          "originalCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n    val yearTuple: RDD[(Int, Int)] = movies.map((m: Movie) => (m.year, 1))\n    val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey((a: Int, b: Int) => a + b)\n    val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map((t: (Int, Int)) => (t._2, t._1))\n    val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n    moviesPerYearInverseSorted\n  }",
          "status" : "Killed"
        },
        {
          "id" : 45,
          "originalProgramId" : 2,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n  val yearTuple: RDD[(Int, Int)] = movies.map { (m: Movie) => (m.year, 1) }\n  val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey { (a: Int, b: Int) => a + b }\n  val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map { (inputParameter: (Int, Int)) => {\n    val originalFunction = ((t: (Int, Int)) => (t._2, t._1))(_)\n    val originalValue = originalFunction(inputParameter)\n    (originalValue._1, Int.MaxValue)\n  } }\n  val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n  moviesPerYearInverseSorted\n}",
          "originalCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n    val yearTuple: RDD[(Int, Int)] = movies.map((m: Movie) => (m.year, 1))\n    val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey((a: Int, b: Int) => a + b)\n    val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map((t: (Int, Int)) => (t._2, t._1))\n    val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n    moviesPerYearInverseSorted\n  }",
          "status" : "Killed"
        },
        {
          "id" : 46,
          "originalProgramId" : 2,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n  val yearTuple: RDD[(Int, Int)] = movies.map { (m: Movie) => (m.year, 1) }\n  val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey { (a: Int, b: Int) => a + b }\n  val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map { (inputParameter: (Int, Int)) => {\n    val originalFunction = ((t: (Int, Int)) => (t._2, t._1))(_)\n    val originalValue = originalFunction(inputParameter)\n    (originalValue._1, Int.MinValue)\n  } }\n  val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n  moviesPerYearInverseSorted\n}",
          "originalCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n    val yearTuple: RDD[(Int, Int)] = movies.map((m: Movie) => (m.year, 1))\n    val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey((a: Int, b: Int) => a + b)\n    val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map((t: (Int, Int)) => (t._2, t._1))\n    val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n    moviesPerYearInverseSorted\n  }",
          "status" : "Killed"
        },
        {
          "id" : 47,
          "originalProgramId" : 2,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n  val yearTuple: RDD[(Int, Int)] = movies.map { (m: Movie) => (m.year, 1) }\n  val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey { (a: Int, b: Int) => a + b }\n  val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map { (inputParameter: (Int, Int)) => {\n    val originalFunction = ((t: (Int, Int)) => (t._2, t._1))(_)\n    val originalValue = originalFunction(inputParameter)\n    (originalValue._1, -originalValue._2)\n  } }\n  val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n  moviesPerYearInverseSorted\n}",
          "originalCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n    val yearTuple: RDD[(Int, Int)] = movies.map((m: Movie) => (m.year, 1))\n    val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey((a: Int, b: Int) => a + b)\n    val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map((t: (Int, Int)) => (t._2, t._1))\n    val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n    moviesPerYearInverseSorted\n  }",
          "status" : "Killed"
        },
        {
          "id" : 48,
          "originalProgramId" : 2,
          "mutationOperator" : "DTI",
          "mutationOperatorDescription" : "Distinct Transformation Insertion",
          "mutantCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n  val yearTuple: RDD[(Int, Int)] = movies.map { (m: Movie) => (m.year, 1) }.distinct()\n  val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey { (a: Int, b: Int) => a + b }\n  val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map { (t: (Int, Int)) => (t._2, t._1) }\n  val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n  moviesPerYearInverseSorted\n}",
          "originalCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n    val yearTuple: RDD[(Int, Int)] = movies.map((m: Movie) => (m.year, 1))\n    val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey((a: Int, b: Int) => a + b)\n    val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map((t: (Int, Int)) => (t._2, t._1))\n    val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n    moviesPerYearInverseSorted\n  }",
          "status" : "Killed"
        },
        {
          "id" : 49,
          "originalProgramId" : 2,
          "mutationOperator" : "DTI",
          "mutationOperatorDescription" : "Distinct Transformation Insertion",
          "mutantCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n  val yearTuple: RDD[(Int, Int)] = movies.map { (m: Movie) => (m.year, 1) }\n  val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey { (a: Int, b: Int) => a + b }.distinct()\n  val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map { (t: (Int, Int)) => (t._2, t._1) }\n  val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n  moviesPerYearInverseSorted\n}",
          "originalCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n    val yearTuple: RDD[(Int, Int)] = movies.map((m: Movie) => (m.year, 1))\n    val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey((a: Int, b: Int) => a + b)\n    val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map((t: (Int, Int)) => (t._2, t._1))\n    val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n    moviesPerYearInverseSorted\n  }",
          "status" : "Equivalent"
        },
        {
          "id" : 50,
          "originalProgramId" : 2,
          "mutationOperator" : "DTI",
          "mutationOperatorDescription" : "Distinct Transformation Insertion",
          "mutantCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n  val yearTuple: RDD[(Int, Int)] = movies.map { (m: Movie) => (m.year, 1) }\n  val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey { (a: Int, b: Int) => a + b }\n  val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map { (t: (Int, Int)) => (t._2, t._1) }.distinct()\n  val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n  moviesPerYearInverseSorted\n}",
          "originalCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n    val yearTuple: RDD[(Int, Int)] = movies.map((m: Movie) => (m.year, 1))\n    val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey((a: Int, b: Int) => a + b)\n    val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map((t: (Int, Int)) => (t._2, t._1))\n    val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n    moviesPerYearInverseSorted\n  }",
          "status" : "Equivalent"
        },
        {
          "id" : 51,
          "originalProgramId" : 2,
          "mutationOperator" : "DTI",
          "mutationOperatorDescription" : "Distinct Transformation Insertion",
          "mutantCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n  val yearTuple: RDD[(Int, Int)] = movies.map { (m: Movie) => (m.year, 1) }\n  val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey { (a: Int, b: Int) => a + b }\n  val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map { (t: (Int, Int)) => (t._2, t._1) }\n  val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false).distinct()\n  moviesPerYearInverseSorted\n}",
          "originalCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n    val yearTuple: RDD[(Int, Int)] = movies.map((m: Movie) => (m.year, 1))\n    val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey((a: Int, b: Int) => a + b)\n    val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map((t: (Int, Int)) => (t._2, t._1))\n    val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n    moviesPerYearInverseSorted\n  }",
          "status" : "Lived"
        },
        {
          "id" : 52,
          "originalProgramId" : 2,
          "mutationOperator" : "ATR",
          "mutationOperatorDescription" : "Aggregation Transformation Replacement",
          "mutantCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n  val yearTuple: RDD[(Int, Int)] = movies.map { (m: Movie) => (m.year, 1) }\n  val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey { (firstParameter: Int, secondParameter: Int) => firstParameter }\n  val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map { (t: (Int, Int)) => (t._2, t._1) }\n  val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n  moviesPerYearInverseSorted\n}",
          "originalCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n    val yearTuple: RDD[(Int, Int)] = movies.map((m: Movie) => (m.year, 1))\n    val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey((a: Int, b: Int) => a + b)\n    val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map((t: (Int, Int)) => (t._2, t._1))\n    val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n    moviesPerYearInverseSorted\n  }",
          "status" : "Killed"
        },
        {
          "id" : 53,
          "originalProgramId" : 2,
          "mutationOperator" : "ATR",
          "mutationOperatorDescription" : "Aggregation Transformation Replacement",
          "mutantCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n  val yearTuple: RDD[(Int, Int)] = movies.map { (m: Movie) => (m.year, 1) }\n  val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey { (firstParameter: Int, secondParameter: Int) => secondParameter }\n  val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map { (t: (Int, Int)) => (t._2, t._1) }\n  val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n  moviesPerYearInverseSorted\n}",
          "originalCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n    val yearTuple: RDD[(Int, Int)] = movies.map((m: Movie) => (m.year, 1))\n    val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey((a: Int, b: Int) => a + b)\n    val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map((t: (Int, Int)) => (t._2, t._1))\n    val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n    moviesPerYearInverseSorted\n  }",
          "status" : "Killed"
        },
        {
          "id" : 54,
          "originalProgramId" : 2,
          "mutationOperator" : "ATR",
          "mutationOperatorDescription" : "Aggregation Transformation Replacement",
          "mutantCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n  val yearTuple: RDD[(Int, Int)] = movies.map { (m: Movie) => (m.year, 1) }\n  val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey { (firstParameter: Int, secondParameter: Int) => {\n    val originalFunction = ((a: Int, b: Int) => a + b)(_, _)\n    originalFunction(firstParameter, firstParameter)\n  } }\n  val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map { (t: (Int, Int)) => (t._2, t._1) }\n  val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n  moviesPerYearInverseSorted\n}",
          "originalCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n    val yearTuple: RDD[(Int, Int)] = movies.map((m: Movie) => (m.year, 1))\n    val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey((a: Int, b: Int) => a + b)\n    val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map((t: (Int, Int)) => (t._2, t._1))\n    val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n    moviesPerYearInverseSorted\n  }",
          "status" : "Lived"
        },
        {
          "id" : 55,
          "originalProgramId" : 2,
          "mutationOperator" : "ATR",
          "mutationOperatorDescription" : "Aggregation Transformation Replacement",
          "mutantCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n  val yearTuple: RDD[(Int, Int)] = movies.map { (m: Movie) => (m.year, 1) }\n  val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey { (firstParameter: Int, secondParameter: Int) => {\n    val originalFunction = ((a: Int, b: Int) => a + b)(_, _)\n    originalFunction(secondParameter, secondParameter)\n  } }\n  val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map { (t: (Int, Int)) => (t._2, t._1) }\n  val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n  moviesPerYearInverseSorted\n}",
          "originalCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n    val yearTuple: RDD[(Int, Int)] = movies.map((m: Movie) => (m.year, 1))\n    val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey((a: Int, b: Int) => a + b)\n    val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map((t: (Int, Int)) => (t._2, t._1))\n    val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n    moviesPerYearInverseSorted\n  }",
          "status" : "Lived"
        },
        {
          "id" : 56,
          "originalProgramId" : 2,
          "mutationOperator" : "ATR",
          "mutationOperatorDescription" : "Aggregation Transformation Replacement",
          "mutantCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n  val yearTuple: RDD[(Int, Int)] = movies.map { (m: Movie) => (m.year, 1) }\n  val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey { (firstParameter: Int, secondParameter: Int) => {\n    val originalFunction = ((a: Int, b: Int) => a + b)(_, _)\n    originalFunction(secondParameter, firstParameter)\n  } }\n  val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map { (t: (Int, Int)) => (t._2, t._1) }\n  val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n  moviesPerYearInverseSorted\n}",
          "originalCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n    val yearTuple: RDD[(Int, Int)] = movies.map((m: Movie) => (m.year, 1))\n    val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey((a: Int, b: Int) => a + b)\n    val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map((t: (Int, Int)) => (t._2, t._1))\n    val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n    moviesPerYearInverseSorted\n  }",
          "status" : "Equivalent"
        },
        {
          "id" : 57,
          "originalProgramId" : 2,
          "mutationOperator" : "OTD",
          "mutationOperatorDescription" : "Order Transformation Deletion",
          "mutantCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n  val yearTuple: RDD[(Int, Int)] = movies.map { (m: Movie) => (m.year, 1) }\n  val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey { (a: Int, b: Int) => a + b }\n  val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map { (t: (Int, Int)) => (t._2, t._1) }\n  val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse\n  moviesPerYearInverseSorted\n}",
          "originalCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n    val yearTuple: RDD[(Int, Int)] = movies.map((m: Movie) => (m.year, 1))\n    val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey((a: Int, b: Int) => a + b)\n    val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map((t: (Int, Int)) => (t._2, t._1))\n    val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n    moviesPerYearInverseSorted\n  }",
          "status" : "Lived"
        },
        {
          "id" : 58,
          "originalProgramId" : 2,
          "mutationOperator" : "OTI",
          "mutationOperatorDescription" : "Order Transformation Inversion",
          "mutantCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n  val yearTuple: RDD[(Int, Int)] = movies.map { (m: Movie) => (m.year, 1) }\n  val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey { (a: Int, b: Int) => a + b }\n  val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map { (t: (Int, Int)) => (t._2, t._1) }\n  val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(true)\n  moviesPerYearInverseSorted\n}",
          "originalCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n    val yearTuple: RDD[(Int, Int)] = movies.map((m: Movie) => (m.year, 1))\n    val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey((a: Int, b: Int) => a + b)\n    val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map((t: (Int, Int)) => (t._2, t._1))\n    val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n    moviesPerYearInverseSorted\n  }",
          "status" : "Lived"
        },
        {
          "id" : 59,
          "originalProgramId" : 3,
          "mutationOperator" : "UTD",
          "mutationOperatorDescription" : "Unary Transformation Deletion",
          "mutantCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n  val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap { (m: Movie) => m.genres.map(g => ((m.year, g), 1)) }\n  val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple\n  val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map { (g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey { (m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2 }\n  popularGenresByYear\n}",
          "originalCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n    val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap((m: Movie) => m.genres.map(g => ((m.year, g), 1)))\n    val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey((x: Int, y: Int) => x + y)\n    val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map((g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey((m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2)\n    popularGenresByYear\n  }",
          "status" : "Killed"
        },
        {
          "id" : 60,
          "originalProgramId" : 3,
          "mutationOperator" : "UTD",
          "mutationOperatorDescription" : "Unary Transformation Deletion",
          "mutantCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n  val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap { (m: Movie) => m.genres.map(g => ((m.year, g), 1)) }\n  val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey { (x: Int, y: Int) => x + y }\n  val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map { (g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple\n  popularGenresByYear\n}",
          "originalCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n    val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap((m: Movie) => m.genres.map(g => ((m.year, g), 1)))\n    val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey((x: Int, y: Int) => x + y)\n    val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map((g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey((m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2)\n    popularGenresByYear\n  }",
          "status" : "Killed"
        },
        {
          "id" : 61,
          "originalProgramId" : 3,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n  val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap { (inputParameter: Movie) => {\n    val originalFunction = ((m: Movie) => m.genres.map(g => ((m.year, g), 1)))(_)\n    val originalValue = originalFunction(inputParameter)\n    originalValue.headOption\n  } }\n  val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey { (x: Int, y: Int) => x + y }\n  val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map { (g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey { (m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2 }\n  popularGenresByYear\n}",
          "originalCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n    val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap((m: Movie) => m.genres.map(g => ((m.year, g), 1)))\n    val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey((x: Int, y: Int) => x + y)\n    val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map((g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey((m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2)\n    popularGenresByYear\n  }",
          "status" : "Lived"
        },
        {
          "id" : 62,
          "originalProgramId" : 3,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n  val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap { (inputParameter: Movie) => {\n    val originalFunction = ((m: Movie) => m.genres.map(g => ((m.year, g), 1)))(_)\n    val originalValue = originalFunction(inputParameter)\n    originalValue.toList.tail\n  } }\n  val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey { (x: Int, y: Int) => x + y }\n  val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map { (g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey { (m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2 }\n  popularGenresByYear\n}",
          "originalCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n    val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap((m: Movie) => m.genres.map(g => ((m.year, g), 1)))\n    val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey((x: Int, y: Int) => x + y)\n    val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map((g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey((m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2)\n    popularGenresByYear\n  }",
          "status" : "Killed"
        },
        {
          "id" : 63,
          "originalProgramId" : 3,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n  val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap { (inputParameter: Movie) => {\n    val originalFunction = ((m: Movie) => m.genres.map(g => ((m.year, g), 1)))(_)\n    val originalValue = originalFunction(inputParameter)\n    originalValue.toList.reverse\n  } }\n  val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey { (x: Int, y: Int) => x + y }\n  val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map { (g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey { (m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2 }\n  popularGenresByYear\n}",
          "originalCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n    val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap((m: Movie) => m.genres.map(g => ((m.year, g), 1)))\n    val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey((x: Int, y: Int) => x + y)\n    val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map((g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey((m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2)\n    popularGenresByYear\n  }",
          "status" : "Equivalent"
        },
        {
          "id" : 64,
          "originalProgramId" : 3,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n  val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap { (inputParameter: Movie) => {\n    val originalFunction = ((m: Movie) => m.genres.map(g => ((m.year, g), 1)))(_)\n    val originalValue = originalFunction(inputParameter)\n    List[((Int, String), Int)]()\n  } }\n  val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey { (x: Int, y: Int) => x + y }\n  val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map { (g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey { (m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2 }\n  popularGenresByYear\n}",
          "originalCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n    val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap((m: Movie) => m.genres.map(g => ((m.year, g), 1)))\n    val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey((x: Int, y: Int) => x + y)\n    val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map((g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey((m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2)\n    popularGenresByYear\n  }",
          "status" : "Killed"
        },
        {
          "id" : 65,
          "originalProgramId" : 3,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n  val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap { (m: Movie) => m.genres.map(g => ((m.year, g), 1)) }\n  val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey { (x: Int, y: Int) => x + y }\n  val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map { (inputParameter: ((Int, String), Int)) => {\n    val originalFunction = ((g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)))(_)\n    val originalValue = originalFunction(inputParameter)\n    (0, originalValue._2)\n  } }\n  val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey { (m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2 }\n  popularGenresByYear\n}",
          "originalCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n    val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap((m: Movie) => m.genres.map(g => ((m.year, g), 1)))\n    val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey((x: Int, y: Int) => x + y)\n    val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map((g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey((m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2)\n    popularGenresByYear\n  }",
          "status" : "Killed"
        },
        {
          "id" : 66,
          "originalProgramId" : 3,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n  val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap { (m: Movie) => m.genres.map(g => ((m.year, g), 1)) }\n  val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey { (x: Int, y: Int) => x + y }\n  val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map { (inputParameter: ((Int, String), Int)) => {\n    val originalFunction = ((g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)))(_)\n    val originalValue = originalFunction(inputParameter)\n    (1, originalValue._2)\n  } }\n  val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey { (m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2 }\n  popularGenresByYear\n}",
          "originalCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n    val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap((m: Movie) => m.genres.map(g => ((m.year, g), 1)))\n    val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey((x: Int, y: Int) => x + y)\n    val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map((g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey((m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2)\n    popularGenresByYear\n  }",
          "status" : "Killed"
        },
        {
          "id" : 67,
          "originalProgramId" : 3,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n  val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap { (m: Movie) => m.genres.map(g => ((m.year, g), 1)) }\n  val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey { (x: Int, y: Int) => x + y }\n  val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map { (inputParameter: ((Int, String), Int)) => {\n    val originalFunction = ((g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)))(_)\n    val originalValue = originalFunction(inputParameter)\n    (Int.MaxValue, originalValue._2)\n  } }\n  val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey { (m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2 }\n  popularGenresByYear\n}",
          "originalCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n    val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap((m: Movie) => m.genres.map(g => ((m.year, g), 1)))\n    val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey((x: Int, y: Int) => x + y)\n    val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map((g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey((m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2)\n    popularGenresByYear\n  }",
          "status" : "Killed"
        },
        {
          "id" : 68,
          "originalProgramId" : 3,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n  val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap { (m: Movie) => m.genres.map(g => ((m.year, g), 1)) }\n  val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey { (x: Int, y: Int) => x + y }\n  val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map { (inputParameter: ((Int, String), Int)) => {\n    val originalFunction = ((g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)))(_)\n    val originalValue = originalFunction(inputParameter)\n    (Int.MinValue, originalValue._2)\n  } }\n  val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey { (m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2 }\n  popularGenresByYear\n}",
          "originalCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n    val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap((m: Movie) => m.genres.map(g => ((m.year, g), 1)))\n    val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey((x: Int, y: Int) => x + y)\n    val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map((g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey((m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2)\n    popularGenresByYear\n  }",
          "status" : "Killed"
        },
        {
          "id" : 69,
          "originalProgramId" : 3,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n  val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap { (m: Movie) => m.genres.map(g => ((m.year, g), 1)) }\n  val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey { (x: Int, y: Int) => x + y }\n  val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map { (inputParameter: ((Int, String), Int)) => {\n    val originalFunction = ((g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)))(_)\n    val originalValue = originalFunction(inputParameter)\n    (-originalValue._1, originalValue._2)\n  } }\n  val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey { (m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2 }\n  popularGenresByYear\n}",
          "originalCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n    val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap((m: Movie) => m.genres.map(g => ((m.year, g), 1)))\n    val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey((x: Int, y: Int) => x + y)\n    val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map((g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey((m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2)\n    popularGenresByYear\n  }",
          "status" : "Killed"
        },
        {
          "id" : 70,
          "originalProgramId" : 3,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n  val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap { (m: Movie) => m.genres.map(g => ((m.year, g), 1)) }\n  val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey { (x: Int, y: Int) => x + y }\n  val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map { (inputParameter: ((Int, String), Int)) => {\n    val originalFunction = ((g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)))(_)\n    val originalValue = originalFunction(inputParameter)\n    (originalValue._1, (\"\", originalValue._2._2))\n  } }\n  val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey { (m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2 }\n  popularGenresByYear\n}",
          "originalCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n    val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap((m: Movie) => m.genres.map(g => ((m.year, g), 1)))\n    val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey((x: Int, y: Int) => x + y)\n    val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map((g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey((m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2)\n    popularGenresByYear\n  }",
          "status" : "Killed"
        },
        {
          "id" : 71,
          "originalProgramId" : 3,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n  val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap { (m: Movie) => m.genres.map(g => ((m.year, g), 1)) }\n  val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey { (x: Int, y: Int) => x + y }\n  val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map { (inputParameter: ((Int, String), Int)) => {\n    val originalFunction = ((g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)))(_)\n    val originalValue = originalFunction(inputParameter)\n    (originalValue._1, (originalValue._2._1, 0))\n  } }\n  val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey { (m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2 }\n  popularGenresByYear\n}",
          "originalCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n    val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap((m: Movie) => m.genres.map(g => ((m.year, g), 1)))\n    val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey((x: Int, y: Int) => x + y)\n    val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map((g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey((m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2)\n    popularGenresByYear\n  }",
          "status" : "Killed"
        },
        {
          "id" : 72,
          "originalProgramId" : 3,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n  val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap { (m: Movie) => m.genres.map(g => ((m.year, g), 1)) }\n  val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey { (x: Int, y: Int) => x + y }\n  val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map { (inputParameter: ((Int, String), Int)) => {\n    val originalFunction = ((g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)))(_)\n    val originalValue = originalFunction(inputParameter)\n    (originalValue._1, (originalValue._2._1, 1))\n  } }\n  val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey { (m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2 }\n  popularGenresByYear\n}",
          "originalCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n    val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap((m: Movie) => m.genres.map(g => ((m.year, g), 1)))\n    val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey((x: Int, y: Int) => x + y)\n    val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map((g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey((m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2)\n    popularGenresByYear\n  }",
          "status" : "Killed"
        },
        {
          "id" : 73,
          "originalProgramId" : 3,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n  val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap { (m: Movie) => m.genres.map(g => ((m.year, g), 1)) }\n  val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey { (x: Int, y: Int) => x + y }\n  val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map { (inputParameter: ((Int, String), Int)) => {\n    val originalFunction = ((g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)))(_)\n    val originalValue = originalFunction(inputParameter)\n    (originalValue._1, (originalValue._2._1, Int.MaxValue))\n  } }\n  val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey { (m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2 }\n  popularGenresByYear\n}",
          "originalCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n    val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap((m: Movie) => m.genres.map(g => ((m.year, g), 1)))\n    val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey((x: Int, y: Int) => x + y)\n    val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map((g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey((m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2)\n    popularGenresByYear\n  }",
          "status" : "Killed"
        },
        {
          "id" : 74,
          "originalProgramId" : 3,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n  val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap { (m: Movie) => m.genres.map(g => ((m.year, g), 1)) }\n  val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey { (x: Int, y: Int) => x + y }\n  val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map { (inputParameter: ((Int, String), Int)) => {\n    val originalFunction = ((g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)))(_)\n    val originalValue = originalFunction(inputParameter)\n    (originalValue._1, (originalValue._2._1, Int.MinValue))\n  } }\n  val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey { (m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2 }\n  popularGenresByYear\n}",
          "originalCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n    val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap((m: Movie) => m.genres.map(g => ((m.year, g), 1)))\n    val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey((x: Int, y: Int) => x + y)\n    val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map((g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey((m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2)\n    popularGenresByYear\n  }",
          "status" : "Killed"
        },
        {
          "id" : 75,
          "originalProgramId" : 3,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n  val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap { (m: Movie) => m.genres.map(g => ((m.year, g), 1)) }\n  val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey { (x: Int, y: Int) => x + y }\n  val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map { (inputParameter: ((Int, String), Int)) => {\n    val originalFunction = ((g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)))(_)\n    val originalValue = originalFunction(inputParameter)\n    (originalValue._1, (originalValue._2._1, -originalValue._2._2))\n  } }\n  val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey { (m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2 }\n  popularGenresByYear\n}",
          "originalCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n    val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap((m: Movie) => m.genres.map(g => ((m.year, g), 1)))\n    val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey((x: Int, y: Int) => x + y)\n    val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map((g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey((m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2)\n    popularGenresByYear\n  }",
          "status" : "Killed"
        },
        {
          "id" : 76,
          "originalProgramId" : 3,
          "mutationOperator" : "DTI",
          "mutationOperatorDescription" : "Distinct Transformation Insertion",
          "mutantCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n  val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap { (m: Movie) => m.genres.map(g => ((m.year, g), 1)) }.distinct()\n  val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey { (x: Int, y: Int) => x + y }\n  val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map { (g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey { (m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2 }\n  popularGenresByYear\n}",
          "originalCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n    val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap((m: Movie) => m.genres.map(g => ((m.year, g), 1)))\n    val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey((x: Int, y: Int) => x + y)\n    val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map((g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey((m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2)\n    popularGenresByYear\n  }",
          "status" : "Killed"
        },
        {
          "id" : 77,
          "originalProgramId" : 3,
          "mutationOperator" : "DTI",
          "mutationOperatorDescription" : "Distinct Transformation Insertion",
          "mutantCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n  val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap { (m: Movie) => m.genres.map(g => ((m.year, g), 1)) }\n  val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey { (x: Int, y: Int) => x + y }.distinct()\n  val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map { (g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey { (m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2 }\n  popularGenresByYear\n}",
          "originalCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n    val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap((m: Movie) => m.genres.map(g => ((m.year, g), 1)))\n    val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey((x: Int, y: Int) => x + y)\n    val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map((g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey((m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2)\n    popularGenresByYear\n  }",
          "status" : "Lived"
        },
        {
          "id" : 78,
          "originalProgramId" : 3,
          "mutationOperator" : "DTI",
          "mutationOperatorDescription" : "Distinct Transformation Insertion",
          "mutantCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n  val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap { (m: Movie) => m.genres.map(g => ((m.year, g), 1)) }\n  val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey { (x: Int, y: Int) => x + y }\n  val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map { (g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)) }.distinct()\n  val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey { (m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2 }\n  popularGenresByYear\n}",
          "originalCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n    val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap((m: Movie) => m.genres.map(g => ((m.year, g), 1)))\n    val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey((x: Int, y: Int) => x + y)\n    val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map((g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey((m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2)\n    popularGenresByYear\n  }",
          "status" : "Lived"
        },
        {
          "id" : 79,
          "originalProgramId" : 3,
          "mutationOperator" : "DTI",
          "mutationOperatorDescription" : "Distinct Transformation Insertion",
          "mutantCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n  val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap { (m: Movie) => m.genres.map(g => ((m.year, g), 1)) }\n  val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey { (x: Int, y: Int) => x + y }\n  val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map { (g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey { (m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2 }.distinct()\n  popularGenresByYear\n}",
          "originalCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n    val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap((m: Movie) => m.genres.map(g => ((m.year, g), 1)))\n    val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey((x: Int, y: Int) => x + y)\n    val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map((g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey((m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2)\n    popularGenresByYear\n  }",
          "status" : "Equivalent"
        },
        {
          "id" : 80,
          "originalProgramId" : 3,
          "mutationOperator" : "ATR",
          "mutationOperatorDescription" : "Aggregation Transformation Replacement",
          "mutantCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n  val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap { (m: Movie) => m.genres.map(g => ((m.year, g), 1)) }\n  val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey { (firstParameter: Int, secondParameter: Int) => firstParameter }\n  val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map { (g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey { (m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2 }\n  popularGenresByYear\n}",
          "originalCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n    val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap((m: Movie) => m.genres.map(g => ((m.year, g), 1)))\n    val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey((x: Int, y: Int) => x + y)\n    val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map((g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey((m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2)\n    popularGenresByYear\n  }",
          "status" : "Killed"
        },
        {
          "id" : 81,
          "originalProgramId" : 3,
          "mutationOperator" : "ATR",
          "mutationOperatorDescription" : "Aggregation Transformation Replacement",
          "mutantCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n  val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap { (m: Movie) => m.genres.map(g => ((m.year, g), 1)) }\n  val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey { (firstParameter: Int, secondParameter: Int) => secondParameter }\n  val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map { (g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey { (m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2 }\n  popularGenresByYear\n}",
          "originalCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n    val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap((m: Movie) => m.genres.map(g => ((m.year, g), 1)))\n    val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey((x: Int, y: Int) => x + y)\n    val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map((g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey((m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2)\n    popularGenresByYear\n  }",
          "status" : "Killed"
        },
        {
          "id" : 82,
          "originalProgramId" : 3,
          "mutationOperator" : "ATR",
          "mutationOperatorDescription" : "Aggregation Transformation Replacement",
          "mutantCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n  val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap { (m: Movie) => m.genres.map(g => ((m.year, g), 1)) }\n  val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey { (firstParameter: Int, secondParameter: Int) => {\n    val originalFunction = ((x: Int, y: Int) => x + y)(_, _)\n    originalFunction(firstParameter, firstParameter)\n  } }\n  val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map { (g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey { (m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2 }\n  popularGenresByYear\n}",
          "originalCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n    val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap((m: Movie) => m.genres.map(g => ((m.year, g), 1)))\n    val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey((x: Int, y: Int) => x + y)\n    val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map((g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey((m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2)\n    popularGenresByYear\n  }",
          "status" : "Killed"
        },
        {
          "id" : 83,
          "originalProgramId" : 3,
          "mutationOperator" : "ATR",
          "mutationOperatorDescription" : "Aggregation Transformation Replacement",
          "mutantCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n  val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap { (m: Movie) => m.genres.map(g => ((m.year, g), 1)) }\n  val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey { (firstParameter: Int, secondParameter: Int) => {\n    val originalFunction = ((x: Int, y: Int) => x + y)(_, _)\n    originalFunction(secondParameter, secondParameter)\n  } }\n  val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map { (g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey { (m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2 }\n  popularGenresByYear\n}",
          "originalCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n    val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap((m: Movie) => m.genres.map(g => ((m.year, g), 1)))\n    val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey((x: Int, y: Int) => x + y)\n    val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map((g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey((m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2)\n    popularGenresByYear\n  }",
          "status" : "Killed"
        },
        {
          "id" : 84,
          "originalProgramId" : 3,
          "mutationOperator" : "ATR",
          "mutationOperatorDescription" : "Aggregation Transformation Replacement",
          "mutantCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n  val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap { (m: Movie) => m.genres.map(g => ((m.year, g), 1)) }\n  val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey { (firstParameter: Int, secondParameter: Int) => {\n    val originalFunction = ((x: Int, y: Int) => x + y)(_, _)\n    originalFunction(secondParameter, firstParameter)\n  } }\n  val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map { (g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey { (m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2 }\n  popularGenresByYear\n}",
          "originalCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n    val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap((m: Movie) => m.genres.map(g => ((m.year, g), 1)))\n    val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey((x: Int, y: Int) => x + y)\n    val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map((g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey((m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2)\n    popularGenresByYear\n  }",
          "status" : "Equivalent"
        },
        {
          "id" : 85,
          "originalProgramId" : 3,
          "mutationOperator" : "ATR",
          "mutationOperatorDescription" : "Aggregation Transformation Replacement",
          "mutantCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n  val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap { (m: Movie) => m.genres.map(g => ((m.year, g), 1)) }\n  val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey { (x: Int, y: Int) => x + y }\n  val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map { (g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey { (firstParameter: (String, Int), secondParameter: (String, Int)) => firstParameter }\n  popularGenresByYear\n}",
          "originalCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n    val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap((m: Movie) => m.genres.map(g => ((m.year, g), 1)))\n    val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey((x: Int, y: Int) => x + y)\n    val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map((g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey((m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2)\n    popularGenresByYear\n  }",
          "status" : "Killed"
        },
        {
          "id" : 86,
          "originalProgramId" : 3,
          "mutationOperator" : "ATR",
          "mutationOperatorDescription" : "Aggregation Transformation Replacement",
          "mutantCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n  val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap { (m: Movie) => m.genres.map(g => ((m.year, g), 1)) }\n  val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey { (x: Int, y: Int) => x + y }\n  val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map { (g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey { (firstParameter: (String, Int), secondParameter: (String, Int)) => secondParameter }\n  popularGenresByYear\n}",
          "originalCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n    val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap((m: Movie) => m.genres.map(g => ((m.year, g), 1)))\n    val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey((x: Int, y: Int) => x + y)\n    val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map((g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey((m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2)\n    popularGenresByYear\n  }",
          "status" : "Killed"
        },
        {
          "id" : 87,
          "originalProgramId" : 3,
          "mutationOperator" : "ATR",
          "mutationOperatorDescription" : "Aggregation Transformation Replacement",
          "mutantCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n  val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap { (m: Movie) => m.genres.map(g => ((m.year, g), 1)) }\n  val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey { (x: Int, y: Int) => x + y }\n  val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map { (g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey { (firstParameter: (String, Int), secondParameter: (String, Int)) => {\n    val originalFunction = ((m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2)(_, _)\n    originalFunction(firstParameter, firstParameter)\n  } }\n  popularGenresByYear\n}",
          "originalCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n    val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap((m: Movie) => m.genres.map(g => ((m.year, g), 1)))\n    val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey((x: Int, y: Int) => x + y)\n    val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map((g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey((m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2)\n    popularGenresByYear\n  }",
          "status" : "Killed"
        },
        {
          "id" : 88,
          "originalProgramId" : 3,
          "mutationOperator" : "ATR",
          "mutationOperatorDescription" : "Aggregation Transformation Replacement",
          "mutantCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n  val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap { (m: Movie) => m.genres.map(g => ((m.year, g), 1)) }\n  val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey { (x: Int, y: Int) => x + y }\n  val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map { (g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey { (firstParameter: (String, Int), secondParameter: (String, Int)) => {\n    val originalFunction = ((m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2)(_, _)\n    originalFunction(secondParameter, secondParameter)\n  } }\n  popularGenresByYear\n}",
          "originalCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n    val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap((m: Movie) => m.genres.map(g => ((m.year, g), 1)))\n    val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey((x: Int, y: Int) => x + y)\n    val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map((g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey((m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2)\n    popularGenresByYear\n  }",
          "status" : "Killed"
        },
        {
          "id" : 89,
          "originalProgramId" : 3,
          "mutationOperator" : "ATR",
          "mutationOperatorDescription" : "Aggregation Transformation Replacement",
          "mutantCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n  val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap { (m: Movie) => m.genres.map(g => ((m.year, g), 1)) }\n  val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey { (x: Int, y: Int) => x + y }\n  val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map { (g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey { (firstParameter: (String, Int), secondParameter: (String, Int)) => {\n    val originalFunction = ((m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2)(_, _)\n    originalFunction(secondParameter, firstParameter)\n  } }\n  popularGenresByYear\n}",
          "originalCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n    val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap((m: Movie) => m.genres.map(g => ((m.year, g), 1)))\n    val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey((x: Int, y: Int) => x + y)\n    val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map((g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey((m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2)\n    popularGenresByYear\n  }",
          "status" : "Killed"
        },
        {
          "id" : 90,
          "originalProgramId" : 4,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (inputParameter: Movie) => {\n    val originalFunction = ((m: Movie) => (m.movieId, m))(_)\n    val originalValue = originalFunction(inputParameter)\n    (0, originalValue._2)\n  } }\n  val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map { (r: Rating) => (r.movieId, r) }\n  val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n  val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map { (tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating) }\n  val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n  val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map { (x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)) }\n  ratingsStats\n}",
          "originalCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map((r: Rating) => (r.movieId, r))\n    val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n    val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map((tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating))\n    val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n    val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map((x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)))\n    ratingsStats\n  }",
          "status" : "Killed"
        },
        {
          "id" : 91,
          "originalProgramId" : 4,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (inputParameter: Movie) => {\n    val originalFunction = ((m: Movie) => (m.movieId, m))(_)\n    val originalValue = originalFunction(inputParameter)\n    (1, originalValue._2)\n  } }\n  val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map { (r: Rating) => (r.movieId, r) }\n  val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n  val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map { (tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating) }\n  val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n  val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map { (x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)) }\n  ratingsStats\n}",
          "originalCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map((r: Rating) => (r.movieId, r))\n    val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n    val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map((tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating))\n    val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n    val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map((x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)))\n    ratingsStats\n  }",
          "status" : "Killed"
        },
        {
          "id" : 92,
          "originalProgramId" : 4,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (inputParameter: Movie) => {\n    val originalFunction = ((m: Movie) => (m.movieId, m))(_)\n    val originalValue = originalFunction(inputParameter)\n    (Int.MaxValue, originalValue._2)\n  } }\n  val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map { (r: Rating) => (r.movieId, r) }\n  val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n  val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map { (tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating) }\n  val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n  val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map { (x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)) }\n  ratingsStats\n}",
          "originalCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map((r: Rating) => (r.movieId, r))\n    val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n    val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map((tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating))\n    val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n    val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map((x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)))\n    ratingsStats\n  }",
          "status" : "Killed"
        },
        {
          "id" : 93,
          "originalProgramId" : 4,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (inputParameter: Movie) => {\n    val originalFunction = ((m: Movie) => (m.movieId, m))(_)\n    val originalValue = originalFunction(inputParameter)\n    (Int.MinValue, originalValue._2)\n  } }\n  val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map { (r: Rating) => (r.movieId, r) }\n  val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n  val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map { (tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating) }\n  val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n  val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map { (x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)) }\n  ratingsStats\n}",
          "originalCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map((r: Rating) => (r.movieId, r))\n    val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n    val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map((tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating))\n    val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n    val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map((x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)))\n    ratingsStats\n  }",
          "status" : "Killed"
        },
        {
          "id" : 94,
          "originalProgramId" : 4,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (inputParameter: Movie) => {\n    val originalFunction = ((m: Movie) => (m.movieId, m))(_)\n    val originalValue = originalFunction(inputParameter)\n    (-originalValue._1, originalValue._2)\n  } }\n  val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map { (r: Rating) => (r.movieId, r) }\n  val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n  val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map { (tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating) }\n  val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n  val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map { (x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)) }\n  ratingsStats\n}",
          "originalCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map((r: Rating) => (r.movieId, r))\n    val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n    val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map((tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating))\n    val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n    val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map((x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)))\n    ratingsStats\n  }",
          "status" : "Killed"
        },
        {
          "id" : 95,
          "originalProgramId" : 4,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (inputParameter: Movie) => {\n    val originalFunction = ((m: Movie) => (m.movieId, m))(_)\n    val originalValue = originalFunction(inputParameter)\n    (originalValue._1, null.asInstanceOf[Movie])\n  } }\n  val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map { (r: Rating) => (r.movieId, r) }\n  val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n  val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map { (tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating) }\n  val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n  val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map { (x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)) }\n  ratingsStats\n}",
          "originalCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map((r: Rating) => (r.movieId, r))\n    val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n    val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map((tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating))\n    val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n    val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map((x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)))\n    ratingsStats\n  }",
          "status" : "Killed"
        },
        {
          "id" : 96,
          "originalProgramId" : 4,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map { (inputParameter: Rating) => {\n    val originalFunction = ((r: Rating) => (r.movieId, r))(_)\n    val originalValue = originalFunction(inputParameter)\n    (0, originalValue._2)\n  } }\n  val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n  val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map { (tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating) }\n  val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n  val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map { (x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)) }\n  ratingsStats\n}",
          "originalCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map((r: Rating) => (r.movieId, r))\n    val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n    val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map((tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating))\n    val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n    val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map((x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)))\n    ratingsStats\n  }",
          "status" : "Killed"
        },
        {
          "id" : 97,
          "originalProgramId" : 4,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map { (inputParameter: Rating) => {\n    val originalFunction = ((r: Rating) => (r.movieId, r))(_)\n    val originalValue = originalFunction(inputParameter)\n    (1, originalValue._2)\n  } }\n  val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n  val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map { (tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating) }\n  val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n  val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map { (x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)) }\n  ratingsStats\n}",
          "originalCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map((r: Rating) => (r.movieId, r))\n    val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n    val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map((tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating))\n    val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n    val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map((x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)))\n    ratingsStats\n  }",
          "status" : "Killed"
        },
        {
          "id" : 98,
          "originalProgramId" : 4,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map { (inputParameter: Rating) => {\n    val originalFunction = ((r: Rating) => (r.movieId, r))(_)\n    val originalValue = originalFunction(inputParameter)\n    (Int.MaxValue, originalValue._2)\n  } }\n  val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n  val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map { (tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating) }\n  val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n  val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map { (x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)) }\n  ratingsStats\n}",
          "originalCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map((r: Rating) => (r.movieId, r))\n    val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n    val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map((tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating))\n    val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n    val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map((x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)))\n    ratingsStats\n  }",
          "status" : "Killed"
        },
        {
          "id" : 99,
          "originalProgramId" : 4,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map { (inputParameter: Rating) => {\n    val originalFunction = ((r: Rating) => (r.movieId, r))(_)\n    val originalValue = originalFunction(inputParameter)\n    (Int.MinValue, originalValue._2)\n  } }\n  val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n  val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map { (tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating) }\n  val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n  val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map { (x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)) }\n  ratingsStats\n}",
          "originalCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map((r: Rating) => (r.movieId, r))\n    val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n    val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map((tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating))\n    val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n    val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map((x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)))\n    ratingsStats\n  }",
          "status" : "Killed"
        },
        {
          "id" : 100,
          "originalProgramId" : 4,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map { (inputParameter: Rating) => {\n    val originalFunction = ((r: Rating) => (r.movieId, r))(_)\n    val originalValue = originalFunction(inputParameter)\n    (-originalValue._1, originalValue._2)\n  } }\n  val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n  val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map { (tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating) }\n  val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n  val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map { (x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)) }\n  ratingsStats\n}",
          "originalCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map((r: Rating) => (r.movieId, r))\n    val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n    val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map((tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating))\n    val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n    val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map((x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)))\n    ratingsStats\n  }",
          "status" : "Killed"
        },
        {
          "id" : 101,
          "originalProgramId" : 4,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map { (inputParameter: Rating) => {\n    val originalFunction = ((r: Rating) => (r.movieId, r))(_)\n    val originalValue = originalFunction(inputParameter)\n    (originalValue._1, null.asInstanceOf[Rating])\n  } }\n  val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n  val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map { (tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating) }\n  val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n  val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map { (x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)) }\n  ratingsStats\n}",
          "originalCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map((r: Rating) => (r.movieId, r))\n    val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n    val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map((tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating))\n    val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n    val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map((x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)))\n    ratingsStats\n  }",
          "status" : "Killed"
        },
        {
          "id" : 102,
          "originalProgramId" : 4,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map { (r: Rating) => (r.movieId, r) }\n  val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n  val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map { (inputParameter: (Int, (Movie, Rating))) => {\n    val originalFunction = ((tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating))(_)\n    val originalValue = originalFunction(inputParameter)\n    (originalValue._1, 0d)\n  } }\n  val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n  val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map { (x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)) }\n  ratingsStats\n}",
          "originalCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map((r: Rating) => (r.movieId, r))\n    val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n    val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map((tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating))\n    val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n    val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map((x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)))\n    ratingsStats\n  }",
          "status" : "Killed"
        },
        {
          "id" : 103,
          "originalProgramId" : 4,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map { (r: Rating) => (r.movieId, r) }\n  val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n  val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map { (inputParameter: (Int, (Movie, Rating))) => {\n    val originalFunction = ((tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating))(_)\n    val originalValue = originalFunction(inputParameter)\n    (originalValue._1, 1d)\n  } }\n  val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n  val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map { (x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)) }\n  ratingsStats\n}",
          "originalCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map((r: Rating) => (r.movieId, r))\n    val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n    val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map((tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating))\n    val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n    val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map((x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)))\n    ratingsStats\n  }",
          "status" : "Killed"
        },
        {
          "id" : 104,
          "originalProgramId" : 4,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map { (r: Rating) => (r.movieId, r) }\n  val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n  val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map { (inputParameter: (Int, (Movie, Rating))) => {\n    val originalFunction = ((tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating))(_)\n    val originalValue = originalFunction(inputParameter)\n    (originalValue._1, Double.MaxValue)\n  } }\n  val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n  val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map { (x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)) }\n  ratingsStats\n}",
          "originalCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map((r: Rating) => (r.movieId, r))\n    val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n    val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map((tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating))\n    val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n    val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map((x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)))\n    ratingsStats\n  }",
          "status" : "Killed"
        },
        {
          "id" : 105,
          "originalProgramId" : 4,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map { (r: Rating) => (r.movieId, r) }\n  val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n  val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map { (inputParameter: (Int, (Movie, Rating))) => {\n    val originalFunction = ((tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating))(_)\n    val originalValue = originalFunction(inputParameter)\n    (originalValue._1, Double.MinValue)\n  } }\n  val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n  val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map { (x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)) }\n  ratingsStats\n}",
          "originalCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map((r: Rating) => (r.movieId, r))\n    val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n    val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map((tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating))\n    val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n    val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map((x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)))\n    ratingsStats\n  }",
          "status" : "Killed"
        },
        {
          "id" : 106,
          "originalProgramId" : 4,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map { (r: Rating) => (r.movieId, r) }\n  val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n  val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map { (inputParameter: (Int, (Movie, Rating))) => {\n    val originalFunction = ((tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating))(_)\n    val originalValue = originalFunction(inputParameter)\n    (originalValue._1, -originalValue._2)\n  } }\n  val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n  val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map { (x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)) }\n  ratingsStats\n}",
          "originalCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map((r: Rating) => (r.movieId, r))\n    val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n    val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map((tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating))\n    val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n    val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map((x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)))\n    ratingsStats\n  }",
          "status" : "Killed"
        },
        {
          "id" : 107,
          "originalProgramId" : 4,
          "mutationOperator" : "DTI",
          "mutationOperatorDescription" : "Distinct Transformation Insertion",
          "mutantCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }.distinct()\n  val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map { (r: Rating) => (r.movieId, r) }\n  val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n  val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map { (tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating) }\n  val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n  val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map { (x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)) }\n  ratingsStats\n}",
          "originalCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map((r: Rating) => (r.movieId, r))\n    val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n    val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map((tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating))\n    val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n    val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map((x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)))\n    ratingsStats\n  }",
          "status" : "Lived"
        },
        {
          "id" : 108,
          "originalProgramId" : 4,
          "mutationOperator" : "DTI",
          "mutationOperatorDescription" : "Distinct Transformation Insertion",
          "mutantCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map { (r: Rating) => (r.movieId, r) }.distinct()\n  val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n  val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map { (tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating) }\n  val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n  val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map { (x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)) }\n  ratingsStats\n}",
          "originalCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map((r: Rating) => (r.movieId, r))\n    val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n    val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map((tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating))\n    val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n    val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map((x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)))\n    ratingsStats\n  }",
          "status" : "Lived"
        },
        {
          "id" : 109,
          "originalProgramId" : 4,
          "mutationOperator" : "DTI",
          "mutationOperatorDescription" : "Distinct Transformation Insertion",
          "mutantCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map { (r: Rating) => (r.movieId, r) }\n  val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey).distinct()\n  val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map { (tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating) }\n  val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n  val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map { (x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)) }\n  ratingsStats\n}",
          "originalCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map((r: Rating) => (r.movieId, r))\n    val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n    val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map((tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating))\n    val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n    val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map((x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)))\n    ratingsStats\n  }",
          "status" : "Lived"
        },
        {
          "id" : 110,
          "originalProgramId" : 4,
          "mutationOperator" : "DTI",
          "mutationOperatorDescription" : "Distinct Transformation Insertion",
          "mutantCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map { (r: Rating) => (r.movieId, r) }\n  val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n  val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map { (tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating) }.distinct()\n  val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n  val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map { (x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)) }\n  ratingsStats\n}",
          "originalCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map((r: Rating) => (r.movieId, r))\n    val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n    val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map((tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating))\n    val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n    val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map((x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)))\n    ratingsStats\n  }",
          "status" : "Killed"
        },
        {
          "id" : 111,
          "originalProgramId" : 4,
          "mutationOperator" : "DTI",
          "mutationOperatorDescription" : "Distinct Transformation Insertion",
          "mutantCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map { (r: Rating) => (r.movieId, r) }\n  val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n  val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map { (tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating) }\n  val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey().distinct()\n  val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map { (x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)) }\n  ratingsStats\n}",
          "originalCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map((r: Rating) => (r.movieId, r))\n    val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n    val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map((tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating))\n    val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n    val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map((x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)))\n    ratingsStats\n  }",
          "status" : "Equivalent"
        },
        {
          "id" : 112,
          "originalProgramId" : 4,
          "mutationOperator" : "DTI",
          "mutationOperatorDescription" : "Distinct Transformation Insertion",
          "mutantCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map { (r: Rating) => (r.movieId, r) }\n  val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n  val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map { (tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating) }\n  val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n  val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map { (x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)) }.distinct()\n  ratingsStats\n}",
          "originalCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map((r: Rating) => (r.movieId, r))\n    val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n    val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map((tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating))\n    val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n    val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map((x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)))\n    ratingsStats\n  }",
          "status" : "Equivalent"
        },
        {
          "id" : 113,
          "originalProgramId" : 4,
          "mutationOperator" : "JTR",
          "mutationOperatorDescription" : "Join Transformation Replacement",
          "mutantCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map { (r: Rating) => (r.movieId, r) }\n  val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.leftOuterJoin(ratingsMovieIdKey).map(tuple => (tuple._1, (tuple._2._1, tuple._2._2.getOrElse(null.asInstanceOf[Rating]))))\n  val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map { (tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating) }\n  val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n  val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map { (x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)) }\n  ratingsStats\n}",
          "originalCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map((r: Rating) => (r.movieId, r))\n    val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n    val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map((tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating))\n    val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n    val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map((x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)))\n    ratingsStats\n  }",
          "status" : "Lived"
        },
        {
          "id" : 114,
          "originalProgramId" : 4,
          "mutationOperator" : "JTR",
          "mutationOperatorDescription" : "Join Transformation Replacement",
          "mutantCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map { (r: Rating) => (r.movieId, r) }\n  val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.rightOuterJoin(ratingsMovieIdKey).map(tuple => (tuple._1, (tuple._2._1.getOrElse(null.asInstanceOf[Movie]), tuple._2._2)))\n  val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map { (tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating) }\n  val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n  val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map { (x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)) }\n  ratingsStats\n}",
          "originalCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map((r: Rating) => (r.movieId, r))\n    val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n    val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map((tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating))\n    val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n    val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map((x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)))\n    ratingsStats\n  }",
          "status" : "Lived"
        },
        {
          "id" : 115,
          "originalProgramId" : 4,
          "mutationOperator" : "JTR",
          "mutationOperatorDescription" : "Join Transformation Replacement",
          "mutantCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map { (r: Rating) => (r.movieId, r) }\n  val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.fullOuterJoin(ratingsMovieIdKey).map(tuple => (tuple._1, (tuple._2._1.getOrElse(null.asInstanceOf[Movie]), tuple._2._2.getOrElse(null.asInstanceOf[Rating]))))\n  val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map { (tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating) }\n  val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n  val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map { (x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)) }\n  ratingsStats\n}",
          "originalCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map((r: Rating) => (r.movieId, r))\n    val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n    val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map((tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating))\n    val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n    val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map((x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)))\n    ratingsStats\n  }",
          "status" : "Lived"
        },
        {
          "id" : 116,
          "originalProgramId" : 5,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def meanOfMeansOfRatingsOfAllMovies(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))]) = {\n  val meanOfRatingsAllMovies: RDD[(Double, Int)] = ratingsStats.map { (inputParameter: (Tuple3[Int, String, Int], Tuple4[Int, Double, Double, Double])) => {\n    val originalFunction = ((m: ((Int, String, Int), (Int, Double, Double, Double))) => (m._2._2, 1))(_)\n    val originalValue = originalFunction(inputParameter)\n    (0d, originalValue._2)\n  } }\n  val sumMeanOfRatingsAllMovies: (Double, Int) = meanOfRatingsAllMovies.reduce { (m1: (Double, Int), m2: (Double, Int)) => (m1._1 + m2._1, m1._2 + m2._2) }\n  sumMeanOfRatingsAllMovies._1 / sumMeanOfRatingsAllMovies._2\n}",
          "originalCode" : "def meanOfMeansOfRatingsOfAllMovies(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))]) = {\n    val meanOfRatingsAllMovies: RDD[(Double, Int)] = ratingsStats.map((m: ((Int, String, Int), (Int, Double, Double, Double))) => (m._2._2, 1))\n    val sumMeanOfRatingsAllMovies: (Double, Int) = meanOfRatingsAllMovies.reduce((m1: (Double, Int), m2: (Double, Int)) => (m1._1 + m2._1, m1._2 + m2._2))\n    sumMeanOfRatingsAllMovies._1 / sumMeanOfRatingsAllMovies._2\n  }",
          "status" : "Killed"
        },
        {
          "id" : 117,
          "originalProgramId" : 5,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def meanOfMeansOfRatingsOfAllMovies(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))]) = {\n  val meanOfRatingsAllMovies: RDD[(Double, Int)] = ratingsStats.map { (inputParameter: (Tuple3[Int, String, Int], Tuple4[Int, Double, Double, Double])) => {\n    val originalFunction = ((m: ((Int, String, Int), (Int, Double, Double, Double))) => (m._2._2, 1))(_)\n    val originalValue = originalFunction(inputParameter)\n    (1d, originalValue._2)\n  } }\n  val sumMeanOfRatingsAllMovies: (Double, Int) = meanOfRatingsAllMovies.reduce { (m1: (Double, Int), m2: (Double, Int)) => (m1._1 + m2._1, m1._2 + m2._2) }\n  sumMeanOfRatingsAllMovies._1 / sumMeanOfRatingsAllMovies._2\n}",
          "originalCode" : "def meanOfMeansOfRatingsOfAllMovies(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))]) = {\n    val meanOfRatingsAllMovies: RDD[(Double, Int)] = ratingsStats.map((m: ((Int, String, Int), (Int, Double, Double, Double))) => (m._2._2, 1))\n    val sumMeanOfRatingsAllMovies: (Double, Int) = meanOfRatingsAllMovies.reduce((m1: (Double, Int), m2: (Double, Int)) => (m1._1 + m2._1, m1._2 + m2._2))\n    sumMeanOfRatingsAllMovies._1 / sumMeanOfRatingsAllMovies._2\n  }",
          "status" : "Killed"
        },
        {
          "id" : 118,
          "originalProgramId" : 5,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def meanOfMeansOfRatingsOfAllMovies(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))]) = {\n  val meanOfRatingsAllMovies: RDD[(Double, Int)] = ratingsStats.map { (inputParameter: (Tuple3[Int, String, Int], Tuple4[Int, Double, Double, Double])) => {\n    val originalFunction = ((m: ((Int, String, Int), (Int, Double, Double, Double))) => (m._2._2, 1))(_)\n    val originalValue = originalFunction(inputParameter)\n    (Double.MaxValue, originalValue._2)\n  } }\n  val sumMeanOfRatingsAllMovies: (Double, Int) = meanOfRatingsAllMovies.reduce { (m1: (Double, Int), m2: (Double, Int)) => (m1._1 + m2._1, m1._2 + m2._2) }\n  sumMeanOfRatingsAllMovies._1 / sumMeanOfRatingsAllMovies._2\n}",
          "originalCode" : "def meanOfMeansOfRatingsOfAllMovies(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))]) = {\n    val meanOfRatingsAllMovies: RDD[(Double, Int)] = ratingsStats.map((m: ((Int, String, Int), (Int, Double, Double, Double))) => (m._2._2, 1))\n    val sumMeanOfRatingsAllMovies: (Double, Int) = meanOfRatingsAllMovies.reduce((m1: (Double, Int), m2: (Double, Int)) => (m1._1 + m2._1, m1._2 + m2._2))\n    sumMeanOfRatingsAllMovies._1 / sumMeanOfRatingsAllMovies._2\n  }",
          "status" : "Killed"
        },
        {
          "id" : 119,
          "originalProgramId" : 5,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def meanOfMeansOfRatingsOfAllMovies(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))]) = {\n  val meanOfRatingsAllMovies: RDD[(Double, Int)] = ratingsStats.map { (inputParameter: (Tuple3[Int, String, Int], Tuple4[Int, Double, Double, Double])) => {\n    val originalFunction = ((m: ((Int, String, Int), (Int, Double, Double, Double))) => (m._2._2, 1))(_)\n    val originalValue = originalFunction(inputParameter)\n    (Double.MinValue, originalValue._2)\n  } }\n  val sumMeanOfRatingsAllMovies: (Double, Int) = meanOfRatingsAllMovies.reduce { (m1: (Double, Int), m2: (Double, Int)) => (m1._1 + m2._1, m1._2 + m2._2) }\n  sumMeanOfRatingsAllMovies._1 / sumMeanOfRatingsAllMovies._2\n}",
          "originalCode" : "def meanOfMeansOfRatingsOfAllMovies(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))]) = {\n    val meanOfRatingsAllMovies: RDD[(Double, Int)] = ratingsStats.map((m: ((Int, String, Int), (Int, Double, Double, Double))) => (m._2._2, 1))\n    val sumMeanOfRatingsAllMovies: (Double, Int) = meanOfRatingsAllMovies.reduce((m1: (Double, Int), m2: (Double, Int)) => (m1._1 + m2._1, m1._2 + m2._2))\n    sumMeanOfRatingsAllMovies._1 / sumMeanOfRatingsAllMovies._2\n  }",
          "status" : "Killed"
        },
        {
          "id" : 120,
          "originalProgramId" : 5,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def meanOfMeansOfRatingsOfAllMovies(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))]) = {\n  val meanOfRatingsAllMovies: RDD[(Double, Int)] = ratingsStats.map { (inputParameter: (Tuple3[Int, String, Int], Tuple4[Int, Double, Double, Double])) => {\n    val originalFunction = ((m: ((Int, String, Int), (Int, Double, Double, Double))) => (m._2._2, 1))(_)\n    val originalValue = originalFunction(inputParameter)\n    (-originalValue._1, originalValue._2)\n  } }\n  val sumMeanOfRatingsAllMovies: (Double, Int) = meanOfRatingsAllMovies.reduce { (m1: (Double, Int), m2: (Double, Int)) => (m1._1 + m2._1, m1._2 + m2._2) }\n  sumMeanOfRatingsAllMovies._1 / sumMeanOfRatingsAllMovies._2\n}",
          "originalCode" : "def meanOfMeansOfRatingsOfAllMovies(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))]) = {\n    val meanOfRatingsAllMovies: RDD[(Double, Int)] = ratingsStats.map((m: ((Int, String, Int), (Int, Double, Double, Double))) => (m._2._2, 1))\n    val sumMeanOfRatingsAllMovies: (Double, Int) = meanOfRatingsAllMovies.reduce((m1: (Double, Int), m2: (Double, Int)) => (m1._1 + m2._1, m1._2 + m2._2))\n    sumMeanOfRatingsAllMovies._1 / sumMeanOfRatingsAllMovies._2\n  }",
          "status" : "Killed"
        },
        {
          "id" : 121,
          "originalProgramId" : 5,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def meanOfMeansOfRatingsOfAllMovies(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))]) = {\n  val meanOfRatingsAllMovies: RDD[(Double, Int)] = ratingsStats.map { (inputParameter: (Tuple3[Int, String, Int], Tuple4[Int, Double, Double, Double])) => {\n    val originalFunction = ((m: ((Int, String, Int), (Int, Double, Double, Double))) => (m._2._2, 1))(_)\n    val originalValue = originalFunction(inputParameter)\n    (originalValue._1, 0)\n  } }\n  val sumMeanOfRatingsAllMovies: (Double, Int) = meanOfRatingsAllMovies.reduce { (m1: (Double, Int), m2: (Double, Int)) => (m1._1 + m2._1, m1._2 + m2._2) }\n  sumMeanOfRatingsAllMovies._1 / sumMeanOfRatingsAllMovies._2\n}",
          "originalCode" : "def meanOfMeansOfRatingsOfAllMovies(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))]) = {\n    val meanOfRatingsAllMovies: RDD[(Double, Int)] = ratingsStats.map((m: ((Int, String, Int), (Int, Double, Double, Double))) => (m._2._2, 1))\n    val sumMeanOfRatingsAllMovies: (Double, Int) = meanOfRatingsAllMovies.reduce((m1: (Double, Int), m2: (Double, Int)) => (m1._1 + m2._1, m1._2 + m2._2))\n    sumMeanOfRatingsAllMovies._1 / sumMeanOfRatingsAllMovies._2\n  }",
          "status" : "Killed"
        },
        {
          "id" : 122,
          "originalProgramId" : 5,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def meanOfMeansOfRatingsOfAllMovies(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))]) = {\n  val meanOfRatingsAllMovies: RDD[(Double, Int)] = ratingsStats.map { (inputParameter: (Tuple3[Int, String, Int], Tuple4[Int, Double, Double, Double])) => {\n    val originalFunction = ((m: ((Int, String, Int), (Int, Double, Double, Double))) => (m._2._2, 1))(_)\n    val originalValue = originalFunction(inputParameter)\n    (originalValue._1, 1)\n  } }\n  val sumMeanOfRatingsAllMovies: (Double, Int) = meanOfRatingsAllMovies.reduce { (m1: (Double, Int), m2: (Double, Int)) => (m1._1 + m2._1, m1._2 + m2._2) }\n  sumMeanOfRatingsAllMovies._1 / sumMeanOfRatingsAllMovies._2\n}",
          "originalCode" : "def meanOfMeansOfRatingsOfAllMovies(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))]) = {\n    val meanOfRatingsAllMovies: RDD[(Double, Int)] = ratingsStats.map((m: ((Int, String, Int), (Int, Double, Double, Double))) => (m._2._2, 1))\n    val sumMeanOfRatingsAllMovies: (Double, Int) = meanOfRatingsAllMovies.reduce((m1: (Double, Int), m2: (Double, Int)) => (m1._1 + m2._1, m1._2 + m2._2))\n    sumMeanOfRatingsAllMovies._1 / sumMeanOfRatingsAllMovies._2\n  }",
          "status" : "Equivalent"
        },
        {
          "id" : 123,
          "originalProgramId" : 5,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def meanOfMeansOfRatingsOfAllMovies(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))]) = {\n  val meanOfRatingsAllMovies: RDD[(Double, Int)] = ratingsStats.map { (inputParameter: (Tuple3[Int, String, Int], Tuple4[Int, Double, Double, Double])) => {\n    val originalFunction = ((m: ((Int, String, Int), (Int, Double, Double, Double))) => (m._2._2, 1))(_)\n    val originalValue = originalFunction(inputParameter)\n    (originalValue._1, Int.MaxValue)\n  } }\n  val sumMeanOfRatingsAllMovies: (Double, Int) = meanOfRatingsAllMovies.reduce { (m1: (Double, Int), m2: (Double, Int)) => (m1._1 + m2._1, m1._2 + m2._2) }\n  sumMeanOfRatingsAllMovies._1 / sumMeanOfRatingsAllMovies._2\n}",
          "originalCode" : "def meanOfMeansOfRatingsOfAllMovies(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))]) = {\n    val meanOfRatingsAllMovies: RDD[(Double, Int)] = ratingsStats.map((m: ((Int, String, Int), (Int, Double, Double, Double))) => (m._2._2, 1))\n    val sumMeanOfRatingsAllMovies: (Double, Int) = meanOfRatingsAllMovies.reduce((m1: (Double, Int), m2: (Double, Int)) => (m1._1 + m2._1, m1._2 + m2._2))\n    sumMeanOfRatingsAllMovies._1 / sumMeanOfRatingsAllMovies._2\n  }",
          "status" : "Killed"
        },
        {
          "id" : 124,
          "originalProgramId" : 5,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def meanOfMeansOfRatingsOfAllMovies(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))]) = {\n  val meanOfRatingsAllMovies: RDD[(Double, Int)] = ratingsStats.map { (inputParameter: (Tuple3[Int, String, Int], Tuple4[Int, Double, Double, Double])) => {\n    val originalFunction = ((m: ((Int, String, Int), (Int, Double, Double, Double))) => (m._2._2, 1))(_)\n    val originalValue = originalFunction(inputParameter)\n    (originalValue._1, Int.MinValue)\n  } }\n  val sumMeanOfRatingsAllMovies: (Double, Int) = meanOfRatingsAllMovies.reduce { (m1: (Double, Int), m2: (Double, Int)) => (m1._1 + m2._1, m1._2 + m2._2) }\n  sumMeanOfRatingsAllMovies._1 / sumMeanOfRatingsAllMovies._2\n}",
          "originalCode" : "def meanOfMeansOfRatingsOfAllMovies(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))]) = {\n    val meanOfRatingsAllMovies: RDD[(Double, Int)] = ratingsStats.map((m: ((Int, String, Int), (Int, Double, Double, Double))) => (m._2._2, 1))\n    val sumMeanOfRatingsAllMovies: (Double, Int) = meanOfRatingsAllMovies.reduce((m1: (Double, Int), m2: (Double, Int)) => (m1._1 + m2._1, m1._2 + m2._2))\n    sumMeanOfRatingsAllMovies._1 / sumMeanOfRatingsAllMovies._2\n  }",
          "status" : "Killed"
        },
        {
          "id" : 125,
          "originalProgramId" : 5,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def meanOfMeansOfRatingsOfAllMovies(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))]) = {\n  val meanOfRatingsAllMovies: RDD[(Double, Int)] = ratingsStats.map { (inputParameter: (Tuple3[Int, String, Int], Tuple4[Int, Double, Double, Double])) => {\n    val originalFunction = ((m: ((Int, String, Int), (Int, Double, Double, Double))) => (m._2._2, 1))(_)\n    val originalValue = originalFunction(inputParameter)\n    (originalValue._1, -originalValue._2)\n  } }\n  val sumMeanOfRatingsAllMovies: (Double, Int) = meanOfRatingsAllMovies.reduce { (m1: (Double, Int), m2: (Double, Int)) => (m1._1 + m2._1, m1._2 + m2._2) }\n  sumMeanOfRatingsAllMovies._1 / sumMeanOfRatingsAllMovies._2\n}",
          "originalCode" : "def meanOfMeansOfRatingsOfAllMovies(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))]) = {\n    val meanOfRatingsAllMovies: RDD[(Double, Int)] = ratingsStats.map((m: ((Int, String, Int), (Int, Double, Double, Double))) => (m._2._2, 1))\n    val sumMeanOfRatingsAllMovies: (Double, Int) = meanOfRatingsAllMovies.reduce((m1: (Double, Int), m2: (Double, Int)) => (m1._1 + m2._1, m1._2 + m2._2))\n    sumMeanOfRatingsAllMovies._1 / sumMeanOfRatingsAllMovies._2\n  }",
          "status" : "Killed"
        },
        {
          "id" : 126,
          "originalProgramId" : 5,
          "mutationOperator" : "DTI",
          "mutationOperatorDescription" : "Distinct Transformation Insertion",
          "mutantCode" : "def meanOfMeansOfRatingsOfAllMovies(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))]) = {\n  val meanOfRatingsAllMovies: RDD[(Double, Int)] = ratingsStats.map { (m: ((Int, String, Int), (Int, Double, Double, Double))) => (m._2._2, 1) }.distinct()\n  val sumMeanOfRatingsAllMovies: (Double, Int) = meanOfRatingsAllMovies.reduce { (m1: (Double, Int), m2: (Double, Int)) => (m1._1 + m2._1, m1._2 + m2._2) }\n  sumMeanOfRatingsAllMovies._1 / sumMeanOfRatingsAllMovies._2\n}",
          "originalCode" : "def meanOfMeansOfRatingsOfAllMovies(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))]) = {\n    val meanOfRatingsAllMovies: RDD[(Double, Int)] = ratingsStats.map((m: ((Int, String, Int), (Int, Double, Double, Double))) => (m._2._2, 1))\n    val sumMeanOfRatingsAllMovies: (Double, Int) = meanOfRatingsAllMovies.reduce((m1: (Double, Int), m2: (Double, Int)) => (m1._1 + m2._1, m1._2 + m2._2))\n    sumMeanOfRatingsAllMovies._1 / sumMeanOfRatingsAllMovies._2\n  }",
          "status" : "Lived"
        },
        {
          "id" : 127,
          "originalProgramId" : 6,
          "mutationOperator" : "UTD",
          "mutationOperatorDescription" : "Unary Transformation Deletion",
          "mutantCode" : "def bestMoviesDecade(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))], minimumVotesRequired: Double, meanOfMeansRatingsOfAllMovies: Double) = {\n  val ratingsStatisticsWithWR: RDD[((Int, String, Int), (Int, Double, Double, Double, Double))] = ratingsStats.map { (s: ((Int, String, Int), (Int, Double, Double, Double))) => (s._1, (s._2._1, s._2._2, s._2._3, s._2._4, weighted_rating(s._2._2, s._2._1.toDouble, minimumVotesRequired, meanOfMeansRatingsOfAllMovies))) }\n  val ratingsStatisticsWithWRDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = ratingsStatisticsWithWR.map { (m: ((Int, String, Int), (Int, Double, Double, Double, Double))) => (m._1._3 / 10 * 10, (m._1._2, m._2)) }\n  val groupByDecade: RDD[(Int, Iterable[(String, (Int, Double, Double, Double, Double))])] = ratingsStatisticsWithWRDecade.groupByKey()\n  val bestMoviesDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = groupByDecade.map { (j: (Int, Iterable[(String, (Int, Double, Double, Double, Double))])) => (j._1, j._2.reduce((j1, j2) => if (j1._2._5 > j2._2._5) j1 else j2)) }\n  val bestMoviesDecadeSorted: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = bestMoviesDecade\n  bestMoviesDecadeSorted\n}",
          "originalCode" : "def bestMoviesDecade(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))], minimumVotesRequired: Double, meanOfMeansRatingsOfAllMovies: Double) = {\n    val ratingsStatisticsWithWR: RDD[((Int, String, Int), (Int, Double, Double, Double, Double))] = ratingsStats.map((s: ((Int, String, Int), (Int, Double, Double, Double))) => (s._1, (s._2._1, s._2._2, s._2._3, s._2._4, weighted_rating(s._2._2, s._2._1.toDouble, minimumVotesRequired, meanOfMeansRatingsOfAllMovies))))\n    val ratingsStatisticsWithWRDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = ratingsStatisticsWithWR.map((m: (((Int, String, Int), (Int, Double, Double, Double, Double)))) => (m._1._3 / 10 * 10, (m._1._2, m._2)))\n    val groupByDecade: RDD[(Int, Iterable[(String, (Int, Double, Double, Double, Double))])] = ratingsStatisticsWithWRDecade.groupByKey()\n    val bestMoviesDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = groupByDecade.map((j: (Int, Iterable[(String, (Int, Double, Double, Double, Double))])) => (j._1, j._2.reduce((j1, j2) => if (j1._2._5 > j2._2._5) j1 else j2)))\n    val bestMoviesDecadeSorted: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = bestMoviesDecade.sortByKey(true)\n    bestMoviesDecadeSorted\n  }",
          "status" : "Lived"
        },
        {
          "id" : 128,
          "originalProgramId" : 6,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def bestMoviesDecade(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))], minimumVotesRequired: Double, meanOfMeansRatingsOfAllMovies: Double) = {\n  val ratingsStatisticsWithWR: RDD[((Int, String, Int), (Int, Double, Double, Double, Double))] = ratingsStats.map { (s: ((Int, String, Int), (Int, Double, Double, Double))) => (s._1, (s._2._1, s._2._2, s._2._3, s._2._4, weighted_rating(s._2._2, s._2._1.toDouble, minimumVotesRequired, meanOfMeansRatingsOfAllMovies))) }\n  val ratingsStatisticsWithWRDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = ratingsStatisticsWithWR.map { (inputParameter: (Tuple3[Int, String, Int], Tuple5[Int, Double, Double, Double, Double])) => {\n    val originalFunction = ((m: ((Int, String, Int), (Int, Double, Double, Double, Double))) => (m._1._3 / 10 * 10, (m._1._2, m._2)))(_)\n    val originalValue = originalFunction(inputParameter)\n    (0, originalValue._2)\n  } }\n  val groupByDecade: RDD[(Int, Iterable[(String, (Int, Double, Double, Double, Double))])] = ratingsStatisticsWithWRDecade.groupByKey()\n  val bestMoviesDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = groupByDecade.map { (j: (Int, Iterable[(String, (Int, Double, Double, Double, Double))])) => (j._1, j._2.reduce((j1, j2) => if (j1._2._5 > j2._2._5) j1 else j2)) }\n  val bestMoviesDecadeSorted: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = bestMoviesDecade.sortByKey(true)\n  bestMoviesDecadeSorted\n}",
          "originalCode" : "def bestMoviesDecade(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))], minimumVotesRequired: Double, meanOfMeansRatingsOfAllMovies: Double) = {\n    val ratingsStatisticsWithWR: RDD[((Int, String, Int), (Int, Double, Double, Double, Double))] = ratingsStats.map((s: ((Int, String, Int), (Int, Double, Double, Double))) => (s._1, (s._2._1, s._2._2, s._2._3, s._2._4, weighted_rating(s._2._2, s._2._1.toDouble, minimumVotesRequired, meanOfMeansRatingsOfAllMovies))))\n    val ratingsStatisticsWithWRDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = ratingsStatisticsWithWR.map((m: (((Int, String, Int), (Int, Double, Double, Double, Double)))) => (m._1._3 / 10 * 10, (m._1._2, m._2)))\n    val groupByDecade: RDD[(Int, Iterable[(String, (Int, Double, Double, Double, Double))])] = ratingsStatisticsWithWRDecade.groupByKey()\n    val bestMoviesDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = groupByDecade.map((j: (Int, Iterable[(String, (Int, Double, Double, Double, Double))])) => (j._1, j._2.reduce((j1, j2) => if (j1._2._5 > j2._2._5) j1 else j2)))\n    val bestMoviesDecadeSorted: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = bestMoviesDecade.sortByKey(true)\n    bestMoviesDecadeSorted\n  }",
          "status" : "Killed"
        },
        {
          "id" : 129,
          "originalProgramId" : 6,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def bestMoviesDecade(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))], minimumVotesRequired: Double, meanOfMeansRatingsOfAllMovies: Double) = {\n  val ratingsStatisticsWithWR: RDD[((Int, String, Int), (Int, Double, Double, Double, Double))] = ratingsStats.map { (s: ((Int, String, Int), (Int, Double, Double, Double))) => (s._1, (s._2._1, s._2._2, s._2._3, s._2._4, weighted_rating(s._2._2, s._2._1.toDouble, minimumVotesRequired, meanOfMeansRatingsOfAllMovies))) }\n  val ratingsStatisticsWithWRDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = ratingsStatisticsWithWR.map { (inputParameter: (Tuple3[Int, String, Int], Tuple5[Int, Double, Double, Double, Double])) => {\n    val originalFunction = ((m: ((Int, String, Int), (Int, Double, Double, Double, Double))) => (m._1._3 / 10 * 10, (m._1._2, m._2)))(_)\n    val originalValue = originalFunction(inputParameter)\n    (1, originalValue._2)\n  } }\n  val groupByDecade: RDD[(Int, Iterable[(String, (Int, Double, Double, Double, Double))])] = ratingsStatisticsWithWRDecade.groupByKey()\n  val bestMoviesDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = groupByDecade.map { (j: (Int, Iterable[(String, (Int, Double, Double, Double, Double))])) => (j._1, j._2.reduce((j1, j2) => if (j1._2._5 > j2._2._5) j1 else j2)) }\n  val bestMoviesDecadeSorted: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = bestMoviesDecade.sortByKey(true)\n  bestMoviesDecadeSorted\n}",
          "originalCode" : "def bestMoviesDecade(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))], minimumVotesRequired: Double, meanOfMeansRatingsOfAllMovies: Double) = {\n    val ratingsStatisticsWithWR: RDD[((Int, String, Int), (Int, Double, Double, Double, Double))] = ratingsStats.map((s: ((Int, String, Int), (Int, Double, Double, Double))) => (s._1, (s._2._1, s._2._2, s._2._3, s._2._4, weighted_rating(s._2._2, s._2._1.toDouble, minimumVotesRequired, meanOfMeansRatingsOfAllMovies))))\n    val ratingsStatisticsWithWRDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = ratingsStatisticsWithWR.map((m: (((Int, String, Int), (Int, Double, Double, Double, Double)))) => (m._1._3 / 10 * 10, (m._1._2, m._2)))\n    val groupByDecade: RDD[(Int, Iterable[(String, (Int, Double, Double, Double, Double))])] = ratingsStatisticsWithWRDecade.groupByKey()\n    val bestMoviesDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = groupByDecade.map((j: (Int, Iterable[(String, (Int, Double, Double, Double, Double))])) => (j._1, j._2.reduce((j1, j2) => if (j1._2._5 > j2._2._5) j1 else j2)))\n    val bestMoviesDecadeSorted: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = bestMoviesDecade.sortByKey(true)\n    bestMoviesDecadeSorted\n  }",
          "status" : "Killed"
        },
        {
          "id" : 130,
          "originalProgramId" : 6,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def bestMoviesDecade(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))], minimumVotesRequired: Double, meanOfMeansRatingsOfAllMovies: Double) = {\n  val ratingsStatisticsWithWR: RDD[((Int, String, Int), (Int, Double, Double, Double, Double))] = ratingsStats.map { (s: ((Int, String, Int), (Int, Double, Double, Double))) => (s._1, (s._2._1, s._2._2, s._2._3, s._2._4, weighted_rating(s._2._2, s._2._1.toDouble, minimumVotesRequired, meanOfMeansRatingsOfAllMovies))) }\n  val ratingsStatisticsWithWRDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = ratingsStatisticsWithWR.map { (inputParameter: (Tuple3[Int, String, Int], Tuple5[Int, Double, Double, Double, Double])) => {\n    val originalFunction = ((m: ((Int, String, Int), (Int, Double, Double, Double, Double))) => (m._1._3 / 10 * 10, (m._1._2, m._2)))(_)\n    val originalValue = originalFunction(inputParameter)\n    (Int.MaxValue, originalValue._2)\n  } }\n  val groupByDecade: RDD[(Int, Iterable[(String, (Int, Double, Double, Double, Double))])] = ratingsStatisticsWithWRDecade.groupByKey()\n  val bestMoviesDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = groupByDecade.map { (j: (Int, Iterable[(String, (Int, Double, Double, Double, Double))])) => (j._1, j._2.reduce((j1, j2) => if (j1._2._5 > j2._2._5) j1 else j2)) }\n  val bestMoviesDecadeSorted: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = bestMoviesDecade.sortByKey(true)\n  bestMoviesDecadeSorted\n}",
          "originalCode" : "def bestMoviesDecade(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))], minimumVotesRequired: Double, meanOfMeansRatingsOfAllMovies: Double) = {\n    val ratingsStatisticsWithWR: RDD[((Int, String, Int), (Int, Double, Double, Double, Double))] = ratingsStats.map((s: ((Int, String, Int), (Int, Double, Double, Double))) => (s._1, (s._2._1, s._2._2, s._2._3, s._2._4, weighted_rating(s._2._2, s._2._1.toDouble, minimumVotesRequired, meanOfMeansRatingsOfAllMovies))))\n    val ratingsStatisticsWithWRDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = ratingsStatisticsWithWR.map((m: (((Int, String, Int), (Int, Double, Double, Double, Double)))) => (m._1._3 / 10 * 10, (m._1._2, m._2)))\n    val groupByDecade: RDD[(Int, Iterable[(String, (Int, Double, Double, Double, Double))])] = ratingsStatisticsWithWRDecade.groupByKey()\n    val bestMoviesDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = groupByDecade.map((j: (Int, Iterable[(String, (Int, Double, Double, Double, Double))])) => (j._1, j._2.reduce((j1, j2) => if (j1._2._5 > j2._2._5) j1 else j2)))\n    val bestMoviesDecadeSorted: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = bestMoviesDecade.sortByKey(true)\n    bestMoviesDecadeSorted\n  }",
          "status" : "Killed"
        },
        {
          "id" : 131,
          "originalProgramId" : 6,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def bestMoviesDecade(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))], minimumVotesRequired: Double, meanOfMeansRatingsOfAllMovies: Double) = {\n  val ratingsStatisticsWithWR: RDD[((Int, String, Int), (Int, Double, Double, Double, Double))] = ratingsStats.map { (s: ((Int, String, Int), (Int, Double, Double, Double))) => (s._1, (s._2._1, s._2._2, s._2._3, s._2._4, weighted_rating(s._2._2, s._2._1.toDouble, minimumVotesRequired, meanOfMeansRatingsOfAllMovies))) }\n  val ratingsStatisticsWithWRDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = ratingsStatisticsWithWR.map { (inputParameter: (Tuple3[Int, String, Int], Tuple5[Int, Double, Double, Double, Double])) => {\n    val originalFunction = ((m: ((Int, String, Int), (Int, Double, Double, Double, Double))) => (m._1._3 / 10 * 10, (m._1._2, m._2)))(_)\n    val originalValue = originalFunction(inputParameter)\n    (Int.MinValue, originalValue._2)\n  } }\n  val groupByDecade: RDD[(Int, Iterable[(String, (Int, Double, Double, Double, Double))])] = ratingsStatisticsWithWRDecade.groupByKey()\n  val bestMoviesDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = groupByDecade.map { (j: (Int, Iterable[(String, (Int, Double, Double, Double, Double))])) => (j._1, j._2.reduce((j1, j2) => if (j1._2._5 > j2._2._5) j1 else j2)) }\n  val bestMoviesDecadeSorted: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = bestMoviesDecade.sortByKey(true)\n  bestMoviesDecadeSorted\n}",
          "originalCode" : "def bestMoviesDecade(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))], minimumVotesRequired: Double, meanOfMeansRatingsOfAllMovies: Double) = {\n    val ratingsStatisticsWithWR: RDD[((Int, String, Int), (Int, Double, Double, Double, Double))] = ratingsStats.map((s: ((Int, String, Int), (Int, Double, Double, Double))) => (s._1, (s._2._1, s._2._2, s._2._3, s._2._4, weighted_rating(s._2._2, s._2._1.toDouble, minimumVotesRequired, meanOfMeansRatingsOfAllMovies))))\n    val ratingsStatisticsWithWRDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = ratingsStatisticsWithWR.map((m: (((Int, String, Int), (Int, Double, Double, Double, Double)))) => (m._1._3 / 10 * 10, (m._1._2, m._2)))\n    val groupByDecade: RDD[(Int, Iterable[(String, (Int, Double, Double, Double, Double))])] = ratingsStatisticsWithWRDecade.groupByKey()\n    val bestMoviesDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = groupByDecade.map((j: (Int, Iterable[(String, (Int, Double, Double, Double, Double))])) => (j._1, j._2.reduce((j1, j2) => if (j1._2._5 > j2._2._5) j1 else j2)))\n    val bestMoviesDecadeSorted: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = bestMoviesDecade.sortByKey(true)\n    bestMoviesDecadeSorted\n  }",
          "status" : "Killed"
        },
        {
          "id" : 132,
          "originalProgramId" : 6,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def bestMoviesDecade(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))], minimumVotesRequired: Double, meanOfMeansRatingsOfAllMovies: Double) = {\n  val ratingsStatisticsWithWR: RDD[((Int, String, Int), (Int, Double, Double, Double, Double))] = ratingsStats.map { (s: ((Int, String, Int), (Int, Double, Double, Double))) => (s._1, (s._2._1, s._2._2, s._2._3, s._2._4, weighted_rating(s._2._2, s._2._1.toDouble, minimumVotesRequired, meanOfMeansRatingsOfAllMovies))) }\n  val ratingsStatisticsWithWRDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = ratingsStatisticsWithWR.map { (inputParameter: (Tuple3[Int, String, Int], Tuple5[Int, Double, Double, Double, Double])) => {\n    val originalFunction = ((m: ((Int, String, Int), (Int, Double, Double, Double, Double))) => (m._1._3 / 10 * 10, (m._1._2, m._2)))(_)\n    val originalValue = originalFunction(inputParameter)\n    (-originalValue._1, originalValue._2)\n  } }\n  val groupByDecade: RDD[(Int, Iterable[(String, (Int, Double, Double, Double, Double))])] = ratingsStatisticsWithWRDecade.groupByKey()\n  val bestMoviesDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = groupByDecade.map { (j: (Int, Iterable[(String, (Int, Double, Double, Double, Double))])) => (j._1, j._2.reduce((j1, j2) => if (j1._2._5 > j2._2._5) j1 else j2)) }\n  val bestMoviesDecadeSorted: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = bestMoviesDecade.sortByKey(true)\n  bestMoviesDecadeSorted\n}",
          "originalCode" : "def bestMoviesDecade(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))], minimumVotesRequired: Double, meanOfMeansRatingsOfAllMovies: Double) = {\n    val ratingsStatisticsWithWR: RDD[((Int, String, Int), (Int, Double, Double, Double, Double))] = ratingsStats.map((s: ((Int, String, Int), (Int, Double, Double, Double))) => (s._1, (s._2._1, s._2._2, s._2._3, s._2._4, weighted_rating(s._2._2, s._2._1.toDouble, minimumVotesRequired, meanOfMeansRatingsOfAllMovies))))\n    val ratingsStatisticsWithWRDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = ratingsStatisticsWithWR.map((m: (((Int, String, Int), (Int, Double, Double, Double, Double)))) => (m._1._3 / 10 * 10, (m._1._2, m._2)))\n    val groupByDecade: RDD[(Int, Iterable[(String, (Int, Double, Double, Double, Double))])] = ratingsStatisticsWithWRDecade.groupByKey()\n    val bestMoviesDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = groupByDecade.map((j: (Int, Iterable[(String, (Int, Double, Double, Double, Double))])) => (j._1, j._2.reduce((j1, j2) => if (j1._2._5 > j2._2._5) j1 else j2)))\n    val bestMoviesDecadeSorted: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = bestMoviesDecade.sortByKey(true)\n    bestMoviesDecadeSorted\n  }",
          "status" : "Killed"
        },
        {
          "id" : 133,
          "originalProgramId" : 6,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def bestMoviesDecade(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))], minimumVotesRequired: Double, meanOfMeansRatingsOfAllMovies: Double) = {\n  val ratingsStatisticsWithWR: RDD[((Int, String, Int), (Int, Double, Double, Double, Double))] = ratingsStats.map { (s: ((Int, String, Int), (Int, Double, Double, Double))) => (s._1, (s._2._1, s._2._2, s._2._3, s._2._4, weighted_rating(s._2._2, s._2._1.toDouble, minimumVotesRequired, meanOfMeansRatingsOfAllMovies))) }\n  val ratingsStatisticsWithWRDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = ratingsStatisticsWithWR.map { (inputParameter: (Tuple3[Int, String, Int], Tuple5[Int, Double, Double, Double, Double])) => {\n    val originalFunction = ((m: ((Int, String, Int), (Int, Double, Double, Double, Double))) => (m._1._3 / 10 * 10, (m._1._2, m._2)))(_)\n    val originalValue = originalFunction(inputParameter)\n    (originalValue._1, (\"\", originalValue._2._2))\n  } }\n  val groupByDecade: RDD[(Int, Iterable[(String, (Int, Double, Double, Double, Double))])] = ratingsStatisticsWithWRDecade.groupByKey()\n  val bestMoviesDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = groupByDecade.map { (j: (Int, Iterable[(String, (Int, Double, Double, Double, Double))])) => (j._1, j._2.reduce((j1, j2) => if (j1._2._5 > j2._2._5) j1 else j2)) }\n  val bestMoviesDecadeSorted: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = bestMoviesDecade.sortByKey(true)\n  bestMoviesDecadeSorted\n}",
          "originalCode" : "def bestMoviesDecade(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))], minimumVotesRequired: Double, meanOfMeansRatingsOfAllMovies: Double) = {\n    val ratingsStatisticsWithWR: RDD[((Int, String, Int), (Int, Double, Double, Double, Double))] = ratingsStats.map((s: ((Int, String, Int), (Int, Double, Double, Double))) => (s._1, (s._2._1, s._2._2, s._2._3, s._2._4, weighted_rating(s._2._2, s._2._1.toDouble, minimumVotesRequired, meanOfMeansRatingsOfAllMovies))))\n    val ratingsStatisticsWithWRDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = ratingsStatisticsWithWR.map((m: (((Int, String, Int), (Int, Double, Double, Double, Double)))) => (m._1._3 / 10 * 10, (m._1._2, m._2)))\n    val groupByDecade: RDD[(Int, Iterable[(String, (Int, Double, Double, Double, Double))])] = ratingsStatisticsWithWRDecade.groupByKey()\n    val bestMoviesDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = groupByDecade.map((j: (Int, Iterable[(String, (Int, Double, Double, Double, Double))])) => (j._1, j._2.reduce((j1, j2) => if (j1._2._5 > j2._2._5) j1 else j2)))\n    val bestMoviesDecadeSorted: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = bestMoviesDecade.sortByKey(true)\n    bestMoviesDecadeSorted\n  }",
          "status" : "Killed"
        },
        {
          "id" : 134,
          "originalProgramId" : 6,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def bestMoviesDecade(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))], minimumVotesRequired: Double, meanOfMeansRatingsOfAllMovies: Double) = {\n  val ratingsStatisticsWithWR: RDD[((Int, String, Int), (Int, Double, Double, Double, Double))] = ratingsStats.map { (s: ((Int, String, Int), (Int, Double, Double, Double))) => (s._1, (s._2._1, s._2._2, s._2._3, s._2._4, weighted_rating(s._2._2, s._2._1.toDouble, minimumVotesRequired, meanOfMeansRatingsOfAllMovies))) }\n  val ratingsStatisticsWithWRDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = ratingsStatisticsWithWR.map { (m: ((Int, String, Int), (Int, Double, Double, Double, Double))) => (m._1._3 / 10 * 10, (m._1._2, m._2)) }\n  val groupByDecade: RDD[(Int, Iterable[(String, (Int, Double, Double, Double, Double))])] = ratingsStatisticsWithWRDecade.groupByKey()\n  val bestMoviesDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = groupByDecade.map { (inputParameter: (Int, Iterable[(String, Tuple5[Int, Double, Double, Double, Double])])) => {\n    val originalFunction = ((j: (Int, Iterable[(String, (Int, Double, Double, Double, Double))])) => (j._1, j._2.reduce((j1, j2) => if (j1._2._5 > j2._2._5) j1 else j2)))(_)\n    val originalValue = originalFunction(inputParameter)\n    (0, originalValue._2)\n  } }\n  val bestMoviesDecadeSorted: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = bestMoviesDecade.sortByKey(true)\n  bestMoviesDecadeSorted\n}",
          "originalCode" : "def bestMoviesDecade(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))], minimumVotesRequired: Double, meanOfMeansRatingsOfAllMovies: Double) = {\n    val ratingsStatisticsWithWR: RDD[((Int, String, Int), (Int, Double, Double, Double, Double))] = ratingsStats.map((s: ((Int, String, Int), (Int, Double, Double, Double))) => (s._1, (s._2._1, s._2._2, s._2._3, s._2._4, weighted_rating(s._2._2, s._2._1.toDouble, minimumVotesRequired, meanOfMeansRatingsOfAllMovies))))\n    val ratingsStatisticsWithWRDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = ratingsStatisticsWithWR.map((m: (((Int, String, Int), (Int, Double, Double, Double, Double)))) => (m._1._3 / 10 * 10, (m._1._2, m._2)))\n    val groupByDecade: RDD[(Int, Iterable[(String, (Int, Double, Double, Double, Double))])] = ratingsStatisticsWithWRDecade.groupByKey()\n    val bestMoviesDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = groupByDecade.map((j: (Int, Iterable[(String, (Int, Double, Double, Double, Double))])) => (j._1, j._2.reduce((j1, j2) => if (j1._2._5 > j2._2._5) j1 else j2)))\n    val bestMoviesDecadeSorted: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = bestMoviesDecade.sortByKey(true)\n    bestMoviesDecadeSorted\n  }",
          "status" : "Killed"
        },
        {
          "id" : 135,
          "originalProgramId" : 6,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def bestMoviesDecade(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))], minimumVotesRequired: Double, meanOfMeansRatingsOfAllMovies: Double) = {\n  val ratingsStatisticsWithWR: RDD[((Int, String, Int), (Int, Double, Double, Double, Double))] = ratingsStats.map { (s: ((Int, String, Int), (Int, Double, Double, Double))) => (s._1, (s._2._1, s._2._2, s._2._3, s._2._4, weighted_rating(s._2._2, s._2._1.toDouble, minimumVotesRequired, meanOfMeansRatingsOfAllMovies))) }\n  val ratingsStatisticsWithWRDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = ratingsStatisticsWithWR.map { (m: ((Int, String, Int), (Int, Double, Double, Double, Double))) => (m._1._3 / 10 * 10, (m._1._2, m._2)) }\n  val groupByDecade: RDD[(Int, Iterable[(String, (Int, Double, Double, Double, Double))])] = ratingsStatisticsWithWRDecade.groupByKey()\n  val bestMoviesDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = groupByDecade.map { (inputParameter: (Int, Iterable[(String, Tuple5[Int, Double, Double, Double, Double])])) => {\n    val originalFunction = ((j: (Int, Iterable[(String, (Int, Double, Double, Double, Double))])) => (j._1, j._2.reduce((j1, j2) => if (j1._2._5 > j2._2._5) j1 else j2)))(_)\n    val originalValue = originalFunction(inputParameter)\n    (1, originalValue._2)\n  } }\n  val bestMoviesDecadeSorted: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = bestMoviesDecade.sortByKey(true)\n  bestMoviesDecadeSorted\n}",
          "originalCode" : "def bestMoviesDecade(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))], minimumVotesRequired: Double, meanOfMeansRatingsOfAllMovies: Double) = {\n    val ratingsStatisticsWithWR: RDD[((Int, String, Int), (Int, Double, Double, Double, Double))] = ratingsStats.map((s: ((Int, String, Int), (Int, Double, Double, Double))) => (s._1, (s._2._1, s._2._2, s._2._3, s._2._4, weighted_rating(s._2._2, s._2._1.toDouble, minimumVotesRequired, meanOfMeansRatingsOfAllMovies))))\n    val ratingsStatisticsWithWRDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = ratingsStatisticsWithWR.map((m: (((Int, String, Int), (Int, Double, Double, Double, Double)))) => (m._1._3 / 10 * 10, (m._1._2, m._2)))\n    val groupByDecade: RDD[(Int, Iterable[(String, (Int, Double, Double, Double, Double))])] = ratingsStatisticsWithWRDecade.groupByKey()\n    val bestMoviesDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = groupByDecade.map((j: (Int, Iterable[(String, (Int, Double, Double, Double, Double))])) => (j._1, j._2.reduce((j1, j2) => if (j1._2._5 > j2._2._5) j1 else j2)))\n    val bestMoviesDecadeSorted: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = bestMoviesDecade.sortByKey(true)\n    bestMoviesDecadeSorted\n  }",
          "status" : "Killed"
        },
        {
          "id" : 136,
          "originalProgramId" : 6,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def bestMoviesDecade(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))], minimumVotesRequired: Double, meanOfMeansRatingsOfAllMovies: Double) = {\n  val ratingsStatisticsWithWR: RDD[((Int, String, Int), (Int, Double, Double, Double, Double))] = ratingsStats.map { (s: ((Int, String, Int), (Int, Double, Double, Double))) => (s._1, (s._2._1, s._2._2, s._2._3, s._2._4, weighted_rating(s._2._2, s._2._1.toDouble, minimumVotesRequired, meanOfMeansRatingsOfAllMovies))) }\n  val ratingsStatisticsWithWRDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = ratingsStatisticsWithWR.map { (m: ((Int, String, Int), (Int, Double, Double, Double, Double))) => (m._1._3 / 10 * 10, (m._1._2, m._2)) }\n  val groupByDecade: RDD[(Int, Iterable[(String, (Int, Double, Double, Double, Double))])] = ratingsStatisticsWithWRDecade.groupByKey()\n  val bestMoviesDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = groupByDecade.map { (inputParameter: (Int, Iterable[(String, Tuple5[Int, Double, Double, Double, Double])])) => {\n    val originalFunction = ((j: (Int, Iterable[(String, (Int, Double, Double, Double, Double))])) => (j._1, j._2.reduce((j1, j2) => if (j1._2._5 > j2._2._5) j1 else j2)))(_)\n    val originalValue = originalFunction(inputParameter)\n    (Int.MaxValue, originalValue._2)\n  } }\n  val bestMoviesDecadeSorted: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = bestMoviesDecade.sortByKey(true)\n  bestMoviesDecadeSorted\n}",
          "originalCode" : "def bestMoviesDecade(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))], minimumVotesRequired: Double, meanOfMeansRatingsOfAllMovies: Double) = {\n    val ratingsStatisticsWithWR: RDD[((Int, String, Int), (Int, Double, Double, Double, Double))] = ratingsStats.map((s: ((Int, String, Int), (Int, Double, Double, Double))) => (s._1, (s._2._1, s._2._2, s._2._3, s._2._4, weighted_rating(s._2._2, s._2._1.toDouble, minimumVotesRequired, meanOfMeansRatingsOfAllMovies))))\n    val ratingsStatisticsWithWRDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = ratingsStatisticsWithWR.map((m: (((Int, String, Int), (Int, Double, Double, Double, Double)))) => (m._1._3 / 10 * 10, (m._1._2, m._2)))\n    val groupByDecade: RDD[(Int, Iterable[(String, (Int, Double, Double, Double, Double))])] = ratingsStatisticsWithWRDecade.groupByKey()\n    val bestMoviesDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = groupByDecade.map((j: (Int, Iterable[(String, (Int, Double, Double, Double, Double))])) => (j._1, j._2.reduce((j1, j2) => if (j1._2._5 > j2._2._5) j1 else j2)))\n    val bestMoviesDecadeSorted: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = bestMoviesDecade.sortByKey(true)\n    bestMoviesDecadeSorted\n  }",
          "status" : "Killed"
        },
        {
          "id" : 137,
          "originalProgramId" : 6,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def bestMoviesDecade(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))], minimumVotesRequired: Double, meanOfMeansRatingsOfAllMovies: Double) = {\n  val ratingsStatisticsWithWR: RDD[((Int, String, Int), (Int, Double, Double, Double, Double))] = ratingsStats.map { (s: ((Int, String, Int), (Int, Double, Double, Double))) => (s._1, (s._2._1, s._2._2, s._2._3, s._2._4, weighted_rating(s._2._2, s._2._1.toDouble, minimumVotesRequired, meanOfMeansRatingsOfAllMovies))) }\n  val ratingsStatisticsWithWRDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = ratingsStatisticsWithWR.map { (m: ((Int, String, Int), (Int, Double, Double, Double, Double))) => (m._1._3 / 10 * 10, (m._1._2, m._2)) }\n  val groupByDecade: RDD[(Int, Iterable[(String, (Int, Double, Double, Double, Double))])] = ratingsStatisticsWithWRDecade.groupByKey()\n  val bestMoviesDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = groupByDecade.map { (inputParameter: (Int, Iterable[(String, Tuple5[Int, Double, Double, Double, Double])])) => {\n    val originalFunction = ((j: (Int, Iterable[(String, (Int, Double, Double, Double, Double))])) => (j._1, j._2.reduce((j1, j2) => if (j1._2._5 > j2._2._5) j1 else j2)))(_)\n    val originalValue = originalFunction(inputParameter)\n    (Int.MinValue, originalValue._2)\n  } }\n  val bestMoviesDecadeSorted: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = bestMoviesDecade.sortByKey(true)\n  bestMoviesDecadeSorted\n}",
          "originalCode" : "def bestMoviesDecade(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))], minimumVotesRequired: Double, meanOfMeansRatingsOfAllMovies: Double) = {\n    val ratingsStatisticsWithWR: RDD[((Int, String, Int), (Int, Double, Double, Double, Double))] = ratingsStats.map((s: ((Int, String, Int), (Int, Double, Double, Double))) => (s._1, (s._2._1, s._2._2, s._2._3, s._2._4, weighted_rating(s._2._2, s._2._1.toDouble, minimumVotesRequired, meanOfMeansRatingsOfAllMovies))))\n    val ratingsStatisticsWithWRDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = ratingsStatisticsWithWR.map((m: (((Int, String, Int), (Int, Double, Double, Double, Double)))) => (m._1._3 / 10 * 10, (m._1._2, m._2)))\n    val groupByDecade: RDD[(Int, Iterable[(String, (Int, Double, Double, Double, Double))])] = ratingsStatisticsWithWRDecade.groupByKey()\n    val bestMoviesDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = groupByDecade.map((j: (Int, Iterable[(String, (Int, Double, Double, Double, Double))])) => (j._1, j._2.reduce((j1, j2) => if (j1._2._5 > j2._2._5) j1 else j2)))\n    val bestMoviesDecadeSorted: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = bestMoviesDecade.sortByKey(true)\n    bestMoviesDecadeSorted\n  }",
          "status" : "Killed"
        },
        {
          "id" : 138,
          "originalProgramId" : 6,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def bestMoviesDecade(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))], minimumVotesRequired: Double, meanOfMeansRatingsOfAllMovies: Double) = {\n  val ratingsStatisticsWithWR: RDD[((Int, String, Int), (Int, Double, Double, Double, Double))] = ratingsStats.map { (s: ((Int, String, Int), (Int, Double, Double, Double))) => (s._1, (s._2._1, s._2._2, s._2._3, s._2._4, weighted_rating(s._2._2, s._2._1.toDouble, minimumVotesRequired, meanOfMeansRatingsOfAllMovies))) }\n  val ratingsStatisticsWithWRDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = ratingsStatisticsWithWR.map { (m: ((Int, String, Int), (Int, Double, Double, Double, Double))) => (m._1._3 / 10 * 10, (m._1._2, m._2)) }\n  val groupByDecade: RDD[(Int, Iterable[(String, (Int, Double, Double, Double, Double))])] = ratingsStatisticsWithWRDecade.groupByKey()\n  val bestMoviesDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = groupByDecade.map { (inputParameter: (Int, Iterable[(String, Tuple5[Int, Double, Double, Double, Double])])) => {\n    val originalFunction = ((j: (Int, Iterable[(String, (Int, Double, Double, Double, Double))])) => (j._1, j._2.reduce((j1, j2) => if (j1._2._5 > j2._2._5) j1 else j2)))(_)\n    val originalValue = originalFunction(inputParameter)\n    (-originalValue._1, originalValue._2)\n  } }\n  val bestMoviesDecadeSorted: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = bestMoviesDecade.sortByKey(true)\n  bestMoviesDecadeSorted\n}",
          "originalCode" : "def bestMoviesDecade(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))], minimumVotesRequired: Double, meanOfMeansRatingsOfAllMovies: Double) = {\n    val ratingsStatisticsWithWR: RDD[((Int, String, Int), (Int, Double, Double, Double, Double))] = ratingsStats.map((s: ((Int, String, Int), (Int, Double, Double, Double))) => (s._1, (s._2._1, s._2._2, s._2._3, s._2._4, weighted_rating(s._2._2, s._2._1.toDouble, minimumVotesRequired, meanOfMeansRatingsOfAllMovies))))\n    val ratingsStatisticsWithWRDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = ratingsStatisticsWithWR.map((m: (((Int, String, Int), (Int, Double, Double, Double, Double)))) => (m._1._3 / 10 * 10, (m._1._2, m._2)))\n    val groupByDecade: RDD[(Int, Iterable[(String, (Int, Double, Double, Double, Double))])] = ratingsStatisticsWithWRDecade.groupByKey()\n    val bestMoviesDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = groupByDecade.map((j: (Int, Iterable[(String, (Int, Double, Double, Double, Double))])) => (j._1, j._2.reduce((j1, j2) => if (j1._2._5 > j2._2._5) j1 else j2)))\n    val bestMoviesDecadeSorted: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = bestMoviesDecade.sortByKey(true)\n    bestMoviesDecadeSorted\n  }",
          "status" : "Killed"
        },
        {
          "id" : 139,
          "originalProgramId" : 6,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def bestMoviesDecade(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))], minimumVotesRequired: Double, meanOfMeansRatingsOfAllMovies: Double) = {\n  val ratingsStatisticsWithWR: RDD[((Int, String, Int), (Int, Double, Double, Double, Double))] = ratingsStats.map { (s: ((Int, String, Int), (Int, Double, Double, Double))) => (s._1, (s._2._1, s._2._2, s._2._3, s._2._4, weighted_rating(s._2._2, s._2._1.toDouble, minimumVotesRequired, meanOfMeansRatingsOfAllMovies))) }\n  val ratingsStatisticsWithWRDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = ratingsStatisticsWithWR.map { (m: ((Int, String, Int), (Int, Double, Double, Double, Double))) => (m._1._3 / 10 * 10, (m._1._2, m._2)) }\n  val groupByDecade: RDD[(Int, Iterable[(String, (Int, Double, Double, Double, Double))])] = ratingsStatisticsWithWRDecade.groupByKey()\n  val bestMoviesDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = groupByDecade.map { (inputParameter: (Int, Iterable[(String, Tuple5[Int, Double, Double, Double, Double])])) => {\n    val originalFunction = ((j: (Int, Iterable[(String, (Int, Double, Double, Double, Double))])) => (j._1, j._2.reduce((j1, j2) => if (j1._2._5 > j2._2._5) j1 else j2)))(_)\n    val originalValue = originalFunction(inputParameter)\n    (originalValue._1, (\"\", originalValue._2._2))\n  } }\n  val bestMoviesDecadeSorted: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = bestMoviesDecade.sortByKey(true)\n  bestMoviesDecadeSorted\n}",
          "originalCode" : "def bestMoviesDecade(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))], minimumVotesRequired: Double, meanOfMeansRatingsOfAllMovies: Double) = {\n    val ratingsStatisticsWithWR: RDD[((Int, String, Int), (Int, Double, Double, Double, Double))] = ratingsStats.map((s: ((Int, String, Int), (Int, Double, Double, Double))) => (s._1, (s._2._1, s._2._2, s._2._3, s._2._4, weighted_rating(s._2._2, s._2._1.toDouble, minimumVotesRequired, meanOfMeansRatingsOfAllMovies))))\n    val ratingsStatisticsWithWRDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = ratingsStatisticsWithWR.map((m: (((Int, String, Int), (Int, Double, Double, Double, Double)))) => (m._1._3 / 10 * 10, (m._1._2, m._2)))\n    val groupByDecade: RDD[(Int, Iterable[(String, (Int, Double, Double, Double, Double))])] = ratingsStatisticsWithWRDecade.groupByKey()\n    val bestMoviesDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = groupByDecade.map((j: (Int, Iterable[(String, (Int, Double, Double, Double, Double))])) => (j._1, j._2.reduce((j1, j2) => if (j1._2._5 > j2._2._5) j1 else j2)))\n    val bestMoviesDecadeSorted: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = bestMoviesDecade.sortByKey(true)\n    bestMoviesDecadeSorted\n  }",
          "status" : "Killed"
        },
        {
          "id" : 140,
          "originalProgramId" : 6,
          "mutationOperator" : "DTI",
          "mutationOperatorDescription" : "Distinct Transformation Insertion",
          "mutantCode" : "def bestMoviesDecade(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))], minimumVotesRequired: Double, meanOfMeansRatingsOfAllMovies: Double) = {\n  val ratingsStatisticsWithWR: RDD[((Int, String, Int), (Int, Double, Double, Double, Double))] = ratingsStats.map { (s: ((Int, String, Int), (Int, Double, Double, Double))) => (s._1, (s._2._1, s._2._2, s._2._3, s._2._4, weighted_rating(s._2._2, s._2._1.toDouble, minimumVotesRequired, meanOfMeansRatingsOfAllMovies))) }.distinct()\n  val ratingsStatisticsWithWRDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = ratingsStatisticsWithWR.map { (m: ((Int, String, Int), (Int, Double, Double, Double, Double))) => (m._1._3 / 10 * 10, (m._1._2, m._2)) }\n  val groupByDecade: RDD[(Int, Iterable[(String, (Int, Double, Double, Double, Double))])] = ratingsStatisticsWithWRDecade.groupByKey()\n  val bestMoviesDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = groupByDecade.map { (j: (Int, Iterable[(String, (Int, Double, Double, Double, Double))])) => (j._1, j._2.reduce((j1, j2) => if (j1._2._5 > j2._2._5) j1 else j2)) }\n  val bestMoviesDecadeSorted: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = bestMoviesDecade.sortByKey(true)\n  bestMoviesDecadeSorted\n}",
          "originalCode" : "def bestMoviesDecade(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))], minimumVotesRequired: Double, meanOfMeansRatingsOfAllMovies: Double) = {\n    val ratingsStatisticsWithWR: RDD[((Int, String, Int), (Int, Double, Double, Double, Double))] = ratingsStats.map((s: ((Int, String, Int), (Int, Double, Double, Double))) => (s._1, (s._2._1, s._2._2, s._2._3, s._2._4, weighted_rating(s._2._2, s._2._1.toDouble, minimumVotesRequired, meanOfMeansRatingsOfAllMovies))))\n    val ratingsStatisticsWithWRDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = ratingsStatisticsWithWR.map((m: (((Int, String, Int), (Int, Double, Double, Double, Double)))) => (m._1._3 / 10 * 10, (m._1._2, m._2)))\n    val groupByDecade: RDD[(Int, Iterable[(String, (Int, Double, Double, Double, Double))])] = ratingsStatisticsWithWRDecade.groupByKey()\n    val bestMoviesDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = groupByDecade.map((j: (Int, Iterable[(String, (Int, Double, Double, Double, Double))])) => (j._1, j._2.reduce((j1, j2) => if (j1._2._5 > j2._2._5) j1 else j2)))\n    val bestMoviesDecadeSorted: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = bestMoviesDecade.sortByKey(true)\n    bestMoviesDecadeSorted\n  }",
          "status" : "Equivalent"
        },
        {
          "id" : 141,
          "originalProgramId" : 6,
          "mutationOperator" : "DTI",
          "mutationOperatorDescription" : "Distinct Transformation Insertion",
          "mutantCode" : "def bestMoviesDecade(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))], minimumVotesRequired: Double, meanOfMeansRatingsOfAllMovies: Double) = {\n  val ratingsStatisticsWithWR: RDD[((Int, String, Int), (Int, Double, Double, Double, Double))] = ratingsStats.map { (s: ((Int, String, Int), (Int, Double, Double, Double))) => (s._1, (s._2._1, s._2._2, s._2._3, s._2._4, weighted_rating(s._2._2, s._2._1.toDouble, minimumVotesRequired, meanOfMeansRatingsOfAllMovies))) }\n  val ratingsStatisticsWithWRDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = ratingsStatisticsWithWR.map { (m: ((Int, String, Int), (Int, Double, Double, Double, Double))) => (m._1._3 / 10 * 10, (m._1._2, m._2)) }.distinct()\n  val groupByDecade: RDD[(Int, Iterable[(String, (Int, Double, Double, Double, Double))])] = ratingsStatisticsWithWRDecade.groupByKey()\n  val bestMoviesDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = groupByDecade.map { (j: (Int, Iterable[(String, (Int, Double, Double, Double, Double))])) => (j._1, j._2.reduce((j1, j2) => if (j1._2._5 > j2._2._5) j1 else j2)) }\n  val bestMoviesDecadeSorted: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = bestMoviesDecade.sortByKey(true)\n  bestMoviesDecadeSorted\n}",
          "originalCode" : "def bestMoviesDecade(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))], minimumVotesRequired: Double, meanOfMeansRatingsOfAllMovies: Double) = {\n    val ratingsStatisticsWithWR: RDD[((Int, String, Int), (Int, Double, Double, Double, Double))] = ratingsStats.map((s: ((Int, String, Int), (Int, Double, Double, Double))) => (s._1, (s._2._1, s._2._2, s._2._3, s._2._4, weighted_rating(s._2._2, s._2._1.toDouble, minimumVotesRequired, meanOfMeansRatingsOfAllMovies))))\n    val ratingsStatisticsWithWRDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = ratingsStatisticsWithWR.map((m: (((Int, String, Int), (Int, Double, Double, Double, Double)))) => (m._1._3 / 10 * 10, (m._1._2, m._2)))\n    val groupByDecade: RDD[(Int, Iterable[(String, (Int, Double, Double, Double, Double))])] = ratingsStatisticsWithWRDecade.groupByKey()\n    val bestMoviesDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = groupByDecade.map((j: (Int, Iterable[(String, (Int, Double, Double, Double, Double))])) => (j._1, j._2.reduce((j1, j2) => if (j1._2._5 > j2._2._5) j1 else j2)))\n    val bestMoviesDecadeSorted: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = bestMoviesDecade.sortByKey(true)\n    bestMoviesDecadeSorted\n  }",
          "status" : "Equivalent"
        },
        {
          "id" : 142,
          "originalProgramId" : 6,
          "mutationOperator" : "DTI",
          "mutationOperatorDescription" : "Distinct Transformation Insertion",
          "mutantCode" : "def bestMoviesDecade(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))], minimumVotesRequired: Double, meanOfMeansRatingsOfAllMovies: Double) = {\n  val ratingsStatisticsWithWR: RDD[((Int, String, Int), (Int, Double, Double, Double, Double))] = ratingsStats.map { (s: ((Int, String, Int), (Int, Double, Double, Double))) => (s._1, (s._2._1, s._2._2, s._2._3, s._2._4, weighted_rating(s._2._2, s._2._1.toDouble, minimumVotesRequired, meanOfMeansRatingsOfAllMovies))) }\n  val ratingsStatisticsWithWRDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = ratingsStatisticsWithWR.map { (m: ((Int, String, Int), (Int, Double, Double, Double, Double))) => (m._1._3 / 10 * 10, (m._1._2, m._2)) }\n  val groupByDecade: RDD[(Int, Iterable[(String, (Int, Double, Double, Double, Double))])] = ratingsStatisticsWithWRDecade.groupByKey().distinct()\n  val bestMoviesDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = groupByDecade.map { (j: (Int, Iterable[(String, (Int, Double, Double, Double, Double))])) => (j._1, j._2.reduce((j1, j2) => if (j1._2._5 > j2._2._5) j1 else j2)) }\n  val bestMoviesDecadeSorted: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = bestMoviesDecade.sortByKey(true)\n  bestMoviesDecadeSorted\n}",
          "originalCode" : "def bestMoviesDecade(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))], minimumVotesRequired: Double, meanOfMeansRatingsOfAllMovies: Double) = {\n    val ratingsStatisticsWithWR: RDD[((Int, String, Int), (Int, Double, Double, Double, Double))] = ratingsStats.map((s: ((Int, String, Int), (Int, Double, Double, Double))) => (s._1, (s._2._1, s._2._2, s._2._3, s._2._4, weighted_rating(s._2._2, s._2._1.toDouble, minimumVotesRequired, meanOfMeansRatingsOfAllMovies))))\n    val ratingsStatisticsWithWRDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = ratingsStatisticsWithWR.map((m: (((Int, String, Int), (Int, Double, Double, Double, Double)))) => (m._1._3 / 10 * 10, (m._1._2, m._2)))\n    val groupByDecade: RDD[(Int, Iterable[(String, (Int, Double, Double, Double, Double))])] = ratingsStatisticsWithWRDecade.groupByKey()\n    val bestMoviesDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = groupByDecade.map((j: (Int, Iterable[(String, (Int, Double, Double, Double, Double))])) => (j._1, j._2.reduce((j1, j2) => if (j1._2._5 > j2._2._5) j1 else j2)))\n    val bestMoviesDecadeSorted: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = bestMoviesDecade.sortByKey(true)\n    bestMoviesDecadeSorted\n  }",
          "status" : "Equivalent"
        },
        {
          "id" : 143,
          "originalProgramId" : 6,
          "mutationOperator" : "DTI",
          "mutationOperatorDescription" : "Distinct Transformation Insertion",
          "mutantCode" : "def bestMoviesDecade(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))], minimumVotesRequired: Double, meanOfMeansRatingsOfAllMovies: Double) = {\n  val ratingsStatisticsWithWR: RDD[((Int, String, Int), (Int, Double, Double, Double, Double))] = ratingsStats.map { (s: ((Int, String, Int), (Int, Double, Double, Double))) => (s._1, (s._2._1, s._2._2, s._2._3, s._2._4, weighted_rating(s._2._2, s._2._1.toDouble, minimumVotesRequired, meanOfMeansRatingsOfAllMovies))) }\n  val ratingsStatisticsWithWRDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = ratingsStatisticsWithWR.map { (m: ((Int, String, Int), (Int, Double, Double, Double, Double))) => (m._1._3 / 10 * 10, (m._1._2, m._2)) }\n  val groupByDecade: RDD[(Int, Iterable[(String, (Int, Double, Double, Double, Double))])] = ratingsStatisticsWithWRDecade.groupByKey()\n  val bestMoviesDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = groupByDecade.map { (j: (Int, Iterable[(String, (Int, Double, Double, Double, Double))])) => (j._1, j._2.reduce((j1, j2) => if (j1._2._5 > j2._2._5) j1 else j2)) }.distinct()\n  val bestMoviesDecadeSorted: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = bestMoviesDecade.sortByKey(true)\n  bestMoviesDecadeSorted\n}",
          "originalCode" : "def bestMoviesDecade(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))], minimumVotesRequired: Double, meanOfMeansRatingsOfAllMovies: Double) = {\n    val ratingsStatisticsWithWR: RDD[((Int, String, Int), (Int, Double, Double, Double, Double))] = ratingsStats.map((s: ((Int, String, Int), (Int, Double, Double, Double))) => (s._1, (s._2._1, s._2._2, s._2._3, s._2._4, weighted_rating(s._2._2, s._2._1.toDouble, minimumVotesRequired, meanOfMeansRatingsOfAllMovies))))\n    val ratingsStatisticsWithWRDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = ratingsStatisticsWithWR.map((m: (((Int, String, Int), (Int, Double, Double, Double, Double)))) => (m._1._3 / 10 * 10, (m._1._2, m._2)))\n    val groupByDecade: RDD[(Int, Iterable[(String, (Int, Double, Double, Double, Double))])] = ratingsStatisticsWithWRDecade.groupByKey()\n    val bestMoviesDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = groupByDecade.map((j: (Int, Iterable[(String, (Int, Double, Double, Double, Double))])) => (j._1, j._2.reduce((j1, j2) => if (j1._2._5 > j2._2._5) j1 else j2)))\n    val bestMoviesDecadeSorted: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = bestMoviesDecade.sortByKey(true)\n    bestMoviesDecadeSorted\n  }",
          "status" : "Equivalent"
        },
        {
          "id" : 144,
          "originalProgramId" : 6,
          "mutationOperator" : "DTI",
          "mutationOperatorDescription" : "Distinct Transformation Insertion",
          "mutantCode" : "def bestMoviesDecade(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))], minimumVotesRequired: Double, meanOfMeansRatingsOfAllMovies: Double) = {\n  val ratingsStatisticsWithWR: RDD[((Int, String, Int), (Int, Double, Double, Double, Double))] = ratingsStats.map { (s: ((Int, String, Int), (Int, Double, Double, Double))) => (s._1, (s._2._1, s._2._2, s._2._3, s._2._4, weighted_rating(s._2._2, s._2._1.toDouble, minimumVotesRequired, meanOfMeansRatingsOfAllMovies))) }\n  val ratingsStatisticsWithWRDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = ratingsStatisticsWithWR.map { (m: ((Int, String, Int), (Int, Double, Double, Double, Double))) => (m._1._3 / 10 * 10, (m._1._2, m._2)) }\n  val groupByDecade: RDD[(Int, Iterable[(String, (Int, Double, Double, Double, Double))])] = ratingsStatisticsWithWRDecade.groupByKey()\n  val bestMoviesDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = groupByDecade.map { (j: (Int, Iterable[(String, (Int, Double, Double, Double, Double))])) => (j._1, j._2.reduce((j1, j2) => if (j1._2._5 > j2._2._5) j1 else j2)) }\n  val bestMoviesDecadeSorted: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = bestMoviesDecade.sortByKey(true).distinct()\n  bestMoviesDecadeSorted\n}",
          "originalCode" : "def bestMoviesDecade(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))], minimumVotesRequired: Double, meanOfMeansRatingsOfAllMovies: Double) = {\n    val ratingsStatisticsWithWR: RDD[((Int, String, Int), (Int, Double, Double, Double, Double))] = ratingsStats.map((s: ((Int, String, Int), (Int, Double, Double, Double))) => (s._1, (s._2._1, s._2._2, s._2._3, s._2._4, weighted_rating(s._2._2, s._2._1.toDouble, minimumVotesRequired, meanOfMeansRatingsOfAllMovies))))\n    val ratingsStatisticsWithWRDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = ratingsStatisticsWithWR.map((m: (((Int, String, Int), (Int, Double, Double, Double, Double)))) => (m._1._3 / 10 * 10, (m._1._2, m._2)))\n    val groupByDecade: RDD[(Int, Iterable[(String, (Int, Double, Double, Double, Double))])] = ratingsStatisticsWithWRDecade.groupByKey()\n    val bestMoviesDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = groupByDecade.map((j: (Int, Iterable[(String, (Int, Double, Double, Double, Double))])) => (j._1, j._2.reduce((j1, j2) => if (j1._2._5 > j2._2._5) j1 else j2)))\n    val bestMoviesDecadeSorted: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = bestMoviesDecade.sortByKey(true)\n    bestMoviesDecadeSorted\n  }",
          "status" : "Lived"
        },
        {
          "id" : 145,
          "originalProgramId" : 6,
          "mutationOperator" : "OTD",
          "mutationOperatorDescription" : "Order Transformation Deletion",
          "mutantCode" : "def bestMoviesDecade(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))], minimumVotesRequired: Double, meanOfMeansRatingsOfAllMovies: Double) = {\n  val ratingsStatisticsWithWR: RDD[((Int, String, Int), (Int, Double, Double, Double, Double))] = ratingsStats.map { (s: ((Int, String, Int), (Int, Double, Double, Double))) => (s._1, (s._2._1, s._2._2, s._2._3, s._2._4, weighted_rating(s._2._2, s._2._1.toDouble, minimumVotesRequired, meanOfMeansRatingsOfAllMovies))) }\n  val ratingsStatisticsWithWRDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = ratingsStatisticsWithWR.map { (m: ((Int, String, Int), (Int, Double, Double, Double, Double))) => (m._1._3 / 10 * 10, (m._1._2, m._2)) }\n  val groupByDecade: RDD[(Int, Iterable[(String, (Int, Double, Double, Double, Double))])] = ratingsStatisticsWithWRDecade.groupByKey()\n  val bestMoviesDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = groupByDecade.map { (j: (Int, Iterable[(String, (Int, Double, Double, Double, Double))])) => (j._1, j._2.reduce((j1, j2) => if (j1._2._5 > j2._2._5) j1 else j2)) }\n  val bestMoviesDecadeSorted: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = bestMoviesDecade\n  bestMoviesDecadeSorted\n}",
          "originalCode" : "def bestMoviesDecade(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))], minimumVotesRequired: Double, meanOfMeansRatingsOfAllMovies: Double) = {\n    val ratingsStatisticsWithWR: RDD[((Int, String, Int), (Int, Double, Double, Double, Double))] = ratingsStats.map((s: ((Int, String, Int), (Int, Double, Double, Double))) => (s._1, (s._2._1, s._2._2, s._2._3, s._2._4, weighted_rating(s._2._2, s._2._1.toDouble, minimumVotesRequired, meanOfMeansRatingsOfAllMovies))))\n    val ratingsStatisticsWithWRDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = ratingsStatisticsWithWR.map((m: (((Int, String, Int), (Int, Double, Double, Double, Double)))) => (m._1._3 / 10 * 10, (m._1._2, m._2)))\n    val groupByDecade: RDD[(Int, Iterable[(String, (Int, Double, Double, Double, Double))])] = ratingsStatisticsWithWRDecade.groupByKey()\n    val bestMoviesDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = groupByDecade.map((j: (Int, Iterable[(String, (Int, Double, Double, Double, Double))])) => (j._1, j._2.reduce((j1, j2) => if (j1._2._5 > j2._2._5) j1 else j2)))\n    val bestMoviesDecadeSorted: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = bestMoviesDecade.sortByKey(true)\n    bestMoviesDecadeSorted\n  }",
          "status" : "Lived"
        },
        {
          "id" : 146,
          "originalProgramId" : 6,
          "mutationOperator" : "OTI",
          "mutationOperatorDescription" : "Order Transformation Inversion",
          "mutantCode" : "def bestMoviesDecade(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))], minimumVotesRequired: Double, meanOfMeansRatingsOfAllMovies: Double) = {\n  val ratingsStatisticsWithWR: RDD[((Int, String, Int), (Int, Double, Double, Double, Double))] = ratingsStats.map { (s: ((Int, String, Int), (Int, Double, Double, Double))) => (s._1, (s._2._1, s._2._2, s._2._3, s._2._4, weighted_rating(s._2._2, s._2._1.toDouble, minimumVotesRequired, meanOfMeansRatingsOfAllMovies))) }\n  val ratingsStatisticsWithWRDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = ratingsStatisticsWithWR.map { (m: ((Int, String, Int), (Int, Double, Double, Double, Double))) => (m._1._3 / 10 * 10, (m._1._2, m._2)) }\n  val groupByDecade: RDD[(Int, Iterable[(String, (Int, Double, Double, Double, Double))])] = ratingsStatisticsWithWRDecade.groupByKey()\n  val bestMoviesDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = groupByDecade.map { (j: (Int, Iterable[(String, (Int, Double, Double, Double, Double))])) => (j._1, j._2.reduce((j1, j2) => if (j1._2._5 > j2._2._5) j1 else j2)) }\n  val bestMoviesDecadeSorted: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = bestMoviesDecade.sortByKey(false)\n  bestMoviesDecadeSorted\n}",
          "originalCode" : "def bestMoviesDecade(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))], minimumVotesRequired: Double, meanOfMeansRatingsOfAllMovies: Double) = {\n    val ratingsStatisticsWithWR: RDD[((Int, String, Int), (Int, Double, Double, Double, Double))] = ratingsStats.map((s: ((Int, String, Int), (Int, Double, Double, Double))) => (s._1, (s._2._1, s._2._2, s._2._3, s._2._4, weighted_rating(s._2._2, s._2._1.toDouble, minimumVotesRequired, meanOfMeansRatingsOfAllMovies))))\n    val ratingsStatisticsWithWRDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = ratingsStatisticsWithWR.map((m: (((Int, String, Int), (Int, Double, Double, Double, Double)))) => (m._1._3 / 10 * 10, (m._1._2, m._2)))\n    val groupByDecade: RDD[(Int, Iterable[(String, (Int, Double, Double, Double, Double))])] = ratingsStatisticsWithWRDecade.groupByKey()\n    val bestMoviesDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = groupByDecade.map((j: (Int, Iterable[(String, (Int, Double, Double, Double, Double))])) => (j._1, j._2.reduce((j1, j2) => if (j1._2._5 > j2._2._5) j1 else j2)))\n    val bestMoviesDecadeSorted: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = bestMoviesDecade.sortByKey(true)\n    bestMoviesDecadeSorted\n  }",
          "status" : "Lived"
        },
        {
          "id" : 147,
          "originalProgramId" : 7,
          "mutationOperator" : "UTD",
          "mutationOperatorDescription" : "Unary Transformation Deletion",
          "mutantCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val tagsMovieIdKey: RDD[(Int, String)] = tags.map { (t: Tag) => (t.movieId, t.tag) }\n  val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n  val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap { (mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)) }\n  val genresTagsCounts: RDD[((String, String), Int)] = genresTags\n  val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map { (g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n  genresTagsCountSorted\n}",
          "originalCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val tagsMovieIdKey: RDD[(Int, String)] = tags.map((t: Tag) => (t.movieId, t.tag))\n    val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n    val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap((mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)))\n    val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey((w: Int, z: Int) => w + z)\n    val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n    genresTagsCountSorted\n  }",
          "status" : "Killed"
        },
        {
          "id" : 148,
          "originalProgramId" : 7,
          "mutationOperator" : "UTD",
          "mutationOperatorDescription" : "Unary Transformation Deletion",
          "mutantCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val tagsMovieIdKey: RDD[(Int, String)] = tags.map { (t: Tag) => (t.movieId, t.tag) }\n  val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n  val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap { (mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)) }\n  val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey { (w: Int, z: Int) => w + z }\n  val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map { (g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped\n  genresTagsCountSorted\n}",
          "originalCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val tagsMovieIdKey: RDD[(Int, String)] = tags.map((t: Tag) => (t.movieId, t.tag))\n    val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n    val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap((mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)))\n    val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey((w: Int, z: Int) => w + z)\n    val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n    genresTagsCountSorted\n  }",
          "status" : "Killed"
        },
        {
          "id" : 149,
          "originalProgramId" : 7,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (inputParameter: Movie) => {\n    val originalFunction = ((m: Movie) => (m.movieId, m))(_)\n    val originalValue = originalFunction(inputParameter)\n    (0, originalValue._2)\n  } }\n  val tagsMovieIdKey: RDD[(Int, String)] = tags.map { (t: Tag) => (t.movieId, t.tag) }\n  val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n  val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap { (mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)) }\n  val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey { (w: Int, z: Int) => w + z }\n  val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map { (g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n  genresTagsCountSorted\n}",
          "originalCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val tagsMovieIdKey: RDD[(Int, String)] = tags.map((t: Tag) => (t.movieId, t.tag))\n    val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n    val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap((mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)))\n    val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey((w: Int, z: Int) => w + z)\n    val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n    genresTagsCountSorted\n  }",
          "status" : "Killed"
        },
        {
          "id" : 150,
          "originalProgramId" : 7,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (inputParameter: Movie) => {\n    val originalFunction = ((m: Movie) => (m.movieId, m))(_)\n    val originalValue = originalFunction(inputParameter)\n    (1, originalValue._2)\n  } }\n  val tagsMovieIdKey: RDD[(Int, String)] = tags.map { (t: Tag) => (t.movieId, t.tag) }\n  val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n  val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap { (mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)) }\n  val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey { (w: Int, z: Int) => w + z }\n  val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map { (g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n  genresTagsCountSorted\n}",
          "originalCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val tagsMovieIdKey: RDD[(Int, String)] = tags.map((t: Tag) => (t.movieId, t.tag))\n    val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n    val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap((mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)))\n    val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey((w: Int, z: Int) => w + z)\n    val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n    genresTagsCountSorted\n  }",
          "status" : "Killed"
        },
        {
          "id" : 151,
          "originalProgramId" : 7,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (inputParameter: Movie) => {\n    val originalFunction = ((m: Movie) => (m.movieId, m))(_)\n    val originalValue = originalFunction(inputParameter)\n    (Int.MaxValue, originalValue._2)\n  } }\n  val tagsMovieIdKey: RDD[(Int, String)] = tags.map { (t: Tag) => (t.movieId, t.tag) }\n  val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n  val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap { (mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)) }\n  val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey { (w: Int, z: Int) => w + z }\n  val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map { (g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n  genresTagsCountSorted\n}",
          "originalCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val tagsMovieIdKey: RDD[(Int, String)] = tags.map((t: Tag) => (t.movieId, t.tag))\n    val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n    val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap((mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)))\n    val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey((w: Int, z: Int) => w + z)\n    val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n    genresTagsCountSorted\n  }",
          "status" : "Killed"
        },
        {
          "id" : 152,
          "originalProgramId" : 7,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (inputParameter: Movie) => {\n    val originalFunction = ((m: Movie) => (m.movieId, m))(_)\n    val originalValue = originalFunction(inputParameter)\n    (Int.MinValue, originalValue._2)\n  } }\n  val tagsMovieIdKey: RDD[(Int, String)] = tags.map { (t: Tag) => (t.movieId, t.tag) }\n  val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n  val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap { (mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)) }\n  val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey { (w: Int, z: Int) => w + z }\n  val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map { (g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n  genresTagsCountSorted\n}",
          "originalCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val tagsMovieIdKey: RDD[(Int, String)] = tags.map((t: Tag) => (t.movieId, t.tag))\n    val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n    val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap((mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)))\n    val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey((w: Int, z: Int) => w + z)\n    val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n    genresTagsCountSorted\n  }",
          "status" : "Killed"
        },
        {
          "id" : 153,
          "originalProgramId" : 7,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (inputParameter: Movie) => {\n    val originalFunction = ((m: Movie) => (m.movieId, m))(_)\n    val originalValue = originalFunction(inputParameter)\n    (-originalValue._1, originalValue._2)\n  } }\n  val tagsMovieIdKey: RDD[(Int, String)] = tags.map { (t: Tag) => (t.movieId, t.tag) }\n  val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n  val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap { (mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)) }\n  val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey { (w: Int, z: Int) => w + z }\n  val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map { (g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n  genresTagsCountSorted\n}",
          "originalCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val tagsMovieIdKey: RDD[(Int, String)] = tags.map((t: Tag) => (t.movieId, t.tag))\n    val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n    val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap((mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)))\n    val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey((w: Int, z: Int) => w + z)\n    val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n    genresTagsCountSorted\n  }",
          "status" : "Killed"
        },
        {
          "id" : 154,
          "originalProgramId" : 7,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (inputParameter: Movie) => {\n    val originalFunction = ((m: Movie) => (m.movieId, m))(_)\n    val originalValue = originalFunction(inputParameter)\n    (originalValue._1, null.asInstanceOf[Movie])\n  } }\n  val tagsMovieIdKey: RDD[(Int, String)] = tags.map { (t: Tag) => (t.movieId, t.tag) }\n  val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n  val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap { (mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)) }\n  val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey { (w: Int, z: Int) => w + z }\n  val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map { (g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n  genresTagsCountSorted\n}",
          "originalCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val tagsMovieIdKey: RDD[(Int, String)] = tags.map((t: Tag) => (t.movieId, t.tag))\n    val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n    val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap((mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)))\n    val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey((w: Int, z: Int) => w + z)\n    val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n    genresTagsCountSorted\n  }",
          "status" : "Killed"
        },
        {
          "id" : 155,
          "originalProgramId" : 7,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val tagsMovieIdKey: RDD[(Int, String)] = tags.map { (inputParameter: Tag) => {\n    val originalFunction = ((t: Tag) => (t.movieId, t.tag))(_)\n    val originalValue = originalFunction(inputParameter)\n    (0, originalValue._2)\n  } }\n  val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n  val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap { (mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)) }\n  val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey { (w: Int, z: Int) => w + z }\n  val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map { (g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n  genresTagsCountSorted\n}",
          "originalCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val tagsMovieIdKey: RDD[(Int, String)] = tags.map((t: Tag) => (t.movieId, t.tag))\n    val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n    val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap((mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)))\n    val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey((w: Int, z: Int) => w + z)\n    val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n    genresTagsCountSorted\n  }",
          "status" : "Killed"
        },
        {
          "id" : 156,
          "originalProgramId" : 7,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val tagsMovieIdKey: RDD[(Int, String)] = tags.map { (inputParameter: Tag) => {\n    val originalFunction = ((t: Tag) => (t.movieId, t.tag))(_)\n    val originalValue = originalFunction(inputParameter)\n    (1, originalValue._2)\n  } }\n  val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n  val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap { (mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)) }\n  val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey { (w: Int, z: Int) => w + z }\n  val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map { (g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n  genresTagsCountSorted\n}",
          "originalCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val tagsMovieIdKey: RDD[(Int, String)] = tags.map((t: Tag) => (t.movieId, t.tag))\n    val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n    val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap((mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)))\n    val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey((w: Int, z: Int) => w + z)\n    val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n    genresTagsCountSorted\n  }",
          "status" : "Killed"
        },
        {
          "id" : 157,
          "originalProgramId" : 7,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val tagsMovieIdKey: RDD[(Int, String)] = tags.map { (inputParameter: Tag) => {\n    val originalFunction = ((t: Tag) => (t.movieId, t.tag))(_)\n    val originalValue = originalFunction(inputParameter)\n    (Int.MaxValue, originalValue._2)\n  } }\n  val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n  val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap { (mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)) }\n  val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey { (w: Int, z: Int) => w + z }\n  val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map { (g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n  genresTagsCountSorted\n}",
          "originalCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val tagsMovieIdKey: RDD[(Int, String)] = tags.map((t: Tag) => (t.movieId, t.tag))\n    val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n    val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap((mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)))\n    val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey((w: Int, z: Int) => w + z)\n    val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n    genresTagsCountSorted\n  }",
          "status" : "Killed"
        },
        {
          "id" : 158,
          "originalProgramId" : 7,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val tagsMovieIdKey: RDD[(Int, String)] = tags.map { (inputParameter: Tag) => {\n    val originalFunction = ((t: Tag) => (t.movieId, t.tag))(_)\n    val originalValue = originalFunction(inputParameter)\n    (Int.MinValue, originalValue._2)\n  } }\n  val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n  val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap { (mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)) }\n  val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey { (w: Int, z: Int) => w + z }\n  val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map { (g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n  genresTagsCountSorted\n}",
          "originalCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val tagsMovieIdKey: RDD[(Int, String)] = tags.map((t: Tag) => (t.movieId, t.tag))\n    val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n    val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap((mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)))\n    val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey((w: Int, z: Int) => w + z)\n    val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n    genresTagsCountSorted\n  }",
          "status" : "Killed"
        },
        {
          "id" : 159,
          "originalProgramId" : 7,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val tagsMovieIdKey: RDD[(Int, String)] = tags.map { (inputParameter: Tag) => {\n    val originalFunction = ((t: Tag) => (t.movieId, t.tag))(_)\n    val originalValue = originalFunction(inputParameter)\n    (-originalValue._1, originalValue._2)\n  } }\n  val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n  val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap { (mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)) }\n  val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey { (w: Int, z: Int) => w + z }\n  val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map { (g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n  genresTagsCountSorted\n}",
          "originalCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val tagsMovieIdKey: RDD[(Int, String)] = tags.map((t: Tag) => (t.movieId, t.tag))\n    val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n    val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap((mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)))\n    val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey((w: Int, z: Int) => w + z)\n    val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n    genresTagsCountSorted\n  }",
          "status" : "Killed"
        },
        {
          "id" : 160,
          "originalProgramId" : 7,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val tagsMovieIdKey: RDD[(Int, String)] = tags.map { (inputParameter: Tag) => {\n    val originalFunction = ((t: Tag) => (t.movieId, t.tag))(_)\n    val originalValue = originalFunction(inputParameter)\n    (originalValue._1, \"\")\n  } }\n  val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n  val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap { (mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)) }\n  val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey { (w: Int, z: Int) => w + z }\n  val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map { (g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n  genresTagsCountSorted\n}",
          "originalCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val tagsMovieIdKey: RDD[(Int, String)] = tags.map((t: Tag) => (t.movieId, t.tag))\n    val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n    val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap((mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)))\n    val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey((w: Int, z: Int) => w + z)\n    val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n    genresTagsCountSorted\n  }",
          "status" : "Killed"
        },
        {
          "id" : 161,
          "originalProgramId" : 7,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val tagsMovieIdKey: RDD[(Int, String)] = tags.map { (t: Tag) => (t.movieId, t.tag) }\n  val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n  val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap { (inputParameter: (Int, (Movie, String))) => {\n    val originalFunction = ((mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)))(_)\n    val originalValue = originalFunction(inputParameter)\n    originalValue.headOption\n  } }\n  val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey { (w: Int, z: Int) => w + z }\n  val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map { (g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n  genresTagsCountSorted\n}",
          "originalCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val tagsMovieIdKey: RDD[(Int, String)] = tags.map((t: Tag) => (t.movieId, t.tag))\n    val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n    val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap((mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)))\n    val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey((w: Int, z: Int) => w + z)\n    val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n    genresTagsCountSorted\n  }",
          "status" : "Killed"
        },
        {
          "id" : 162,
          "originalProgramId" : 7,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val tagsMovieIdKey: RDD[(Int, String)] = tags.map { (t: Tag) => (t.movieId, t.tag) }\n  val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n  val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap { (inputParameter: (Int, (Movie, String))) => {\n    val originalFunction = ((mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)))(_)\n    val originalValue = originalFunction(inputParameter)\n    originalValue.toList.tail\n  } }\n  val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey { (w: Int, z: Int) => w + z }\n  val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map { (g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n  genresTagsCountSorted\n}",
          "originalCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val tagsMovieIdKey: RDD[(Int, String)] = tags.map((t: Tag) => (t.movieId, t.tag))\n    val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n    val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap((mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)))\n    val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey((w: Int, z: Int) => w + z)\n    val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n    genresTagsCountSorted\n  }",
          "status" : "Killed"
        },
        {
          "id" : 163,
          "originalProgramId" : 7,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val tagsMovieIdKey: RDD[(Int, String)] = tags.map { (t: Tag) => (t.movieId, t.tag) }\n  val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n  val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap { (inputParameter: (Int, (Movie, String))) => {\n    val originalFunction = ((mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)))(_)\n    val originalValue = originalFunction(inputParameter)\n    originalValue.toList.reverse\n  } }\n  val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey { (w: Int, z: Int) => w + z }\n  val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map { (g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n  genresTagsCountSorted\n}",
          "originalCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val tagsMovieIdKey: RDD[(Int, String)] = tags.map((t: Tag) => (t.movieId, t.tag))\n    val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n    val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap((mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)))\n    val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey((w: Int, z: Int) => w + z)\n    val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n    genresTagsCountSorted\n  }",
          "status" : "Equivalent"
        },
        {
          "id" : 164,
          "originalProgramId" : 7,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val tagsMovieIdKey: RDD[(Int, String)] = tags.map { (t: Tag) => (t.movieId, t.tag) }\n  val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n  val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap { (inputParameter: (Int, (Movie, String))) => {\n    val originalFunction = ((mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)))(_)\n    val originalValue = originalFunction(inputParameter)\n    List[((String, String), Int)]()\n  } }\n  val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey { (w: Int, z: Int) => w + z }\n  val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map { (g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n  genresTagsCountSorted\n}",
          "originalCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val tagsMovieIdKey: RDD[(Int, String)] = tags.map((t: Tag) => (t.movieId, t.tag))\n    val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n    val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap((mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)))\n    val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey((w: Int, z: Int) => w + z)\n    val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n    genresTagsCountSorted\n  }",
          "status" : "Killed"
        },
        {
          "id" : 165,
          "originalProgramId" : 7,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val tagsMovieIdKey: RDD[(Int, String)] = tags.map { (t: Tag) => (t.movieId, t.tag) }\n  val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n  val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap { (mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)) }\n  val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey { (w: Int, z: Int) => w + z }\n  val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map { (inputParameter: ((String, String), Int)) => {\n    val originalFunction = ((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))(_)\n    val originalValue = originalFunction(inputParameter)\n    (\"\", originalValue._2)\n  } }\n  val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n  genresTagsCountSorted\n}",
          "originalCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val tagsMovieIdKey: RDD[(Int, String)] = tags.map((t: Tag) => (t.movieId, t.tag))\n    val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n    val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap((mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)))\n    val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey((w: Int, z: Int) => w + z)\n    val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n    genresTagsCountSorted\n  }",
          "status" : "Killed"
        },
        {
          "id" : 166,
          "originalProgramId" : 7,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val tagsMovieIdKey: RDD[(Int, String)] = tags.map { (t: Tag) => (t.movieId, t.tag) }\n  val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n  val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap { (mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)) }\n  val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey { (w: Int, z: Int) => w + z }\n  val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map { (inputParameter: ((String, String), Int)) => {\n    val originalFunction = ((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))(_)\n    val originalValue = originalFunction(inputParameter)\n    (originalValue._1, (\"\", originalValue._2._2))\n  } }\n  val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n  genresTagsCountSorted\n}",
          "originalCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val tagsMovieIdKey: RDD[(Int, String)] = tags.map((t: Tag) => (t.movieId, t.tag))\n    val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n    val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap((mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)))\n    val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey((w: Int, z: Int) => w + z)\n    val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n    genresTagsCountSorted\n  }",
          "status" : "Killed"
        },
        {
          "id" : 167,
          "originalProgramId" : 7,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val tagsMovieIdKey: RDD[(Int, String)] = tags.map { (t: Tag) => (t.movieId, t.tag) }\n  val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n  val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap { (mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)) }\n  val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey { (w: Int, z: Int) => w + z }\n  val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map { (inputParameter: ((String, String), Int)) => {\n    val originalFunction = ((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))(_)\n    val originalValue = originalFunction(inputParameter)\n    (originalValue._1, (originalValue._2._1, 0))\n  } }\n  val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n  genresTagsCountSorted\n}",
          "originalCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val tagsMovieIdKey: RDD[(Int, String)] = tags.map((t: Tag) => (t.movieId, t.tag))\n    val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n    val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap((mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)))\n    val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey((w: Int, z: Int) => w + z)\n    val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n    genresTagsCountSorted\n  }",
          "status" : "Killed"
        },
        {
          "id" : 168,
          "originalProgramId" : 7,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val tagsMovieIdKey: RDD[(Int, String)] = tags.map { (t: Tag) => (t.movieId, t.tag) }\n  val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n  val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap { (mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)) }\n  val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey { (w: Int, z: Int) => w + z }\n  val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map { (inputParameter: ((String, String), Int)) => {\n    val originalFunction = ((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))(_)\n    val originalValue = originalFunction(inputParameter)\n    (originalValue._1, (originalValue._2._1, 1))\n  } }\n  val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n  genresTagsCountSorted\n}",
          "originalCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val tagsMovieIdKey: RDD[(Int, String)] = tags.map((t: Tag) => (t.movieId, t.tag))\n    val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n    val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap((mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)))\n    val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey((w: Int, z: Int) => w + z)\n    val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n    genresTagsCountSorted\n  }",
          "status" : "Killed"
        },
        {
          "id" : 169,
          "originalProgramId" : 7,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val tagsMovieIdKey: RDD[(Int, String)] = tags.map { (t: Tag) => (t.movieId, t.tag) }\n  val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n  val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap { (mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)) }\n  val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey { (w: Int, z: Int) => w + z }\n  val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map { (inputParameter: ((String, String), Int)) => {\n    val originalFunction = ((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))(_)\n    val originalValue = originalFunction(inputParameter)\n    (originalValue._1, (originalValue._2._1, Int.MaxValue))\n  } }\n  val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n  genresTagsCountSorted\n}",
          "originalCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val tagsMovieIdKey: RDD[(Int, String)] = tags.map((t: Tag) => (t.movieId, t.tag))\n    val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n    val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap((mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)))\n    val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey((w: Int, z: Int) => w + z)\n    val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n    genresTagsCountSorted\n  }",
          "status" : "Killed"
        },
        {
          "id" : 170,
          "originalProgramId" : 7,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val tagsMovieIdKey: RDD[(Int, String)] = tags.map { (t: Tag) => (t.movieId, t.tag) }\n  val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n  val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap { (mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)) }\n  val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey { (w: Int, z: Int) => w + z }\n  val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map { (inputParameter: ((String, String), Int)) => {\n    val originalFunction = ((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))(_)\n    val originalValue = originalFunction(inputParameter)\n    (originalValue._1, (originalValue._2._1, Int.MinValue))\n  } }\n  val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n  genresTagsCountSorted\n}",
          "originalCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val tagsMovieIdKey: RDD[(Int, String)] = tags.map((t: Tag) => (t.movieId, t.tag))\n    val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n    val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap((mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)))\n    val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey((w: Int, z: Int) => w + z)\n    val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n    genresTagsCountSorted\n  }",
          "status" : "Killed"
        },
        {
          "id" : 171,
          "originalProgramId" : 7,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val tagsMovieIdKey: RDD[(Int, String)] = tags.map { (t: Tag) => (t.movieId, t.tag) }\n  val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n  val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap { (mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)) }\n  val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey { (w: Int, z: Int) => w + z }\n  val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map { (inputParameter: ((String, String), Int)) => {\n    val originalFunction = ((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))(_)\n    val originalValue = originalFunction(inputParameter)\n    (originalValue._1, (originalValue._2._1, -originalValue._2._2))\n  } }\n  val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n  genresTagsCountSorted\n}",
          "originalCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val tagsMovieIdKey: RDD[(Int, String)] = tags.map((t: Tag) => (t.movieId, t.tag))\n    val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n    val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap((mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)))\n    val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey((w: Int, z: Int) => w + z)\n    val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n    genresTagsCountSorted\n  }",
          "status" : "Killed"
        },
        {
          "id" : 172,
          "originalProgramId" : 7,
          "mutationOperator" : "DTI",
          "mutationOperatorDescription" : "Distinct Transformation Insertion",
          "mutantCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }.distinct()\n  val tagsMovieIdKey: RDD[(Int, String)] = tags.map { (t: Tag) => (t.movieId, t.tag) }\n  val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n  val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap { (mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)) }\n  val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey { (w: Int, z: Int) => w + z }\n  val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map { (g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n  genresTagsCountSorted\n}",
          "originalCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val tagsMovieIdKey: RDD[(Int, String)] = tags.map((t: Tag) => (t.movieId, t.tag))\n    val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n    val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap((mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)))\n    val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey((w: Int, z: Int) => w + z)\n    val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n    genresTagsCountSorted\n  }",
          "status" : "Lived"
        },
        {
          "id" : 173,
          "originalProgramId" : 7,
          "mutationOperator" : "DTI",
          "mutationOperatorDescription" : "Distinct Transformation Insertion",
          "mutantCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val tagsMovieIdKey: RDD[(Int, String)] = tags.map { (t: Tag) => (t.movieId, t.tag) }.distinct()\n  val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n  val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap { (mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)) }\n  val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey { (w: Int, z: Int) => w + z }\n  val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map { (g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n  genresTagsCountSorted\n}",
          "originalCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val tagsMovieIdKey: RDD[(Int, String)] = tags.map((t: Tag) => (t.movieId, t.tag))\n    val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n    val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap((mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)))\n    val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey((w: Int, z: Int) => w + z)\n    val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n    genresTagsCountSorted\n  }",
          "status" : "Killed"
        },
        {
          "id" : 174,
          "originalProgramId" : 7,
          "mutationOperator" : "DTI",
          "mutationOperatorDescription" : "Distinct Transformation Insertion",
          "mutantCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val tagsMovieIdKey: RDD[(Int, String)] = tags.map { (t: Tag) => (t.movieId, t.tag) }\n  val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey).distinct()\n  val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap { (mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)) }\n  val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey { (w: Int, z: Int) => w + z }\n  val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map { (g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n  genresTagsCountSorted\n}",
          "originalCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val tagsMovieIdKey: RDD[(Int, String)] = tags.map((t: Tag) => (t.movieId, t.tag))\n    val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n    val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap((mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)))\n    val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey((w: Int, z: Int) => w + z)\n    val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n    genresTagsCountSorted\n  }",
          "status" : "Killed"
        },
        {
          "id" : 175,
          "originalProgramId" : 7,
          "mutationOperator" : "DTI",
          "mutationOperatorDescription" : "Distinct Transformation Insertion",
          "mutantCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val tagsMovieIdKey: RDD[(Int, String)] = tags.map { (t: Tag) => (t.movieId, t.tag) }\n  val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n  val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap { (mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)) }.distinct()\n  val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey { (w: Int, z: Int) => w + z }\n  val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map { (g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n  genresTagsCountSorted\n}",
          "originalCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val tagsMovieIdKey: RDD[(Int, String)] = tags.map((t: Tag) => (t.movieId, t.tag))\n    val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n    val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap((mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)))\n    val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey((w: Int, z: Int) => w + z)\n    val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n    genresTagsCountSorted\n  }",
          "status" : "Killed"
        },
        {
          "id" : 176,
          "originalProgramId" : 7,
          "mutationOperator" : "DTI",
          "mutationOperatorDescription" : "Distinct Transformation Insertion",
          "mutantCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val tagsMovieIdKey: RDD[(Int, String)] = tags.map { (t: Tag) => (t.movieId, t.tag) }\n  val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n  val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap { (mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)) }\n  val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey { (w: Int, z: Int) => w + z }.distinct()\n  val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map { (g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n  genresTagsCountSorted\n}",
          "originalCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val tagsMovieIdKey: RDD[(Int, String)] = tags.map((t: Tag) => (t.movieId, t.tag))\n    val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n    val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap((mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)))\n    val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey((w: Int, z: Int) => w + z)\n    val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n    genresTagsCountSorted\n  }",
          "status" : "Killed"
        },
        {
          "id" : 177,
          "originalProgramId" : 7,
          "mutationOperator" : "DTI",
          "mutationOperatorDescription" : "Distinct Transformation Insertion",
          "mutantCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val tagsMovieIdKey: RDD[(Int, String)] = tags.map { (t: Tag) => (t.movieId, t.tag) }\n  val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n  val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap { (mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)) }\n  val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey { (w: Int, z: Int) => w + z }\n  val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map { (g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)) }.distinct()\n  val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n  genresTagsCountSorted\n}",
          "originalCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val tagsMovieIdKey: RDD[(Int, String)] = tags.map((t: Tag) => (t.movieId, t.tag))\n    val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n    val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap((mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)))\n    val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey((w: Int, z: Int) => w + z)\n    val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n    genresTagsCountSorted\n  }",
          "status" : "Lived"
        },
        {
          "id" : 178,
          "originalProgramId" : 7,
          "mutationOperator" : "DTI",
          "mutationOperatorDescription" : "Distinct Transformation Insertion",
          "mutantCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val tagsMovieIdKey: RDD[(Int, String)] = tags.map { (t: Tag) => (t.movieId, t.tag) }\n  val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n  val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap { (mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)) }\n  val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey { (w: Int, z: Int) => w + z }\n  val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map { (g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true).distinct()\n  genresTagsCountSorted\n}",
          "originalCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val tagsMovieIdKey: RDD[(Int, String)] = tags.map((t: Tag) => (t.movieId, t.tag))\n    val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n    val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap((mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)))\n    val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey((w: Int, z: Int) => w + z)\n    val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n    genresTagsCountSorted\n  }",
          "status" : "Killed"
        },
        {
          "id" : 179,
          "originalProgramId" : 7,
          "mutationOperator" : "ATR",
          "mutationOperatorDescription" : "Aggregation Transformation Replacement",
          "mutantCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val tagsMovieIdKey: RDD[(Int, String)] = tags.map { (t: Tag) => (t.movieId, t.tag) }\n  val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n  val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap { (mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)) }\n  val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey { (firstParameter: Int, secondParameter: Int) => firstParameter }\n  val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map { (g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n  genresTagsCountSorted\n}",
          "originalCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val tagsMovieIdKey: RDD[(Int, String)] = tags.map((t: Tag) => (t.movieId, t.tag))\n    val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n    val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap((mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)))\n    val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey((w: Int, z: Int) => w + z)\n    val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n    genresTagsCountSorted\n  }",
          "status" : "Killed"
        },
        {
          "id" : 180,
          "originalProgramId" : 7,
          "mutationOperator" : "ATR",
          "mutationOperatorDescription" : "Aggregation Transformation Replacement",
          "mutantCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val tagsMovieIdKey: RDD[(Int, String)] = tags.map { (t: Tag) => (t.movieId, t.tag) }\n  val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n  val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap { (mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)) }\n  val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey { (firstParameter: Int, secondParameter: Int) => secondParameter }\n  val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map { (g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n  genresTagsCountSorted\n}",
          "originalCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val tagsMovieIdKey: RDD[(Int, String)] = tags.map((t: Tag) => (t.movieId, t.tag))\n    val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n    val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap((mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)))\n    val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey((w: Int, z: Int) => w + z)\n    val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n    genresTagsCountSorted\n  }",
          "status" : "Killed"
        },
        {
          "id" : 181,
          "originalProgramId" : 7,
          "mutationOperator" : "ATR",
          "mutationOperatorDescription" : "Aggregation Transformation Replacement",
          "mutantCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val tagsMovieIdKey: RDD[(Int, String)] = tags.map { (t: Tag) => (t.movieId, t.tag) }\n  val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n  val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap { (mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)) }\n  val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey { (firstParameter: Int, secondParameter: Int) => {\n    val originalFunction = ((w: Int, z: Int) => w + z)(_, _)\n    originalFunction(firstParameter, firstParameter)\n  } }\n  val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map { (g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n  genresTagsCountSorted\n}",
          "originalCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val tagsMovieIdKey: RDD[(Int, String)] = tags.map((t: Tag) => (t.movieId, t.tag))\n    val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n    val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap((mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)))\n    val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey((w: Int, z: Int) => w + z)\n    val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n    genresTagsCountSorted\n  }",
          "status" : "Lived"
        },
        {
          "id" : 182,
          "originalProgramId" : 7,
          "mutationOperator" : "ATR",
          "mutationOperatorDescription" : "Aggregation Transformation Replacement",
          "mutantCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val tagsMovieIdKey: RDD[(Int, String)] = tags.map { (t: Tag) => (t.movieId, t.tag) }\n  val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n  val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap { (mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)) }\n  val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey { (firstParameter: Int, secondParameter: Int) => {\n    val originalFunction = ((w: Int, z: Int) => w + z)(_, _)\n    originalFunction(secondParameter, secondParameter)\n  } }\n  val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map { (g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n  genresTagsCountSorted\n}",
          "originalCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val tagsMovieIdKey: RDD[(Int, String)] = tags.map((t: Tag) => (t.movieId, t.tag))\n    val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n    val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap((mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)))\n    val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey((w: Int, z: Int) => w + z)\n    val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n    genresTagsCountSorted\n  }",
          "status" : "Lived"
        },
        {
          "id" : 183,
          "originalProgramId" : 7,
          "mutationOperator" : "ATR",
          "mutationOperatorDescription" : "Aggregation Transformation Replacement",
          "mutantCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val tagsMovieIdKey: RDD[(Int, String)] = tags.map { (t: Tag) => (t.movieId, t.tag) }\n  val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n  val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap { (mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)) }\n  val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey { (firstParameter: Int, secondParameter: Int) => {\n    val originalFunction = ((w: Int, z: Int) => w + z)(_, _)\n    originalFunction(secondParameter, firstParameter)\n  } }\n  val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map { (g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n  genresTagsCountSorted\n}",
          "originalCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val tagsMovieIdKey: RDD[(Int, String)] = tags.map((t: Tag) => (t.movieId, t.tag))\n    val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n    val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap((mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)))\n    val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey((w: Int, z: Int) => w + z)\n    val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n    genresTagsCountSorted\n  }",
          "status" : "Equivalent"
        },
        {
          "id" : 184,
          "originalProgramId" : 7,
          "mutationOperator" : "JTR",
          "mutationOperatorDescription" : "Join Transformation Replacement",
          "mutantCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val tagsMovieIdKey: RDD[(Int, String)] = tags.map { (t: Tag) => (t.movieId, t.tag) }\n  val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.leftOuterJoin(tagsMovieIdKey).map(tuple => (tuple._1, (tuple._2._1, tuple._2._2.getOrElse(\"\"))))\n  val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap { (mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)) }\n  val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey { (w: Int, z: Int) => w + z }\n  val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map { (g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n  genresTagsCountSorted\n}",
          "originalCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val tagsMovieIdKey: RDD[(Int, String)] = tags.map((t: Tag) => (t.movieId, t.tag))\n    val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n    val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap((mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)))\n    val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey((w: Int, z: Int) => w + z)\n    val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n    genresTagsCountSorted\n  }",
          "status" : "Lived"
        },
        {
          "id" : 185,
          "originalProgramId" : 7,
          "mutationOperator" : "JTR",
          "mutationOperatorDescription" : "Join Transformation Replacement",
          "mutantCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val tagsMovieIdKey: RDD[(Int, String)] = tags.map { (t: Tag) => (t.movieId, t.tag) }\n  val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.rightOuterJoin(tagsMovieIdKey).map(tuple => (tuple._1, (tuple._2._1.getOrElse(null.asInstanceOf[Movie]), tuple._2._2)))\n  val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap { (mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)) }\n  val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey { (w: Int, z: Int) => w + z }\n  val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map { (g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n  genresTagsCountSorted\n}",
          "originalCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val tagsMovieIdKey: RDD[(Int, String)] = tags.map((t: Tag) => (t.movieId, t.tag))\n    val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n    val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap((mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)))\n    val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey((w: Int, z: Int) => w + z)\n    val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n    genresTagsCountSorted\n  }",
          "status" : "Lived"
        },
        {
          "id" : 186,
          "originalProgramId" : 7,
          "mutationOperator" : "JTR",
          "mutationOperatorDescription" : "Join Transformation Replacement",
          "mutantCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val tagsMovieIdKey: RDD[(Int, String)] = tags.map { (t: Tag) => (t.movieId, t.tag) }\n  val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.fullOuterJoin(tagsMovieIdKey).map(tuple => (tuple._1, (tuple._2._1.getOrElse(null.asInstanceOf[Movie]), tuple._2._2.getOrElse(\"\"))))\n  val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap { (mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)) }\n  val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey { (w: Int, z: Int) => w + z }\n  val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map { (g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n  genresTagsCountSorted\n}",
          "originalCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val tagsMovieIdKey: RDD[(Int, String)] = tags.map((t: Tag) => (t.movieId, t.tag))\n    val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n    val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap((mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)))\n    val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey((w: Int, z: Int) => w + z)\n    val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n    genresTagsCountSorted\n  }",
          "status" : "Lived"
        },
        {
          "id" : 187,
          "originalProgramId" : 7,
          "mutationOperator" : "OTD",
          "mutationOperatorDescription" : "Order Transformation Deletion",
          "mutantCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val tagsMovieIdKey: RDD[(Int, String)] = tags.map { (t: Tag) => (t.movieId, t.tag) }\n  val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n  val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap { (mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)) }\n  val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey { (w: Int, z: Int) => w + z }\n  val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map { (g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped\n  genresTagsCountSorted\n}",
          "originalCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val tagsMovieIdKey: RDD[(Int, String)] = tags.map((t: Tag) => (t.movieId, t.tag))\n    val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n    val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap((mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)))\n    val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey((w: Int, z: Int) => w + z)\n    val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n    genresTagsCountSorted\n  }",
          "status" : "Killed"
        },
        {
          "id" : 188,
          "originalProgramId" : 7,
          "mutationOperator" : "OTI",
          "mutationOperatorDescription" : "Order Transformation Inversion",
          "mutantCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val tagsMovieIdKey: RDD[(Int, String)] = tags.map { (t: Tag) => (t.movieId, t.tag) }\n  val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n  val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap { (mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)) }\n  val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey { (w: Int, z: Int) => w + z }\n  val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map { (g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(false)\n  genresTagsCountSorted\n}",
          "originalCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val tagsMovieIdKey: RDD[(Int, String)] = tags.map((t: Tag) => (t.movieId, t.tag))\n    val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n    val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap((mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)))\n    val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey((w: Int, z: Int) => w + z)\n    val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n    genresTagsCountSorted\n  }",
          "status" : "Killed"
        },
        {
          "id" : 189,
          "originalProgramId" : 8,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def tagBestSummarizeGenre(genresTagsCountSorted: RDD[(String, (String, Int))]) = {\n  val genresTagsCountSortedGrouped: RDD[(String, Iterable[(String, Int)])] = genresTagsCountSorted.groupByKey()\n  val genresTagsCountSortedTop5: RDD[(String, List[(String, Int)])] = genresTagsCountSortedGrouped.map { (inputParameter: (String, Iterable[(String, Int)])) => {\n    val originalFunction = ((l: (String, Iterable[(String, Int)])) => (l._1, l._2.toList.sortBy(_._2).reverse.take(5)))(_)\n    val originalValue = originalFunction(inputParameter)\n    (\"\", originalValue._2)\n  } }\n  genresTagsCountSortedTop5\n}",
          "originalCode" : "def tagBestSummarizeGenre(genresTagsCountSorted: RDD[(String, (String, Int))]) = {\n    val genresTagsCountSortedGrouped: RDD[(String, Iterable[(String, Int)])] = genresTagsCountSorted.groupByKey()\n    val genresTagsCountSortedTop5: RDD[(String, List[(String, Int)])] = genresTagsCountSortedGrouped.map((l: (String, Iterable[(String, Int)])) => (l._1, l._2.toList.sortBy(_._2).reverse.take(5)))\n    genresTagsCountSortedTop5\n  }",
          "status" : "Killed"
        },
        {
          "id" : 190,
          "originalProgramId" : 8,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def tagBestSummarizeGenre(genresTagsCountSorted: RDD[(String, (String, Int))]) = {\n  val genresTagsCountSortedGrouped: RDD[(String, Iterable[(String, Int)])] = genresTagsCountSorted.groupByKey()\n  val genresTagsCountSortedTop5: RDD[(String, List[(String, Int)])] = genresTagsCountSortedGrouped.map { (inputParameter: (String, Iterable[(String, Int)])) => {\n    val originalFunction = ((l: (String, Iterable[(String, Int)])) => (l._1, l._2.toList.sortBy(_._2).reverse.take(5)))(_)\n    val originalValue = originalFunction(inputParameter)\n    (originalValue._1, List[(String, Int)](originalValue._2.head))\n  } }\n  genresTagsCountSortedTop5\n}",
          "originalCode" : "def tagBestSummarizeGenre(genresTagsCountSorted: RDD[(String, (String, Int))]) = {\n    val genresTagsCountSortedGrouped: RDD[(String, Iterable[(String, Int)])] = genresTagsCountSorted.groupByKey()\n    val genresTagsCountSortedTop5: RDD[(String, List[(String, Int)])] = genresTagsCountSortedGrouped.map((l: (String, Iterable[(String, Int)])) => (l._1, l._2.toList.sortBy(_._2).reverse.take(5)))\n    genresTagsCountSortedTop5\n  }",
          "status" : "Killed"
        },
        {
          "id" : 191,
          "originalProgramId" : 8,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def tagBestSummarizeGenre(genresTagsCountSorted: RDD[(String, (String, Int))]) = {\n  val genresTagsCountSortedGrouped: RDD[(String, Iterable[(String, Int)])] = genresTagsCountSorted.groupByKey()\n  val genresTagsCountSortedTop5: RDD[(String, List[(String, Int)])] = genresTagsCountSortedGrouped.map { (inputParameter: (String, Iterable[(String, Int)])) => {\n    val originalFunction = ((l: (String, Iterable[(String, Int)])) => (l._1, l._2.toList.sortBy(_._2).reverse.take(5)))(_)\n    val originalValue = originalFunction(inputParameter)\n    (originalValue._1, originalValue._2.tail)\n  } }\n  genresTagsCountSortedTop5\n}",
          "originalCode" : "def tagBestSummarizeGenre(genresTagsCountSorted: RDD[(String, (String, Int))]) = {\n    val genresTagsCountSortedGrouped: RDD[(String, Iterable[(String, Int)])] = genresTagsCountSorted.groupByKey()\n    val genresTagsCountSortedTop5: RDD[(String, List[(String, Int)])] = genresTagsCountSortedGrouped.map((l: (String, Iterable[(String, Int)])) => (l._1, l._2.toList.sortBy(_._2).reverse.take(5)))\n    genresTagsCountSortedTop5\n  }",
          "status" : "Killed"
        },
        {
          "id" : 192,
          "originalProgramId" : 8,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def tagBestSummarizeGenre(genresTagsCountSorted: RDD[(String, (String, Int))]) = {\n  val genresTagsCountSortedGrouped: RDD[(String, Iterable[(String, Int)])] = genresTagsCountSorted.groupByKey()\n  val genresTagsCountSortedTop5: RDD[(String, List[(String, Int)])] = genresTagsCountSortedGrouped.map { (inputParameter: (String, Iterable[(String, Int)])) => {\n    val originalFunction = ((l: (String, Iterable[(String, Int)])) => (l._1, l._2.toList.sortBy(_._2).reverse.take(5)))(_)\n    val originalValue = originalFunction(inputParameter)\n    (originalValue._1, originalValue._2.reverse)\n  } }\n  genresTagsCountSortedTop5\n}",
          "originalCode" : "def tagBestSummarizeGenre(genresTagsCountSorted: RDD[(String, (String, Int))]) = {\n    val genresTagsCountSortedGrouped: RDD[(String, Iterable[(String, Int)])] = genresTagsCountSorted.groupByKey()\n    val genresTagsCountSortedTop5: RDD[(String, List[(String, Int)])] = genresTagsCountSortedGrouped.map((l: (String, Iterable[(String, Int)])) => (l._1, l._2.toList.sortBy(_._2).reverse.take(5)))\n    genresTagsCountSortedTop5\n  }",
          "status" : "Killed"
        },
        {
          "id" : 193,
          "originalProgramId" : 8,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def tagBestSummarizeGenre(genresTagsCountSorted: RDD[(String, (String, Int))]) = {\n  val genresTagsCountSortedGrouped: RDD[(String, Iterable[(String, Int)])] = genresTagsCountSorted.groupByKey()\n  val genresTagsCountSortedTop5: RDD[(String, List[(String, Int)])] = genresTagsCountSortedGrouped.map { (inputParameter: (String, Iterable[(String, Int)])) => {\n    val originalFunction = ((l: (String, Iterable[(String, Int)])) => (l._1, l._2.toList.sortBy(_._2).reverse.take(5)))(_)\n    val originalValue = originalFunction(inputParameter)\n    (originalValue._1, List[(String, Int)]())\n  } }\n  genresTagsCountSortedTop5\n}",
          "originalCode" : "def tagBestSummarizeGenre(genresTagsCountSorted: RDD[(String, (String, Int))]) = {\n    val genresTagsCountSortedGrouped: RDD[(String, Iterable[(String, Int)])] = genresTagsCountSorted.groupByKey()\n    val genresTagsCountSortedTop5: RDD[(String, List[(String, Int)])] = genresTagsCountSortedGrouped.map((l: (String, Iterable[(String, Int)])) => (l._1, l._2.toList.sortBy(_._2).reverse.take(5)))\n    genresTagsCountSortedTop5\n  }",
          "status" : "Killed"
        },
        {
          "id" : 194,
          "originalProgramId" : 8,
          "mutationOperator" : "DTI",
          "mutationOperatorDescription" : "Distinct Transformation Insertion",
          "mutantCode" : "def tagBestSummarizeGenre(genresTagsCountSorted: RDD[(String, (String, Int))]) = {\n  val genresTagsCountSortedGrouped: RDD[(String, Iterable[(String, Int)])] = genresTagsCountSorted.groupByKey().distinct()\n  val genresTagsCountSortedTop5: RDD[(String, List[(String, Int)])] = genresTagsCountSortedGrouped.map { (l: (String, Iterable[(String, Int)])) => (l._1, l._2.toList.sortBy(_._2).reverse.take(5)) }\n  genresTagsCountSortedTop5\n}",
          "originalCode" : "def tagBestSummarizeGenre(genresTagsCountSorted: RDD[(String, (String, Int))]) = {\n    val genresTagsCountSortedGrouped: RDD[(String, Iterable[(String, Int)])] = genresTagsCountSorted.groupByKey()\n    val genresTagsCountSortedTop5: RDD[(String, List[(String, Int)])] = genresTagsCountSortedGrouped.map((l: (String, Iterable[(String, Int)])) => (l._1, l._2.toList.sortBy(_._2).reverse.take(5)))\n    genresTagsCountSortedTop5\n  }",
          "status" : "Equivalent"
        },
        {
          "id" : 195,
          "originalProgramId" : 8,
          "mutationOperator" : "DTI",
          "mutationOperatorDescription" : "Distinct Transformation Insertion",
          "mutantCode" : "def tagBestSummarizeGenre(genresTagsCountSorted: RDD[(String, (String, Int))]) = {\n  val genresTagsCountSortedGrouped: RDD[(String, Iterable[(String, Int)])] = genresTagsCountSorted.groupByKey()\n  val genresTagsCountSortedTop5: RDD[(String, List[(String, Int)])] = genresTagsCountSortedGrouped.map { (l: (String, Iterable[(String, Int)])) => (l._1, l._2.toList.sortBy(_._2).reverse.take(5)) }.distinct()\n  genresTagsCountSortedTop5\n}",
          "originalCode" : "def tagBestSummarizeGenre(genresTagsCountSorted: RDD[(String, (String, Int))]) = {\n    val genresTagsCountSortedGrouped: RDD[(String, Iterable[(String, Int)])] = genresTagsCountSorted.groupByKey()\n    val genresTagsCountSortedTop5: RDD[(String, List[(String, Int)])] = genresTagsCountSortedGrouped.map((l: (String, Iterable[(String, Int)])) => (l._1, l._2.toList.sortBy(_._2).reverse.take(5)))\n    genresTagsCountSortedTop5\n  }",
          "status" : "Equivalent"
        }
      ],
      "removedMutants" : [
      ],
      "mutationOperatorsMetrics" : {
        "totalMutantsPerOperator" : {
          "FTD" : 0,
          "JTR" : 6,
          "UTR" : 6,
          "MTR" : 114,
          "UTD" : 8,
          "OTD" : 3,
          "BTR" : 0,
          "STR" : 0,
          "BTS" : 0,
          "ATR" : 20,
          "OTI" : 3,
          "DTI" : 32,
          "DTD" : 0,
          "NFTP" : 0,
          "UTS" : 3
        },
        "totalKilledMutantsPerOperator" : {
          "FTD" : 0,
          "JTR" : 0,
          "UTR" : 5,
          "MTR" : 103,
          "UTD" : 6,
          "OTD" : 1,
          "BTR" : 0,
          "STR" : 0,
          "BTS" : 0,
          "ATR" : 13,
          "OTI" : 1,
          "DTI" : 8,
          "DTD" : 0,
          "NFTP" : 0,
          "UTS" : 2
        },
        "totalLivedMutantsPerOperator" : {
          "FTD" : 0,
          "JTR" : 6,
          "UTR" : 1,
          "MTR" : 1,
          "UTD" : 2,
          "OTD" : 2,
          "BTR" : 0,
          "STR" : 0,
          "BTS" : 0,
          "ATR" : 4,
          "OTI" : 2,
          "DTI" : 13,
          "DTD" : 0,
          "NFTP" : 0,
          "UTS" : 1
        },
        "totalEquivalentMutantsPerOperator" : {
          "FTD" : 0,
          "JTR" : 0,
          "UTR" : 0,
          "MTR" : 10,
          "UTD" : 0,
          "OTD" : 0,
          "BTR" : 0,
          "STR" : 0,
          "BTS" : 0,
          "ATR" : 3,
          "OTI" : 0,
          "DTI" : 11,
          "DTD" : 0,
          "NFTP" : 0,
          "UTS" : 0
        },
        "totalErrorMutantsPerOperator" : {
          "FTD" : 0,
          "JTR" : 0,
          "UTR" : 0,
          "MTR" : 0,
          "UTD" : 0,
          "OTD" : 0,
          "BTR" : 0,
          "STR" : 0,
          "BTS" : 0,
          "ATR" : 0,
          "OTI" : 0,
          "DTI" : 0,
          "DTD" : 0,
          "NFTP" : 0,
          "UTS" : 0
        },
        "totalRemovedMutantsPerOperator" : {
          "FTD" : 0,
          "JTR" : 0,
          "UTR" : 0,
          "MTR" : 0,
          "UTD" : 0,
          "OTD" : 0,
          "BTR" : 0,
          "STR" : 0,
          "BTS" : 0,
          "ATR" : 0,
          "OTI" : 0,
          "DTI" : 0,
          "DTD" : 0,
          "NFTP" : 0,
          "UTS" : 0
        },
        "descriptionPerOperator" : {
          "FTD" : "Filter Transformation Deletion",
          "JTR" : "Join Transformation Replacement",
          "UTR" : "Unary Transformation Replacement",
          "MTR" : "Mapping Transformation Replacement",
          "UTD" : "Unary Transformation Deletion",
          "OTD" : "Order Transformation Deletion",
          "BTR" : "Binary Transformation Replacement",
          "STR" : "Set Transformation Replacement",
          "BTS" : "Binary Transformation Swap",
          "ATR" : "Aggregation Transformation Replacement",
          "OTI" : "Order Transformation Inversion",
          "DTI" : "Distinct Transformation Insertion",
          "DTD" : "Distinct Transformation Deletion",
          "NFTP" : "Negation of Filter Transformation Predicate",
          "UTS" : "Unary Transformation Swap"
        }
      },
      "totalPrograms" : 8,
      "totalDatasets" : 44,
      "totalTransformations" : 33,
      "totalMutants" : 195,
      "totalKilledMutants" : 139,
      "totalLivedMutants" : 32,
      "totalEquivalentMutants" : 24,
      "totalErrorMutants" : 0,
      "totalRemovedMutants" : 0,
      "mutationScore" : 0.8128655
    }
  ],
  "programs" : [
    {
      "id" : 1,
      "programSourceId" : 1,
      "name" : "parseRDDs",
      "code" : "def parseRDDs(ratingsCSV: RDD[String], moviesCSV: RDD[String], tagsCSV: RDD[String]): (RDD[Rating], RDD[Movie], RDD[Tag]) = {\n    val ratings: RDD[Rating] = ratingsCSV.flatMap(parseRatings)\n    val movies: RDD[Movie] = moviesCSV.flatMap(parseMovies)\n    val tags: RDD[Tag] = tagsCSV.flatMap(parseTags)\n    (ratings, movies, tags)\n  }",
      "datasets" : [
        {
          "id" : 1,
          "name" : "ratingsCSV",
          "datasetType" : "RDD[String]",
          "inputDataset" : true,
          "outputDataset" : false
        },
        {
          "id" : 2,
          "name" : "moviesCSV",
          "datasetType" : "RDD[String]",
          "inputDataset" : true,
          "outputDataset" : false
        },
        {
          "id" : 3,
          "name" : "tagsCSV",
          "datasetType" : "RDD[String]",
          "inputDataset" : true,
          "outputDataset" : false
        },
        {
          "id" : 4,
          "name" : "ratings",
          "datasetType" : "RDD[Rating]",
          "inputDataset" : false,
          "outputDataset" : true
        },
        {
          "id" : 5,
          "name" : "movies",
          "datasetType" : "RDD[Movie]",
          "inputDataset" : false,
          "outputDataset" : true
        },
        {
          "id" : 6,
          "name" : "tags",
          "datasetType" : "RDD[Tag]",
          "inputDataset" : false,
          "outputDataset" : true
        }
      ],
      "transformations" : [
        {
          "id" : 1,
          "name" : "flatMap",
          "inputTypes" : [
            "RDD[String]"
          ],
          "outputTypes" : [
            "RDD[Rating]"
          ],
          "loadTransformation" : false
        },
        {
          "id" : 2,
          "name" : "flatMap",
          "inputTypes" : [
            "RDD[String]"
          ],
          "outputTypes" : [
            "RDD[Movie]"
          ],
          "loadTransformation" : false
        },
        {
          "id" : 3,
          "name" : "flatMap",
          "inputTypes" : [
            "RDD[String]"
          ],
          "outputTypes" : [
            "RDD[Tag]"
          ],
          "loadTransformation" : false
        }
      ],
      "edges" : [
        {
          "id" : 1,
          "datasetId" : 1,
          "transformationId" : 1,
          "direction" : "DatasetToTransformation"
        },
        {
          "id" : 2,
          "datasetId" : 4,
          "transformationId" : 1,
          "direction" : "TransformationToDataset"
        },
        {
          "id" : 3,
          "datasetId" : 2,
          "transformationId" : 2,
          "direction" : "DatasetToTransformation"
        },
        {
          "id" : 4,
          "datasetId" : 5,
          "transformationId" : 2,
          "direction" : "TransformationToDataset"
        },
        {
          "id" : 5,
          "datasetId" : 3,
          "transformationId" : 3,
          "direction" : "DatasetToTransformation"
        },
        {
          "id" : 6,
          "datasetId" : 6,
          "transformationId" : 3,
          "direction" : "TransformationToDataset"
        }
      ],
      "mutants" : [
        {
          "id" : 1,
          "originalProgramId" : 1,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def parseRDDs(ratingsCSV: RDD[String], moviesCSV: RDD[String], tagsCSV: RDD[String]): (RDD[Rating], RDD[Movie], RDD[Tag]) = {\n  val ratings: RDD[Rating] = ratingsCSV.flatMap { (inputParameter: String) => {\n    val originalFunction = parseRatings(_)\n    val originalValue = originalFunction(inputParameter)\n    originalValue.headOption\n  } }\n  val movies: RDD[Movie] = moviesCSV.flatMap(parseMovies)\n  val tags: RDD[Tag] = tagsCSV.flatMap(parseTags)\n  (ratings, movies, tags)\n}",
          "originalCode" : "def parseRDDs(ratingsCSV: RDD[String], moviesCSV: RDD[String], tagsCSV: RDD[String]): (RDD[Rating], RDD[Movie], RDD[Tag]) = {\n    val ratings: RDD[Rating] = ratingsCSV.flatMap(parseRatings)\n    val movies: RDD[Movie] = moviesCSV.flatMap(parseMovies)\n    val tags: RDD[Tag] = tagsCSV.flatMap(parseTags)\n    (ratings, movies, tags)\n  }",
          "status" : "Equivalent"
        },
        {
          "id" : 2,
          "originalProgramId" : 1,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def parseRDDs(ratingsCSV: RDD[String], moviesCSV: RDD[String], tagsCSV: RDD[String]): (RDD[Rating], RDD[Movie], RDD[Tag]) = {\n  val ratings: RDD[Rating] = ratingsCSV.flatMap { (inputParameter: String) => {\n    val originalFunction = parseRatings(_)\n    val originalValue = originalFunction(inputParameter)\n    originalValue.toList.tail\n  } }\n  val movies: RDD[Movie] = moviesCSV.flatMap(parseMovies)\n  val tags: RDD[Tag] = tagsCSV.flatMap(parseTags)\n  (ratings, movies, tags)\n}",
          "originalCode" : "def parseRDDs(ratingsCSV: RDD[String], moviesCSV: RDD[String], tagsCSV: RDD[String]): (RDD[Rating], RDD[Movie], RDD[Tag]) = {\n    val ratings: RDD[Rating] = ratingsCSV.flatMap(parseRatings)\n    val movies: RDD[Movie] = moviesCSV.flatMap(parseMovies)\n    val tags: RDD[Tag] = tagsCSV.flatMap(parseTags)\n    (ratings, movies, tags)\n  }",
          "status" : "Killed"
        },
        {
          "id" : 3,
          "originalProgramId" : 1,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def parseRDDs(ratingsCSV: RDD[String], moviesCSV: RDD[String], tagsCSV: RDD[String]): (RDD[Rating], RDD[Movie], RDD[Tag]) = {\n  val ratings: RDD[Rating] = ratingsCSV.flatMap { (inputParameter: String) => {\n    val originalFunction = parseRatings(_)\n    val originalValue = originalFunction(inputParameter)\n    originalValue.toList.reverse\n  } }\n  val movies: RDD[Movie] = moviesCSV.flatMap(parseMovies)\n  val tags: RDD[Tag] = tagsCSV.flatMap(parseTags)\n  (ratings, movies, tags)\n}",
          "originalCode" : "def parseRDDs(ratingsCSV: RDD[String], moviesCSV: RDD[String], tagsCSV: RDD[String]): (RDD[Rating], RDD[Movie], RDD[Tag]) = {\n    val ratings: RDD[Rating] = ratingsCSV.flatMap(parseRatings)\n    val movies: RDD[Movie] = moviesCSV.flatMap(parseMovies)\n    val tags: RDD[Tag] = tagsCSV.flatMap(parseTags)\n    (ratings, movies, tags)\n  }",
          "status" : "Equivalent"
        },
        {
          "id" : 4,
          "originalProgramId" : 1,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def parseRDDs(ratingsCSV: RDD[String], moviesCSV: RDD[String], tagsCSV: RDD[String]): (RDD[Rating], RDD[Movie], RDD[Tag]) = {\n  val ratings: RDD[Rating] = ratingsCSV.flatMap { (inputParameter: String) => {\n    val originalFunction = parseRatings(_)\n    val originalValue = originalFunction(inputParameter)\n    List[Rating]()\n  } }\n  val movies: RDD[Movie] = moviesCSV.flatMap(parseMovies)\n  val tags: RDD[Tag] = tagsCSV.flatMap(parseTags)\n  (ratings, movies, tags)\n}",
          "originalCode" : "def parseRDDs(ratingsCSV: RDD[String], moviesCSV: RDD[String], tagsCSV: RDD[String]): (RDD[Rating], RDD[Movie], RDD[Tag]) = {\n    val ratings: RDD[Rating] = ratingsCSV.flatMap(parseRatings)\n    val movies: RDD[Movie] = moviesCSV.flatMap(parseMovies)\n    val tags: RDD[Tag] = tagsCSV.flatMap(parseTags)\n    (ratings, movies, tags)\n  }",
          "status" : "Killed"
        },
        {
          "id" : 5,
          "originalProgramId" : 1,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def parseRDDs(ratingsCSV: RDD[String], moviesCSV: RDD[String], tagsCSV: RDD[String]): (RDD[Rating], RDD[Movie], RDD[Tag]) = {\n  val ratings: RDD[Rating] = ratingsCSV.flatMap(parseRatings)\n  val movies: RDD[Movie] = moviesCSV.flatMap { (inputParameter: String) => {\n    val originalFunction = parseMovies(_)\n    val originalValue = originalFunction(inputParameter)\n    originalValue.headOption\n  } }\n  val tags: RDD[Tag] = tagsCSV.flatMap(parseTags)\n  (ratings, movies, tags)\n}",
          "originalCode" : "def parseRDDs(ratingsCSV: RDD[String], moviesCSV: RDD[String], tagsCSV: RDD[String]): (RDD[Rating], RDD[Movie], RDD[Tag]) = {\n    val ratings: RDD[Rating] = ratingsCSV.flatMap(parseRatings)\n    val movies: RDD[Movie] = moviesCSV.flatMap(parseMovies)\n    val tags: RDD[Tag] = tagsCSV.flatMap(parseTags)\n    (ratings, movies, tags)\n  }",
          "status" : "Equivalent"
        },
        {
          "id" : 6,
          "originalProgramId" : 1,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def parseRDDs(ratingsCSV: RDD[String], moviesCSV: RDD[String], tagsCSV: RDD[String]): (RDD[Rating], RDD[Movie], RDD[Tag]) = {\n  val ratings: RDD[Rating] = ratingsCSV.flatMap(parseRatings)\n  val movies: RDD[Movie] = moviesCSV.flatMap { (inputParameter: String) => {\n    val originalFunction = parseMovies(_)\n    val originalValue = originalFunction(inputParameter)\n    originalValue.toList.tail\n  } }\n  val tags: RDD[Tag] = tagsCSV.flatMap(parseTags)\n  (ratings, movies, tags)\n}",
          "originalCode" : "def parseRDDs(ratingsCSV: RDD[String], moviesCSV: RDD[String], tagsCSV: RDD[String]): (RDD[Rating], RDD[Movie], RDD[Tag]) = {\n    val ratings: RDD[Rating] = ratingsCSV.flatMap(parseRatings)\n    val movies: RDD[Movie] = moviesCSV.flatMap(parseMovies)\n    val tags: RDD[Tag] = tagsCSV.flatMap(parseTags)\n    (ratings, movies, tags)\n  }",
          "status" : "Killed"
        },
        {
          "id" : 7,
          "originalProgramId" : 1,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def parseRDDs(ratingsCSV: RDD[String], moviesCSV: RDD[String], tagsCSV: RDD[String]): (RDD[Rating], RDD[Movie], RDD[Tag]) = {\n  val ratings: RDD[Rating] = ratingsCSV.flatMap(parseRatings)\n  val movies: RDD[Movie] = moviesCSV.flatMap { (inputParameter: String) => {\n    val originalFunction = parseMovies(_)\n    val originalValue = originalFunction(inputParameter)\n    originalValue.toList.reverse\n  } }\n  val tags: RDD[Tag] = tagsCSV.flatMap(parseTags)\n  (ratings, movies, tags)\n}",
          "originalCode" : "def parseRDDs(ratingsCSV: RDD[String], moviesCSV: RDD[String], tagsCSV: RDD[String]): (RDD[Rating], RDD[Movie], RDD[Tag]) = {\n    val ratings: RDD[Rating] = ratingsCSV.flatMap(parseRatings)\n    val movies: RDD[Movie] = moviesCSV.flatMap(parseMovies)\n    val tags: RDD[Tag] = tagsCSV.flatMap(parseTags)\n    (ratings, movies, tags)\n  }",
          "status" : "Equivalent"
        },
        {
          "id" : 8,
          "originalProgramId" : 1,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def parseRDDs(ratingsCSV: RDD[String], moviesCSV: RDD[String], tagsCSV: RDD[String]): (RDD[Rating], RDD[Movie], RDD[Tag]) = {\n  val ratings: RDD[Rating] = ratingsCSV.flatMap(parseRatings)\n  val movies: RDD[Movie] = moviesCSV.flatMap { (inputParameter: String) => {\n    val originalFunction = parseMovies(_)\n    val originalValue = originalFunction(inputParameter)\n    List[Movie]()\n  } }\n  val tags: RDD[Tag] = tagsCSV.flatMap(parseTags)\n  (ratings, movies, tags)\n}",
          "originalCode" : "def parseRDDs(ratingsCSV: RDD[String], moviesCSV: RDD[String], tagsCSV: RDD[String]): (RDD[Rating], RDD[Movie], RDD[Tag]) = {\n    val ratings: RDD[Rating] = ratingsCSV.flatMap(parseRatings)\n    val movies: RDD[Movie] = moviesCSV.flatMap(parseMovies)\n    val tags: RDD[Tag] = tagsCSV.flatMap(parseTags)\n    (ratings, movies, tags)\n  }",
          "status" : "Killed"
        },
        {
          "id" : 9,
          "originalProgramId" : 1,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def parseRDDs(ratingsCSV: RDD[String], moviesCSV: RDD[String], tagsCSV: RDD[String]): (RDD[Rating], RDD[Movie], RDD[Tag]) = {\n  val ratings: RDD[Rating] = ratingsCSV.flatMap(parseRatings)\n  val movies: RDD[Movie] = moviesCSV.flatMap(parseMovies)\n  val tags: RDD[Tag] = tagsCSV.flatMap { (inputParameter: String) => {\n    val originalFunction = parseTags(_)\n    val originalValue = originalFunction(inputParameter)\n    originalValue.headOption\n  } }\n  (ratings, movies, tags)\n}",
          "originalCode" : "def parseRDDs(ratingsCSV: RDD[String], moviesCSV: RDD[String], tagsCSV: RDD[String]): (RDD[Rating], RDD[Movie], RDD[Tag]) = {\n    val ratings: RDD[Rating] = ratingsCSV.flatMap(parseRatings)\n    val movies: RDD[Movie] = moviesCSV.flatMap(parseMovies)\n    val tags: RDD[Tag] = tagsCSV.flatMap(parseTags)\n    (ratings, movies, tags)\n  }",
          "status" : "Equivalent"
        },
        {
          "id" : 10,
          "originalProgramId" : 1,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def parseRDDs(ratingsCSV: RDD[String], moviesCSV: RDD[String], tagsCSV: RDD[String]): (RDD[Rating], RDD[Movie], RDD[Tag]) = {\n  val ratings: RDD[Rating] = ratingsCSV.flatMap(parseRatings)\n  val movies: RDD[Movie] = moviesCSV.flatMap(parseMovies)\n  val tags: RDD[Tag] = tagsCSV.flatMap { (inputParameter: String) => {\n    val originalFunction = parseTags(_)\n    val originalValue = originalFunction(inputParameter)\n    originalValue.toList.tail\n  } }\n  (ratings, movies, tags)\n}",
          "originalCode" : "def parseRDDs(ratingsCSV: RDD[String], moviesCSV: RDD[String], tagsCSV: RDD[String]): (RDD[Rating], RDD[Movie], RDD[Tag]) = {\n    val ratings: RDD[Rating] = ratingsCSV.flatMap(parseRatings)\n    val movies: RDD[Movie] = moviesCSV.flatMap(parseMovies)\n    val tags: RDD[Tag] = tagsCSV.flatMap(parseTags)\n    (ratings, movies, tags)\n  }",
          "status" : "Killed"
        },
        {
          "id" : 11,
          "originalProgramId" : 1,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def parseRDDs(ratingsCSV: RDD[String], moviesCSV: RDD[String], tagsCSV: RDD[String]): (RDD[Rating], RDD[Movie], RDD[Tag]) = {\n  val ratings: RDD[Rating] = ratingsCSV.flatMap(parseRatings)\n  val movies: RDD[Movie] = moviesCSV.flatMap(parseMovies)\n  val tags: RDD[Tag] = tagsCSV.flatMap { (inputParameter: String) => {\n    val originalFunction = parseTags(_)\n    val originalValue = originalFunction(inputParameter)\n    originalValue.toList.reverse\n  } }\n  (ratings, movies, tags)\n}",
          "originalCode" : "def parseRDDs(ratingsCSV: RDD[String], moviesCSV: RDD[String], tagsCSV: RDD[String]): (RDD[Rating], RDD[Movie], RDD[Tag]) = {\n    val ratings: RDD[Rating] = ratingsCSV.flatMap(parseRatings)\n    val movies: RDD[Movie] = moviesCSV.flatMap(parseMovies)\n    val tags: RDD[Tag] = tagsCSV.flatMap(parseTags)\n    (ratings, movies, tags)\n  }",
          "status" : "Equivalent"
        },
        {
          "id" : 12,
          "originalProgramId" : 1,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def parseRDDs(ratingsCSV: RDD[String], moviesCSV: RDD[String], tagsCSV: RDD[String]): (RDD[Rating], RDD[Movie], RDD[Tag]) = {\n  val ratings: RDD[Rating] = ratingsCSV.flatMap(parseRatings)\n  val movies: RDD[Movie] = moviesCSV.flatMap(parseMovies)\n  val tags: RDD[Tag] = tagsCSV.flatMap { (inputParameter: String) => {\n    val originalFunction = parseTags(_)\n    val originalValue = originalFunction(inputParameter)\n    List[Tag]()\n  } }\n  (ratings, movies, tags)\n}",
          "originalCode" : "def parseRDDs(ratingsCSV: RDD[String], moviesCSV: RDD[String], tagsCSV: RDD[String]): (RDD[Rating], RDD[Movie], RDD[Tag]) = {\n    val ratings: RDD[Rating] = ratingsCSV.flatMap(parseRatings)\n    val movies: RDD[Movie] = moviesCSV.flatMap(parseMovies)\n    val tags: RDD[Tag] = tagsCSV.flatMap(parseTags)\n    (ratings, movies, tags)\n  }",
          "status" : "Killed"
        },
        {
          "id" : 13,
          "originalProgramId" : 1,
          "mutationOperator" : "DTI",
          "mutationOperatorDescription" : "Distinct Transformation Insertion",
          "mutantCode" : "def parseRDDs(ratingsCSV: RDD[String], moviesCSV: RDD[String], tagsCSV: RDD[String]): (RDD[Rating], RDD[Movie], RDD[Tag]) = {\n  val ratings: RDD[Rating] = ratingsCSV.flatMap(parseRatings).distinct()\n  val movies: RDD[Movie] = moviesCSV.flatMap(parseMovies)\n  val tags: RDD[Tag] = tagsCSV.flatMap(parseTags)\n  (ratings, movies, tags)\n}",
          "originalCode" : "def parseRDDs(ratingsCSV: RDD[String], moviesCSV: RDD[String], tagsCSV: RDD[String]): (RDD[Rating], RDD[Movie], RDD[Tag]) = {\n    val ratings: RDD[Rating] = ratingsCSV.flatMap(parseRatings)\n    val movies: RDD[Movie] = moviesCSV.flatMap(parseMovies)\n    val tags: RDD[Tag] = tagsCSV.flatMap(parseTags)\n    (ratings, movies, tags)\n  }",
          "status" : "Lived"
        },
        {
          "id" : 14,
          "originalProgramId" : 1,
          "mutationOperator" : "DTI",
          "mutationOperatorDescription" : "Distinct Transformation Insertion",
          "mutantCode" : "def parseRDDs(ratingsCSV: RDD[String], moviesCSV: RDD[String], tagsCSV: RDD[String]): (RDD[Rating], RDD[Movie], RDD[Tag]) = {\n  val ratings: RDD[Rating] = ratingsCSV.flatMap(parseRatings)\n  val movies: RDD[Movie] = moviesCSV.flatMap(parseMovies).distinct()\n  val tags: RDD[Tag] = tagsCSV.flatMap(parseTags)\n  (ratings, movies, tags)\n}",
          "originalCode" : "def parseRDDs(ratingsCSV: RDD[String], moviesCSV: RDD[String], tagsCSV: RDD[String]): (RDD[Rating], RDD[Movie], RDD[Tag]) = {\n    val ratings: RDD[Rating] = ratingsCSV.flatMap(parseRatings)\n    val movies: RDD[Movie] = moviesCSV.flatMap(parseMovies)\n    val tags: RDD[Tag] = tagsCSV.flatMap(parseTags)\n    (ratings, movies, tags)\n  }",
          "status" : "Lived"
        },
        {
          "id" : 15,
          "originalProgramId" : 1,
          "mutationOperator" : "DTI",
          "mutationOperatorDescription" : "Distinct Transformation Insertion",
          "mutantCode" : "def parseRDDs(ratingsCSV: RDD[String], moviesCSV: RDD[String], tagsCSV: RDD[String]): (RDD[Rating], RDD[Movie], RDD[Tag]) = {\n  val ratings: RDD[Rating] = ratingsCSV.flatMap(parseRatings)\n  val movies: RDD[Movie] = moviesCSV.flatMap(parseMovies)\n  val tags: RDD[Tag] = tagsCSV.flatMap(parseTags).distinct()\n  (ratings, movies, tags)\n}",
          "originalCode" : "def parseRDDs(ratingsCSV: RDD[String], moviesCSV: RDD[String], tagsCSV: RDD[String]): (RDD[Rating], RDD[Movie], RDD[Tag]) = {\n    val ratings: RDD[Rating] = ratingsCSV.flatMap(parseRatings)\n    val movies: RDD[Movie] = moviesCSV.flatMap(parseMovies)\n    val tags: RDD[Tag] = tagsCSV.flatMap(parseTags)\n    (ratings, movies, tags)\n  }",
          "status" : "Lived"
        }
      ],
      "removedMutants" : [
      ],
      "mutationOperatorsMetrics" : {
        "totalMutantsPerOperator" : {
          "FTD" : 0,
          "JTR" : 0,
          "UTR" : 0,
          "MTR" : 12,
          "UTD" : 0,
          "OTD" : 0,
          "BTR" : 0,
          "STR" : 0,
          "BTS" : 0,
          "ATR" : 0,
          "OTI" : 0,
          "DTI" : 3,
          "DTD" : 0,
          "NFTP" : 0,
          "UTS" : 0
        },
        "totalKilledMutantsPerOperator" : {
          "FTD" : 0,
          "JTR" : 0,
          "UTR" : 0,
          "MTR" : 6,
          "UTD" : 0,
          "OTD" : 0,
          "BTR" : 0,
          "STR" : 0,
          "BTS" : 0,
          "ATR" : 0,
          "OTI" : 0,
          "DTI" : 0,
          "DTD" : 0,
          "NFTP" : 0,
          "UTS" : 0
        },
        "totalLivedMutantsPerOperator" : {
          "FTD" : 0,
          "JTR" : 0,
          "UTR" : 0,
          "MTR" : 0,
          "UTD" : 0,
          "OTD" : 0,
          "BTR" : 0,
          "STR" : 0,
          "BTS" : 0,
          "ATR" : 0,
          "OTI" : 0,
          "DTI" : 3,
          "DTD" : 0,
          "NFTP" : 0,
          "UTS" : 0
        },
        "totalEquivalentMutantsPerOperator" : {
          "FTD" : 0,
          "JTR" : 0,
          "UTR" : 0,
          "MTR" : 6,
          "UTD" : 0,
          "OTD" : 0,
          "BTR" : 0,
          "STR" : 0,
          "BTS" : 0,
          "ATR" : 0,
          "OTI" : 0,
          "DTI" : 0,
          "DTD" : 0,
          "NFTP" : 0,
          "UTS" : 0
        },
        "totalErrorMutantsPerOperator" : {
          "FTD" : 0,
          "JTR" : 0,
          "UTR" : 0,
          "MTR" : 0,
          "UTD" : 0,
          "OTD" : 0,
          "BTR" : 0,
          "STR" : 0,
          "BTS" : 0,
          "ATR" : 0,
          "OTI" : 0,
          "DTI" : 0,
          "DTD" : 0,
          "NFTP" : 0,
          "UTS" : 0
        },
        "totalRemovedMutantsPerOperator" : {
          "FTD" : 0,
          "JTR" : 0,
          "UTR" : 0,
          "MTR" : 0,
          "UTD" : 0,
          "OTD" : 0,
          "BTR" : 0,
          "STR" : 0,
          "BTS" : 0,
          "ATR" : 0,
          "OTI" : 0,
          "DTI" : 0,
          "DTD" : 0,
          "NFTP" : 0,
          "UTS" : 0
        },
        "descriptionPerOperator" : {
          "FTD" : "Filter Transformation Deletion",
          "JTR" : "Join Transformation Replacement",
          "UTR" : "Unary Transformation Replacement",
          "MTR" : "Mapping Transformation Replacement",
          "UTD" : "Unary Transformation Deletion",
          "OTD" : "Order Transformation Deletion",
          "BTR" : "Binary Transformation Replacement",
          "STR" : "Set Transformation Replacement",
          "BTS" : "Binary Transformation Swap",
          "ATR" : "Aggregation Transformation Replacement",
          "OTI" : "Order Transformation Inversion",
          "DTI" : "Distinct Transformation Insertion",
          "DTD" : "Distinct Transformation Deletion",
          "NFTP" : "Negation of Filter Transformation Predicate",
          "UTS" : "Unary Transformation Swap"
        }
      },
      "totalDatasets" : 6,
      "totalTransformations" : 3,
      "totalMutants" : 15,
      "totalKilledMutants" : 6,
      "totalLivedMutants" : 3,
      "totalEquivalentMutants" : 6,
      "totalErrorMutants" : 0,
      "totalRemovedMutants" : 0,
      "mutationScore" : 0.6666667
    },
    {
      "id" : 2,
      "programSourceId" : 1,
      "name" : "moviesPerYearCount",
      "code" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n    val yearTuple: RDD[(Int, Int)] = movies.map((m: Movie) => (m.year, 1))\n    val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey((a: Int, b: Int) => a + b)\n    val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map((t: (Int, Int)) => (t._2, t._1))\n    val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n    moviesPerYearInverseSorted\n  }",
      "datasets" : [
        {
          "id" : 7,
          "name" : "movies",
          "datasetType" : "RDD[Movie]",
          "inputDataset" : true,
          "outputDataset" : false
        },
        {
          "id" : 8,
          "name" : "yearTuple",
          "datasetType" : "RDD[(Int, Int)]",
          "inputDataset" : false,
          "outputDataset" : false
        },
        {
          "id" : 9,
          "name" : "moviesPerYear",
          "datasetType" : "RDD[(Int, Int)]",
          "inputDataset" : false,
          "outputDataset" : false
        },
        {
          "id" : 10,
          "name" : "moviesPerYearInverse",
          "datasetType" : "RDD[(Int, Int)]",
          "inputDataset" : false,
          "outputDataset" : false
        },
        {
          "id" : 11,
          "name" : "moviesPerYearInverseSorted",
          "datasetType" : "RDD[(Int, Int)]",
          "inputDataset" : false,
          "outputDataset" : true
        }
      ],
      "transformations" : [
        {
          "id" : 4,
          "name" : "map",
          "inputTypes" : [
            "RDD[Movie]"
          ],
          "outputTypes" : [
            "RDD[(Int, Int)]"
          ],
          "loadTransformation" : false
        },
        {
          "id" : 5,
          "name" : "reduceByKey",
          "inputTypes" : [
            "RDD[(Int, Int)]"
          ],
          "outputTypes" : [
            "RDD[(Int, Int)]"
          ],
          "loadTransformation" : false
        },
        {
          "id" : 6,
          "name" : "map",
          "inputTypes" : [
            "RDD[(Int, Int)]"
          ],
          "outputTypes" : [
            "RDD[(Int, Int)]"
          ],
          "loadTransformation" : false
        },
        {
          "id" : 7,
          "name" : "sortByKey",
          "inputTypes" : [
            "RDD[(Int, Int)]"
          ],
          "outputTypes" : [
            "RDD[(Int, Int)]"
          ],
          "loadTransformation" : false
        }
      ],
      "edges" : [
        {
          "id" : 7,
          "datasetId" : 7,
          "transformationId" : 4,
          "direction" : "DatasetToTransformation"
        },
        {
          "id" : 8,
          "datasetId" : 8,
          "transformationId" : 4,
          "direction" : "TransformationToDataset"
        },
        {
          "id" : 9,
          "datasetId" : 8,
          "transformationId" : 5,
          "direction" : "DatasetToTransformation"
        },
        {
          "id" : 10,
          "datasetId" : 9,
          "transformationId" : 5,
          "direction" : "TransformationToDataset"
        },
        {
          "id" : 11,
          "datasetId" : 9,
          "transformationId" : 6,
          "direction" : "DatasetToTransformation"
        },
        {
          "id" : 12,
          "datasetId" : 10,
          "transformationId" : 6,
          "direction" : "TransformationToDataset"
        },
        {
          "id" : 13,
          "datasetId" : 10,
          "transformationId" : 7,
          "direction" : "DatasetToTransformation"
        },
        {
          "id" : 14,
          "datasetId" : 11,
          "transformationId" : 7,
          "direction" : "TransformationToDataset"
        }
      ],
      "mutants" : [
        {
          "id" : 16,
          "originalProgramId" : 2,
          "mutationOperator" : "UTS",
          "mutationOperatorDescription" : "Unary Transformation Swap",
          "mutantCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n  val yearTuple: RDD[(Int, Int)] = movies.map { (m: Movie) => (m.year, 1) }\n  val moviesPerYear: RDD[(Int, Int)] = yearTuple.map { (t: (Int, Int)) => (t._2, t._1) }\n  val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.reduceByKey { (a: Int, b: Int) => a + b }\n  val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n  moviesPerYearInverseSorted\n}",
          "originalCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n    val yearTuple: RDD[(Int, Int)] = movies.map((m: Movie) => (m.year, 1))\n    val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey((a: Int, b: Int) => a + b)\n    val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map((t: (Int, Int)) => (t._2, t._1))\n    val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n    moviesPerYearInverseSorted\n  }",
          "status" : "Killed"
        },
        {
          "id" : 17,
          "originalProgramId" : 2,
          "mutationOperator" : "UTS",
          "mutationOperatorDescription" : "Unary Transformation Swap",
          "mutantCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n  val yearTuple: RDD[(Int, Int)] = movies.map { (m: Movie) => (m.year, 1) }\n  val moviesPerYear: RDD[(Int, Int)] = yearTuple.sortByKey(false)\n  val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map { (t: (Int, Int)) => (t._2, t._1) }\n  val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.reduceByKey { (a: Int, b: Int) => a + b }\n  moviesPerYearInverseSorted\n}",
          "originalCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n    val yearTuple: RDD[(Int, Int)] = movies.map((m: Movie) => (m.year, 1))\n    val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey((a: Int, b: Int) => a + b)\n    val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map((t: (Int, Int)) => (t._2, t._1))\n    val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n    moviesPerYearInverseSorted\n  }",
          "status" : "Killed"
        },
        {
          "id" : 18,
          "originalProgramId" : 2,
          "mutationOperator" : "UTS",
          "mutationOperatorDescription" : "Unary Transformation Swap",
          "mutantCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n  val yearTuple: RDD[(Int, Int)] = movies.map { (m: Movie) => (m.year, 1) }\n  val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey { (a: Int, b: Int) => a + b }\n  val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.sortByKey(false)\n  val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.map { (t: (Int, Int)) => (t._2, t._1) }\n  moviesPerYearInverseSorted\n}",
          "originalCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n    val yearTuple: RDD[(Int, Int)] = movies.map((m: Movie) => (m.year, 1))\n    val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey((a: Int, b: Int) => a + b)\n    val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map((t: (Int, Int)) => (t._2, t._1))\n    val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n    moviesPerYearInverseSorted\n  }",
          "status" : "Lived"
        },
        {
          "id" : 19,
          "originalProgramId" : 2,
          "mutationOperator" : "UTR",
          "mutationOperatorDescription" : "Unary Transformation Replacement",
          "mutantCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n  val yearTuple: RDD[(Int, Int)] = movies.map { (m: Movie) => (m.year, 1) }\n  val moviesPerYear: RDD[(Int, Int)] = yearTuple.map { (t: (Int, Int)) => (t._2, t._1) }\n  val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map { (t: (Int, Int)) => (t._2, t._1) }\n  val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n  moviesPerYearInverseSorted\n}",
          "originalCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n    val yearTuple: RDD[(Int, Int)] = movies.map((m: Movie) => (m.year, 1))\n    val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey((a: Int, b: Int) => a + b)\n    val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map((t: (Int, Int)) => (t._2, t._1))\n    val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n    moviesPerYearInverseSorted\n  }",
          "status" : "Killed"
        },
        {
          "id" : 20,
          "originalProgramId" : 2,
          "mutationOperator" : "UTR",
          "mutationOperatorDescription" : "Unary Transformation Replacement",
          "mutantCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n  val yearTuple: RDD[(Int, Int)] = movies.map { (m: Movie) => (m.year, 1) }\n  val moviesPerYear: RDD[(Int, Int)] = yearTuple.sortByKey(false)\n  val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map { (t: (Int, Int)) => (t._2, t._1) }\n  val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n  moviesPerYearInverseSorted\n}",
          "originalCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n    val yearTuple: RDD[(Int, Int)] = movies.map((m: Movie) => (m.year, 1))\n    val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey((a: Int, b: Int) => a + b)\n    val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map((t: (Int, Int)) => (t._2, t._1))\n    val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n    moviesPerYearInverseSorted\n  }",
          "status" : "Killed"
        },
        {
          "id" : 21,
          "originalProgramId" : 2,
          "mutationOperator" : "UTR",
          "mutationOperatorDescription" : "Unary Transformation Replacement",
          "mutantCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n  val yearTuple: RDD[(Int, Int)] = movies.map { (m: Movie) => (m.year, 1) }\n  val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey { (a: Int, b: Int) => a + b }\n  val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.reduceByKey { (a: Int, b: Int) => a + b }\n  val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n  moviesPerYearInverseSorted\n}",
          "originalCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n    val yearTuple: RDD[(Int, Int)] = movies.map((m: Movie) => (m.year, 1))\n    val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey((a: Int, b: Int) => a + b)\n    val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map((t: (Int, Int)) => (t._2, t._1))\n    val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n    moviesPerYearInverseSorted\n  }",
          "status" : "Killed"
        },
        {
          "id" : 22,
          "originalProgramId" : 2,
          "mutationOperator" : "UTR",
          "mutationOperatorDescription" : "Unary Transformation Replacement",
          "mutantCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n  val yearTuple: RDD[(Int, Int)] = movies.map { (m: Movie) => (m.year, 1) }\n  val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey { (a: Int, b: Int) => a + b }\n  val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.sortByKey(false)\n  val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n  moviesPerYearInverseSorted\n}",
          "originalCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n    val yearTuple: RDD[(Int, Int)] = movies.map((m: Movie) => (m.year, 1))\n    val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey((a: Int, b: Int) => a + b)\n    val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map((t: (Int, Int)) => (t._2, t._1))\n    val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n    moviesPerYearInverseSorted\n  }",
          "status" : "Killed"
        },
        {
          "id" : 23,
          "originalProgramId" : 2,
          "mutationOperator" : "UTR",
          "mutationOperatorDescription" : "Unary Transformation Replacement",
          "mutantCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n  val yearTuple: RDD[(Int, Int)] = movies.map { (m: Movie) => (m.year, 1) }\n  val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey { (a: Int, b: Int) => a + b }\n  val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map { (t: (Int, Int)) => (t._2, t._1) }\n  val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.reduceByKey { (a: Int, b: Int) => a + b }\n  moviesPerYearInverseSorted\n}",
          "originalCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n    val yearTuple: RDD[(Int, Int)] = movies.map((m: Movie) => (m.year, 1))\n    val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey((a: Int, b: Int) => a + b)\n    val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map((t: (Int, Int)) => (t._2, t._1))\n    val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n    moviesPerYearInverseSorted\n  }",
          "status" : "Lived"
        },
        {
          "id" : 24,
          "originalProgramId" : 2,
          "mutationOperator" : "UTR",
          "mutationOperatorDescription" : "Unary Transformation Replacement",
          "mutantCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n  val yearTuple: RDD[(Int, Int)] = movies.map { (m: Movie) => (m.year, 1) }\n  val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey { (a: Int, b: Int) => a + b }\n  val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map { (t: (Int, Int)) => (t._2, t._1) }\n  val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.map { (t: (Int, Int)) => (t._2, t._1) }\n  moviesPerYearInverseSorted\n}",
          "originalCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n    val yearTuple: RDD[(Int, Int)] = movies.map((m: Movie) => (m.year, 1))\n    val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey((a: Int, b: Int) => a + b)\n    val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map((t: (Int, Int)) => (t._2, t._1))\n    val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n    moviesPerYearInverseSorted\n  }",
          "status" : "Killed"
        },
        {
          "id" : 25,
          "originalProgramId" : 2,
          "mutationOperator" : "UTD",
          "mutationOperatorDescription" : "Unary Transformation Deletion",
          "mutantCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n  val yearTuple: RDD[(Int, Int)] = movies.map { (m: Movie) => (m.year, 1) }\n  val moviesPerYear: RDD[(Int, Int)] = yearTuple\n  val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map { (t: (Int, Int)) => (t._2, t._1) }\n  val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n  moviesPerYearInverseSorted\n}",
          "originalCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n    val yearTuple: RDD[(Int, Int)] = movies.map((m: Movie) => (m.year, 1))\n    val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey((a: Int, b: Int) => a + b)\n    val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map((t: (Int, Int)) => (t._2, t._1))\n    val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n    moviesPerYearInverseSorted\n  }",
          "status" : "Killed"
        },
        {
          "id" : 26,
          "originalProgramId" : 2,
          "mutationOperator" : "UTD",
          "mutationOperatorDescription" : "Unary Transformation Deletion",
          "mutantCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n  val yearTuple: RDD[(Int, Int)] = movies.map { (m: Movie) => (m.year, 1) }\n  val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey { (a: Int, b: Int) => a + b }\n  val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear\n  val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n  moviesPerYearInverseSorted\n}",
          "originalCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n    val yearTuple: RDD[(Int, Int)] = movies.map((m: Movie) => (m.year, 1))\n    val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey((a: Int, b: Int) => a + b)\n    val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map((t: (Int, Int)) => (t._2, t._1))\n    val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n    moviesPerYearInverseSorted\n  }",
          "status" : "Killed"
        },
        {
          "id" : 27,
          "originalProgramId" : 2,
          "mutationOperator" : "UTD",
          "mutationOperatorDescription" : "Unary Transformation Deletion",
          "mutantCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n  val yearTuple: RDD[(Int, Int)] = movies.map { (m: Movie) => (m.year, 1) }\n  val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey { (a: Int, b: Int) => a + b }\n  val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map { (t: (Int, Int)) => (t._2, t._1) }\n  val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse\n  moviesPerYearInverseSorted\n}",
          "originalCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n    val yearTuple: RDD[(Int, Int)] = movies.map((m: Movie) => (m.year, 1))\n    val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey((a: Int, b: Int) => a + b)\n    val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map((t: (Int, Int)) => (t._2, t._1))\n    val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n    moviesPerYearInverseSorted\n  }",
          "status" : "Lived"
        },
        {
          "id" : 28,
          "originalProgramId" : 2,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n  val yearTuple: RDD[(Int, Int)] = movies.map { (inputParameter: Movie) => {\n    val originalFunction = ((m: Movie) => (m.year, 1))(_)\n    val originalValue = originalFunction(inputParameter)\n    (0, originalValue._2)\n  } }\n  val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey { (a: Int, b: Int) => a + b }\n  val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map { (t: (Int, Int)) => (t._2, t._1) }\n  val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n  moviesPerYearInverseSorted\n}",
          "originalCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n    val yearTuple: RDD[(Int, Int)] = movies.map((m: Movie) => (m.year, 1))\n    val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey((a: Int, b: Int) => a + b)\n    val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map((t: (Int, Int)) => (t._2, t._1))\n    val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n    moviesPerYearInverseSorted\n  }",
          "status" : "Killed"
        },
        {
          "id" : 29,
          "originalProgramId" : 2,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n  val yearTuple: RDD[(Int, Int)] = movies.map { (inputParameter: Movie) => {\n    val originalFunction = ((m: Movie) => (m.year, 1))(_)\n    val originalValue = originalFunction(inputParameter)\n    (1, originalValue._2)\n  } }\n  val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey { (a: Int, b: Int) => a + b }\n  val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map { (t: (Int, Int)) => (t._2, t._1) }\n  val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n  moviesPerYearInverseSorted\n}",
          "originalCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n    val yearTuple: RDD[(Int, Int)] = movies.map((m: Movie) => (m.year, 1))\n    val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey((a: Int, b: Int) => a + b)\n    val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map((t: (Int, Int)) => (t._2, t._1))\n    val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n    moviesPerYearInverseSorted\n  }",
          "status" : "Killed"
        },
        {
          "id" : 30,
          "originalProgramId" : 2,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n  val yearTuple: RDD[(Int, Int)] = movies.map { (inputParameter: Movie) => {\n    val originalFunction = ((m: Movie) => (m.year, 1))(_)\n    val originalValue = originalFunction(inputParameter)\n    (Int.MaxValue, originalValue._2)\n  } }\n  val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey { (a: Int, b: Int) => a + b }\n  val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map { (t: (Int, Int)) => (t._2, t._1) }\n  val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n  moviesPerYearInverseSorted\n}",
          "originalCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n    val yearTuple: RDD[(Int, Int)] = movies.map((m: Movie) => (m.year, 1))\n    val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey((a: Int, b: Int) => a + b)\n    val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map((t: (Int, Int)) => (t._2, t._1))\n    val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n    moviesPerYearInverseSorted\n  }",
          "status" : "Killed"
        },
        {
          "id" : 31,
          "originalProgramId" : 2,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n  val yearTuple: RDD[(Int, Int)] = movies.map { (inputParameter: Movie) => {\n    val originalFunction = ((m: Movie) => (m.year, 1))(_)\n    val originalValue = originalFunction(inputParameter)\n    (Int.MinValue, originalValue._2)\n  } }\n  val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey { (a: Int, b: Int) => a + b }\n  val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map { (t: (Int, Int)) => (t._2, t._1) }\n  val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n  moviesPerYearInverseSorted\n}",
          "originalCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n    val yearTuple: RDD[(Int, Int)] = movies.map((m: Movie) => (m.year, 1))\n    val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey((a: Int, b: Int) => a + b)\n    val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map((t: (Int, Int)) => (t._2, t._1))\n    val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n    moviesPerYearInverseSorted\n  }",
          "status" : "Killed"
        },
        {
          "id" : 32,
          "originalProgramId" : 2,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n  val yearTuple: RDD[(Int, Int)] = movies.map { (inputParameter: Movie) => {\n    val originalFunction = ((m: Movie) => (m.year, 1))(_)\n    val originalValue = originalFunction(inputParameter)\n    (-originalValue._1, originalValue._2)\n  } }\n  val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey { (a: Int, b: Int) => a + b }\n  val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map { (t: (Int, Int)) => (t._2, t._1) }\n  val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n  moviesPerYearInverseSorted\n}",
          "originalCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n    val yearTuple: RDD[(Int, Int)] = movies.map((m: Movie) => (m.year, 1))\n    val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey((a: Int, b: Int) => a + b)\n    val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map((t: (Int, Int)) => (t._2, t._1))\n    val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n    moviesPerYearInverseSorted\n  }",
          "status" : "Killed"
        },
        {
          "id" : 33,
          "originalProgramId" : 2,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n  val yearTuple: RDD[(Int, Int)] = movies.map { (inputParameter: Movie) => {\n    val originalFunction = ((m: Movie) => (m.year, 1))(_)\n    val originalValue = originalFunction(inputParameter)\n    (originalValue._1, 0)\n  } }\n  val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey { (a: Int, b: Int) => a + b }\n  val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map { (t: (Int, Int)) => (t._2, t._1) }\n  val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n  moviesPerYearInverseSorted\n}",
          "originalCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n    val yearTuple: RDD[(Int, Int)] = movies.map((m: Movie) => (m.year, 1))\n    val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey((a: Int, b: Int) => a + b)\n    val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map((t: (Int, Int)) => (t._2, t._1))\n    val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n    moviesPerYearInverseSorted\n  }",
          "status" : "Killed"
        },
        {
          "id" : 34,
          "originalProgramId" : 2,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n  val yearTuple: RDD[(Int, Int)] = movies.map { (inputParameter: Movie) => {\n    val originalFunction = ((m: Movie) => (m.year, 1))(_)\n    val originalValue = originalFunction(inputParameter)\n    (originalValue._1, 1)\n  } }\n  val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey { (a: Int, b: Int) => a + b }\n  val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map { (t: (Int, Int)) => (t._2, t._1) }\n  val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n  moviesPerYearInverseSorted\n}",
          "originalCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n    val yearTuple: RDD[(Int, Int)] = movies.map((m: Movie) => (m.year, 1))\n    val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey((a: Int, b: Int) => a + b)\n    val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map((t: (Int, Int)) => (t._2, t._1))\n    val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n    moviesPerYearInverseSorted\n  }",
          "status" : "Equivalent"
        },
        {
          "id" : 35,
          "originalProgramId" : 2,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n  val yearTuple: RDD[(Int, Int)] = movies.map { (inputParameter: Movie) => {\n    val originalFunction = ((m: Movie) => (m.year, 1))(_)\n    val originalValue = originalFunction(inputParameter)\n    (originalValue._1, Int.MaxValue)\n  } }\n  val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey { (a: Int, b: Int) => a + b }\n  val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map { (t: (Int, Int)) => (t._2, t._1) }\n  val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n  moviesPerYearInverseSorted\n}",
          "originalCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n    val yearTuple: RDD[(Int, Int)] = movies.map((m: Movie) => (m.year, 1))\n    val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey((a: Int, b: Int) => a + b)\n    val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map((t: (Int, Int)) => (t._2, t._1))\n    val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n    moviesPerYearInverseSorted\n  }",
          "status" : "Killed"
        },
        {
          "id" : 36,
          "originalProgramId" : 2,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n  val yearTuple: RDD[(Int, Int)] = movies.map { (inputParameter: Movie) => {\n    val originalFunction = ((m: Movie) => (m.year, 1))(_)\n    val originalValue = originalFunction(inputParameter)\n    (originalValue._1, Int.MinValue)\n  } }\n  val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey { (a: Int, b: Int) => a + b }\n  val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map { (t: (Int, Int)) => (t._2, t._1) }\n  val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n  moviesPerYearInverseSorted\n}",
          "originalCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n    val yearTuple: RDD[(Int, Int)] = movies.map((m: Movie) => (m.year, 1))\n    val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey((a: Int, b: Int) => a + b)\n    val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map((t: (Int, Int)) => (t._2, t._1))\n    val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n    moviesPerYearInverseSorted\n  }",
          "status" : "Killed"
        },
        {
          "id" : 37,
          "originalProgramId" : 2,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n  val yearTuple: RDD[(Int, Int)] = movies.map { (inputParameter: Movie) => {\n    val originalFunction = ((m: Movie) => (m.year, 1))(_)\n    val originalValue = originalFunction(inputParameter)\n    (originalValue._1, -originalValue._2)\n  } }\n  val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey { (a: Int, b: Int) => a + b }\n  val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map { (t: (Int, Int)) => (t._2, t._1) }\n  val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n  moviesPerYearInverseSorted\n}",
          "originalCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n    val yearTuple: RDD[(Int, Int)] = movies.map((m: Movie) => (m.year, 1))\n    val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey((a: Int, b: Int) => a + b)\n    val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map((t: (Int, Int)) => (t._2, t._1))\n    val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n    moviesPerYearInverseSorted\n  }",
          "status" : "Killed"
        },
        {
          "id" : 38,
          "originalProgramId" : 2,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n  val yearTuple: RDD[(Int, Int)] = movies.map { (m: Movie) => (m.year, 1) }\n  val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey { (a: Int, b: Int) => a + b }\n  val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map { (inputParameter: (Int, Int)) => {\n    val originalFunction = ((t: (Int, Int)) => (t._2, t._1))(_)\n    val originalValue = originalFunction(inputParameter)\n    (0, originalValue._2)\n  } }\n  val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n  moviesPerYearInverseSorted\n}",
          "originalCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n    val yearTuple: RDD[(Int, Int)] = movies.map((m: Movie) => (m.year, 1))\n    val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey((a: Int, b: Int) => a + b)\n    val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map((t: (Int, Int)) => (t._2, t._1))\n    val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n    moviesPerYearInverseSorted\n  }",
          "status" : "Killed"
        },
        {
          "id" : 39,
          "originalProgramId" : 2,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n  val yearTuple: RDD[(Int, Int)] = movies.map { (m: Movie) => (m.year, 1) }\n  val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey { (a: Int, b: Int) => a + b }\n  val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map { (inputParameter: (Int, Int)) => {\n    val originalFunction = ((t: (Int, Int)) => (t._2, t._1))(_)\n    val originalValue = originalFunction(inputParameter)\n    (1, originalValue._2)\n  } }\n  val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n  moviesPerYearInverseSorted\n}",
          "originalCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n    val yearTuple: RDD[(Int, Int)] = movies.map((m: Movie) => (m.year, 1))\n    val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey((a: Int, b: Int) => a + b)\n    val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map((t: (Int, Int)) => (t._2, t._1))\n    val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n    moviesPerYearInverseSorted\n  }",
          "status" : "Killed"
        },
        {
          "id" : 40,
          "originalProgramId" : 2,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n  val yearTuple: RDD[(Int, Int)] = movies.map { (m: Movie) => (m.year, 1) }\n  val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey { (a: Int, b: Int) => a + b }\n  val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map { (inputParameter: (Int, Int)) => {\n    val originalFunction = ((t: (Int, Int)) => (t._2, t._1))(_)\n    val originalValue = originalFunction(inputParameter)\n    (Int.MaxValue, originalValue._2)\n  } }\n  val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n  moviesPerYearInverseSorted\n}",
          "originalCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n    val yearTuple: RDD[(Int, Int)] = movies.map((m: Movie) => (m.year, 1))\n    val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey((a: Int, b: Int) => a + b)\n    val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map((t: (Int, Int)) => (t._2, t._1))\n    val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n    moviesPerYearInverseSorted\n  }",
          "status" : "Killed"
        },
        {
          "id" : 41,
          "originalProgramId" : 2,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n  val yearTuple: RDD[(Int, Int)] = movies.map { (m: Movie) => (m.year, 1) }\n  val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey { (a: Int, b: Int) => a + b }\n  val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map { (inputParameter: (Int, Int)) => {\n    val originalFunction = ((t: (Int, Int)) => (t._2, t._1))(_)\n    val originalValue = originalFunction(inputParameter)\n    (Int.MinValue, originalValue._2)\n  } }\n  val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n  moviesPerYearInverseSorted\n}",
          "originalCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n    val yearTuple: RDD[(Int, Int)] = movies.map((m: Movie) => (m.year, 1))\n    val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey((a: Int, b: Int) => a + b)\n    val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map((t: (Int, Int)) => (t._2, t._1))\n    val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n    moviesPerYearInverseSorted\n  }",
          "status" : "Killed"
        },
        {
          "id" : 42,
          "originalProgramId" : 2,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n  val yearTuple: RDD[(Int, Int)] = movies.map { (m: Movie) => (m.year, 1) }\n  val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey { (a: Int, b: Int) => a + b }\n  val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map { (inputParameter: (Int, Int)) => {\n    val originalFunction = ((t: (Int, Int)) => (t._2, t._1))(_)\n    val originalValue = originalFunction(inputParameter)\n    (-originalValue._1, originalValue._2)\n  } }\n  val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n  moviesPerYearInverseSorted\n}",
          "originalCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n    val yearTuple: RDD[(Int, Int)] = movies.map((m: Movie) => (m.year, 1))\n    val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey((a: Int, b: Int) => a + b)\n    val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map((t: (Int, Int)) => (t._2, t._1))\n    val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n    moviesPerYearInverseSorted\n  }",
          "status" : "Killed"
        },
        {
          "id" : 43,
          "originalProgramId" : 2,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n  val yearTuple: RDD[(Int, Int)] = movies.map { (m: Movie) => (m.year, 1) }\n  val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey { (a: Int, b: Int) => a + b }\n  val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map { (inputParameter: (Int, Int)) => {\n    val originalFunction = ((t: (Int, Int)) => (t._2, t._1))(_)\n    val originalValue = originalFunction(inputParameter)\n    (originalValue._1, 0)\n  } }\n  val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n  moviesPerYearInverseSorted\n}",
          "originalCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n    val yearTuple: RDD[(Int, Int)] = movies.map((m: Movie) => (m.year, 1))\n    val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey((a: Int, b: Int) => a + b)\n    val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map((t: (Int, Int)) => (t._2, t._1))\n    val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n    moviesPerYearInverseSorted\n  }",
          "status" : "Killed"
        },
        {
          "id" : 44,
          "originalProgramId" : 2,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n  val yearTuple: RDD[(Int, Int)] = movies.map { (m: Movie) => (m.year, 1) }\n  val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey { (a: Int, b: Int) => a + b }\n  val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map { (inputParameter: (Int, Int)) => {\n    val originalFunction = ((t: (Int, Int)) => (t._2, t._1))(_)\n    val originalValue = originalFunction(inputParameter)\n    (originalValue._1, 1)\n  } }\n  val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n  moviesPerYearInverseSorted\n}",
          "originalCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n    val yearTuple: RDD[(Int, Int)] = movies.map((m: Movie) => (m.year, 1))\n    val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey((a: Int, b: Int) => a + b)\n    val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map((t: (Int, Int)) => (t._2, t._1))\n    val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n    moviesPerYearInverseSorted\n  }",
          "status" : "Killed"
        },
        {
          "id" : 45,
          "originalProgramId" : 2,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n  val yearTuple: RDD[(Int, Int)] = movies.map { (m: Movie) => (m.year, 1) }\n  val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey { (a: Int, b: Int) => a + b }\n  val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map { (inputParameter: (Int, Int)) => {\n    val originalFunction = ((t: (Int, Int)) => (t._2, t._1))(_)\n    val originalValue = originalFunction(inputParameter)\n    (originalValue._1, Int.MaxValue)\n  } }\n  val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n  moviesPerYearInverseSorted\n}",
          "originalCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n    val yearTuple: RDD[(Int, Int)] = movies.map((m: Movie) => (m.year, 1))\n    val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey((a: Int, b: Int) => a + b)\n    val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map((t: (Int, Int)) => (t._2, t._1))\n    val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n    moviesPerYearInverseSorted\n  }",
          "status" : "Killed"
        },
        {
          "id" : 46,
          "originalProgramId" : 2,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n  val yearTuple: RDD[(Int, Int)] = movies.map { (m: Movie) => (m.year, 1) }\n  val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey { (a: Int, b: Int) => a + b }\n  val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map { (inputParameter: (Int, Int)) => {\n    val originalFunction = ((t: (Int, Int)) => (t._2, t._1))(_)\n    val originalValue = originalFunction(inputParameter)\n    (originalValue._1, Int.MinValue)\n  } }\n  val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n  moviesPerYearInverseSorted\n}",
          "originalCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n    val yearTuple: RDD[(Int, Int)] = movies.map((m: Movie) => (m.year, 1))\n    val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey((a: Int, b: Int) => a + b)\n    val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map((t: (Int, Int)) => (t._2, t._1))\n    val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n    moviesPerYearInverseSorted\n  }",
          "status" : "Killed"
        },
        {
          "id" : 47,
          "originalProgramId" : 2,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n  val yearTuple: RDD[(Int, Int)] = movies.map { (m: Movie) => (m.year, 1) }\n  val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey { (a: Int, b: Int) => a + b }\n  val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map { (inputParameter: (Int, Int)) => {\n    val originalFunction = ((t: (Int, Int)) => (t._2, t._1))(_)\n    val originalValue = originalFunction(inputParameter)\n    (originalValue._1, -originalValue._2)\n  } }\n  val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n  moviesPerYearInverseSorted\n}",
          "originalCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n    val yearTuple: RDD[(Int, Int)] = movies.map((m: Movie) => (m.year, 1))\n    val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey((a: Int, b: Int) => a + b)\n    val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map((t: (Int, Int)) => (t._2, t._1))\n    val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n    moviesPerYearInverseSorted\n  }",
          "status" : "Killed"
        },
        {
          "id" : 48,
          "originalProgramId" : 2,
          "mutationOperator" : "DTI",
          "mutationOperatorDescription" : "Distinct Transformation Insertion",
          "mutantCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n  val yearTuple: RDD[(Int, Int)] = movies.map { (m: Movie) => (m.year, 1) }.distinct()\n  val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey { (a: Int, b: Int) => a + b }\n  val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map { (t: (Int, Int)) => (t._2, t._1) }\n  val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n  moviesPerYearInverseSorted\n}",
          "originalCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n    val yearTuple: RDD[(Int, Int)] = movies.map((m: Movie) => (m.year, 1))\n    val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey((a: Int, b: Int) => a + b)\n    val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map((t: (Int, Int)) => (t._2, t._1))\n    val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n    moviesPerYearInverseSorted\n  }",
          "status" : "Killed"
        },
        {
          "id" : 49,
          "originalProgramId" : 2,
          "mutationOperator" : "DTI",
          "mutationOperatorDescription" : "Distinct Transformation Insertion",
          "mutantCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n  val yearTuple: RDD[(Int, Int)] = movies.map { (m: Movie) => (m.year, 1) }\n  val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey { (a: Int, b: Int) => a + b }.distinct()\n  val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map { (t: (Int, Int)) => (t._2, t._1) }\n  val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n  moviesPerYearInverseSorted\n}",
          "originalCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n    val yearTuple: RDD[(Int, Int)] = movies.map((m: Movie) => (m.year, 1))\n    val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey((a: Int, b: Int) => a + b)\n    val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map((t: (Int, Int)) => (t._2, t._1))\n    val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n    moviesPerYearInverseSorted\n  }",
          "status" : "Equivalent"
        },
        {
          "id" : 50,
          "originalProgramId" : 2,
          "mutationOperator" : "DTI",
          "mutationOperatorDescription" : "Distinct Transformation Insertion",
          "mutantCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n  val yearTuple: RDD[(Int, Int)] = movies.map { (m: Movie) => (m.year, 1) }\n  val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey { (a: Int, b: Int) => a + b }\n  val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map { (t: (Int, Int)) => (t._2, t._1) }.distinct()\n  val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n  moviesPerYearInverseSorted\n}",
          "originalCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n    val yearTuple: RDD[(Int, Int)] = movies.map((m: Movie) => (m.year, 1))\n    val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey((a: Int, b: Int) => a + b)\n    val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map((t: (Int, Int)) => (t._2, t._1))\n    val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n    moviesPerYearInverseSorted\n  }",
          "status" : "Equivalent"
        },
        {
          "id" : 51,
          "originalProgramId" : 2,
          "mutationOperator" : "DTI",
          "mutationOperatorDescription" : "Distinct Transformation Insertion",
          "mutantCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n  val yearTuple: RDD[(Int, Int)] = movies.map { (m: Movie) => (m.year, 1) }\n  val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey { (a: Int, b: Int) => a + b }\n  val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map { (t: (Int, Int)) => (t._2, t._1) }\n  val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false).distinct()\n  moviesPerYearInverseSorted\n}",
          "originalCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n    val yearTuple: RDD[(Int, Int)] = movies.map((m: Movie) => (m.year, 1))\n    val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey((a: Int, b: Int) => a + b)\n    val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map((t: (Int, Int)) => (t._2, t._1))\n    val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n    moviesPerYearInverseSorted\n  }",
          "status" : "Lived"
        },
        {
          "id" : 52,
          "originalProgramId" : 2,
          "mutationOperator" : "ATR",
          "mutationOperatorDescription" : "Aggregation Transformation Replacement",
          "mutantCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n  val yearTuple: RDD[(Int, Int)] = movies.map { (m: Movie) => (m.year, 1) }\n  val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey { (firstParameter: Int, secondParameter: Int) => firstParameter }\n  val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map { (t: (Int, Int)) => (t._2, t._1) }\n  val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n  moviesPerYearInverseSorted\n}",
          "originalCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n    val yearTuple: RDD[(Int, Int)] = movies.map((m: Movie) => (m.year, 1))\n    val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey((a: Int, b: Int) => a + b)\n    val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map((t: (Int, Int)) => (t._2, t._1))\n    val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n    moviesPerYearInverseSorted\n  }",
          "status" : "Killed"
        },
        {
          "id" : 53,
          "originalProgramId" : 2,
          "mutationOperator" : "ATR",
          "mutationOperatorDescription" : "Aggregation Transformation Replacement",
          "mutantCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n  val yearTuple: RDD[(Int, Int)] = movies.map { (m: Movie) => (m.year, 1) }\n  val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey { (firstParameter: Int, secondParameter: Int) => secondParameter }\n  val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map { (t: (Int, Int)) => (t._2, t._1) }\n  val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n  moviesPerYearInverseSorted\n}",
          "originalCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n    val yearTuple: RDD[(Int, Int)] = movies.map((m: Movie) => (m.year, 1))\n    val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey((a: Int, b: Int) => a + b)\n    val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map((t: (Int, Int)) => (t._2, t._1))\n    val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n    moviesPerYearInverseSorted\n  }",
          "status" : "Killed"
        },
        {
          "id" : 54,
          "originalProgramId" : 2,
          "mutationOperator" : "ATR",
          "mutationOperatorDescription" : "Aggregation Transformation Replacement",
          "mutantCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n  val yearTuple: RDD[(Int, Int)] = movies.map { (m: Movie) => (m.year, 1) }\n  val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey { (firstParameter: Int, secondParameter: Int) => {\n    val originalFunction = ((a: Int, b: Int) => a + b)(_, _)\n    originalFunction(firstParameter, firstParameter)\n  } }\n  val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map { (t: (Int, Int)) => (t._2, t._1) }\n  val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n  moviesPerYearInverseSorted\n}",
          "originalCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n    val yearTuple: RDD[(Int, Int)] = movies.map((m: Movie) => (m.year, 1))\n    val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey((a: Int, b: Int) => a + b)\n    val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map((t: (Int, Int)) => (t._2, t._1))\n    val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n    moviesPerYearInverseSorted\n  }",
          "status" : "Lived"
        },
        {
          "id" : 55,
          "originalProgramId" : 2,
          "mutationOperator" : "ATR",
          "mutationOperatorDescription" : "Aggregation Transformation Replacement",
          "mutantCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n  val yearTuple: RDD[(Int, Int)] = movies.map { (m: Movie) => (m.year, 1) }\n  val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey { (firstParameter: Int, secondParameter: Int) => {\n    val originalFunction = ((a: Int, b: Int) => a + b)(_, _)\n    originalFunction(secondParameter, secondParameter)\n  } }\n  val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map { (t: (Int, Int)) => (t._2, t._1) }\n  val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n  moviesPerYearInverseSorted\n}",
          "originalCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n    val yearTuple: RDD[(Int, Int)] = movies.map((m: Movie) => (m.year, 1))\n    val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey((a: Int, b: Int) => a + b)\n    val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map((t: (Int, Int)) => (t._2, t._1))\n    val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n    moviesPerYearInverseSorted\n  }",
          "status" : "Lived"
        },
        {
          "id" : 56,
          "originalProgramId" : 2,
          "mutationOperator" : "ATR",
          "mutationOperatorDescription" : "Aggregation Transformation Replacement",
          "mutantCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n  val yearTuple: RDD[(Int, Int)] = movies.map { (m: Movie) => (m.year, 1) }\n  val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey { (firstParameter: Int, secondParameter: Int) => {\n    val originalFunction = ((a: Int, b: Int) => a + b)(_, _)\n    originalFunction(secondParameter, firstParameter)\n  } }\n  val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map { (t: (Int, Int)) => (t._2, t._1) }\n  val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n  moviesPerYearInverseSorted\n}",
          "originalCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n    val yearTuple: RDD[(Int, Int)] = movies.map((m: Movie) => (m.year, 1))\n    val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey((a: Int, b: Int) => a + b)\n    val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map((t: (Int, Int)) => (t._2, t._1))\n    val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n    moviesPerYearInverseSorted\n  }",
          "status" : "Equivalent"
        },
        {
          "id" : 57,
          "originalProgramId" : 2,
          "mutationOperator" : "OTD",
          "mutationOperatorDescription" : "Order Transformation Deletion",
          "mutantCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n  val yearTuple: RDD[(Int, Int)] = movies.map { (m: Movie) => (m.year, 1) }\n  val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey { (a: Int, b: Int) => a + b }\n  val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map { (t: (Int, Int)) => (t._2, t._1) }\n  val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse\n  moviesPerYearInverseSorted\n}",
          "originalCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n    val yearTuple: RDD[(Int, Int)] = movies.map((m: Movie) => (m.year, 1))\n    val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey((a: Int, b: Int) => a + b)\n    val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map((t: (Int, Int)) => (t._2, t._1))\n    val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n    moviesPerYearInverseSorted\n  }",
          "status" : "Lived"
        },
        {
          "id" : 58,
          "originalProgramId" : 2,
          "mutationOperator" : "OTI",
          "mutationOperatorDescription" : "Order Transformation Inversion",
          "mutantCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n  val yearTuple: RDD[(Int, Int)] = movies.map { (m: Movie) => (m.year, 1) }\n  val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey { (a: Int, b: Int) => a + b }\n  val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map { (t: (Int, Int)) => (t._2, t._1) }\n  val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(true)\n  moviesPerYearInverseSorted\n}",
          "originalCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n    val yearTuple: RDD[(Int, Int)] = movies.map((m: Movie) => (m.year, 1))\n    val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey((a: Int, b: Int) => a + b)\n    val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map((t: (Int, Int)) => (t._2, t._1))\n    val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n    moviesPerYearInverseSorted\n  }",
          "status" : "Lived"
        }
      ],
      "removedMutants" : [
      ],
      "mutationOperatorsMetrics" : {
        "totalMutantsPerOperator" : {
          "FTD" : 0,
          "JTR" : 0,
          "UTR" : 6,
          "MTR" : 20,
          "UTD" : 3,
          "OTD" : 1,
          "BTR" : 0,
          "STR" : 0,
          "BTS" : 0,
          "ATR" : 5,
          "OTI" : 1,
          "DTI" : 4,
          "DTD" : 0,
          "NFTP" : 0,
          "UTS" : 3
        },
        "totalKilledMutantsPerOperator" : {
          "FTD" : 0,
          "JTR" : 0,
          "UTR" : 5,
          "MTR" : 19,
          "UTD" : 2,
          "OTD" : 0,
          "BTR" : 0,
          "STR" : 0,
          "BTS" : 0,
          "ATR" : 2,
          "OTI" : 0,
          "DTI" : 1,
          "DTD" : 0,
          "NFTP" : 0,
          "UTS" : 2
        },
        "totalLivedMutantsPerOperator" : {
          "FTD" : 0,
          "JTR" : 0,
          "UTR" : 1,
          "MTR" : 0,
          "UTD" : 1,
          "OTD" : 1,
          "BTR" : 0,
          "STR" : 0,
          "BTS" : 0,
          "ATR" : 2,
          "OTI" : 1,
          "DTI" : 1,
          "DTD" : 0,
          "NFTP" : 0,
          "UTS" : 1
        },
        "totalEquivalentMutantsPerOperator" : {
          "FTD" : 0,
          "JTR" : 0,
          "UTR" : 0,
          "MTR" : 1,
          "UTD" : 0,
          "OTD" : 0,
          "BTR" : 0,
          "STR" : 0,
          "BTS" : 0,
          "ATR" : 1,
          "OTI" : 0,
          "DTI" : 2,
          "DTD" : 0,
          "NFTP" : 0,
          "UTS" : 0
        },
        "totalErrorMutantsPerOperator" : {
          "FTD" : 0,
          "JTR" : 0,
          "UTR" : 0,
          "MTR" : 0,
          "UTD" : 0,
          "OTD" : 0,
          "BTR" : 0,
          "STR" : 0,
          "BTS" : 0,
          "ATR" : 0,
          "OTI" : 0,
          "DTI" : 0,
          "DTD" : 0,
          "NFTP" : 0,
          "UTS" : 0
        },
        "totalRemovedMutantsPerOperator" : {
          "FTD" : 0,
          "JTR" : 0,
          "UTR" : 0,
          "MTR" : 0,
          "UTD" : 0,
          "OTD" : 0,
          "BTR" : 0,
          "STR" : 0,
          "BTS" : 0,
          "ATR" : 0,
          "OTI" : 0,
          "DTI" : 0,
          "DTD" : 0,
          "NFTP" : 0,
          "UTS" : 0
        },
        "descriptionPerOperator" : {
          "FTD" : "Filter Transformation Deletion",
          "JTR" : "Join Transformation Replacement",
          "UTR" : "Unary Transformation Replacement",
          "MTR" : "Mapping Transformation Replacement",
          "UTD" : "Unary Transformation Deletion",
          "OTD" : "Order Transformation Deletion",
          "BTR" : "Binary Transformation Replacement",
          "STR" : "Set Transformation Replacement",
          "BTS" : "Binary Transformation Swap",
          "ATR" : "Aggregation Transformation Replacement",
          "OTI" : "Order Transformation Inversion",
          "DTI" : "Distinct Transformation Insertion",
          "DTD" : "Distinct Transformation Deletion",
          "NFTP" : "Negation of Filter Transformation Predicate",
          "UTS" : "Unary Transformation Swap"
        }
      },
      "totalDatasets" : 5,
      "totalTransformations" : 4,
      "totalMutants" : 43,
      "totalKilledMutants" : 31,
      "totalLivedMutants" : 8,
      "totalEquivalentMutants" : 4,
      "totalErrorMutants" : 0,
      "totalRemovedMutants" : 0,
      "mutationScore" : 0.7948718
    },
    {
      "id" : 3,
      "programSourceId" : 1,
      "name" : "mostPopularGenresByYear",
      "code" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n    val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap((m: Movie) => m.genres.map(g => ((m.year, g), 1)))\n    val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey((x: Int, y: Int) => x + y)\n    val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map((g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey((m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2)\n    popularGenresByYear\n  }",
      "datasets" : [
        {
          "id" : 12,
          "name" : "movies",
          "datasetType" : "RDD[Movie]",
          "inputDataset" : true,
          "outputDataset" : false
        },
        {
          "id" : 13,
          "name" : "yearGenreTuple",
          "datasetType" : "RDD[((Int, String), Int)]",
          "inputDataset" : false,
          "outputDataset" : false
        },
        {
          "id" : 14,
          "name" : "yearGenreCount",
          "datasetType" : "RDD[((Int, String), Int)]",
          "inputDataset" : false,
          "outputDataset" : false
        },
        {
          "id" : 15,
          "name" : "yearGenreCountTuple",
          "datasetType" : "RDD[(Int, (String, Int))]",
          "inputDataset" : false,
          "outputDataset" : false
        },
        {
          "id" : 16,
          "name" : "popularGenresByYear",
          "datasetType" : "RDD[(Int, (String, Int))]",
          "inputDataset" : false,
          "outputDataset" : true
        }
      ],
      "transformations" : [
        {
          "id" : 8,
          "name" : "flatMap",
          "inputTypes" : [
            "RDD[Movie]"
          ],
          "outputTypes" : [
            "RDD[((Int, String), Int)]"
          ],
          "loadTransformation" : false
        },
        {
          "id" : 9,
          "name" : "reduceByKey",
          "inputTypes" : [
            "RDD[((Int, String), Int)]"
          ],
          "outputTypes" : [
            "RDD[((Int, String), Int)]"
          ],
          "loadTransformation" : false
        },
        {
          "id" : 10,
          "name" : "map",
          "inputTypes" : [
            "RDD[((Int, String), Int)]"
          ],
          "outputTypes" : [
            "RDD[(Int, (String, Int))]"
          ],
          "loadTransformation" : false
        },
        {
          "id" : 11,
          "name" : "reduceByKey",
          "inputTypes" : [
            "RDD[(Int, (String, Int))]"
          ],
          "outputTypes" : [
            "RDD[(Int, (String, Int))]"
          ],
          "loadTransformation" : false
        }
      ],
      "edges" : [
        {
          "id" : 15,
          "datasetId" : 12,
          "transformationId" : 8,
          "direction" : "DatasetToTransformation"
        },
        {
          "id" : 16,
          "datasetId" : 13,
          "transformationId" : 8,
          "direction" : "TransformationToDataset"
        },
        {
          "id" : 17,
          "datasetId" : 13,
          "transformationId" : 9,
          "direction" : "DatasetToTransformation"
        },
        {
          "id" : 18,
          "datasetId" : 14,
          "transformationId" : 9,
          "direction" : "TransformationToDataset"
        },
        {
          "id" : 19,
          "datasetId" : 14,
          "transformationId" : 10,
          "direction" : "DatasetToTransformation"
        },
        {
          "id" : 20,
          "datasetId" : 15,
          "transformationId" : 10,
          "direction" : "TransformationToDataset"
        },
        {
          "id" : 21,
          "datasetId" : 15,
          "transformationId" : 11,
          "direction" : "DatasetToTransformation"
        },
        {
          "id" : 22,
          "datasetId" : 16,
          "transformationId" : 11,
          "direction" : "TransformationToDataset"
        }
      ],
      "mutants" : [
        {
          "id" : 59,
          "originalProgramId" : 3,
          "mutationOperator" : "UTD",
          "mutationOperatorDescription" : "Unary Transformation Deletion",
          "mutantCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n  val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap { (m: Movie) => m.genres.map(g => ((m.year, g), 1)) }\n  val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple\n  val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map { (g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey { (m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2 }\n  popularGenresByYear\n}",
          "originalCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n    val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap((m: Movie) => m.genres.map(g => ((m.year, g), 1)))\n    val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey((x: Int, y: Int) => x + y)\n    val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map((g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey((m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2)\n    popularGenresByYear\n  }",
          "status" : "Killed"
        },
        {
          "id" : 60,
          "originalProgramId" : 3,
          "mutationOperator" : "UTD",
          "mutationOperatorDescription" : "Unary Transformation Deletion",
          "mutantCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n  val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap { (m: Movie) => m.genres.map(g => ((m.year, g), 1)) }\n  val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey { (x: Int, y: Int) => x + y }\n  val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map { (g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple\n  popularGenresByYear\n}",
          "originalCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n    val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap((m: Movie) => m.genres.map(g => ((m.year, g), 1)))\n    val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey((x: Int, y: Int) => x + y)\n    val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map((g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey((m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2)\n    popularGenresByYear\n  }",
          "status" : "Killed"
        },
        {
          "id" : 61,
          "originalProgramId" : 3,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n  val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap { (inputParameter: Movie) => {\n    val originalFunction = ((m: Movie) => m.genres.map(g => ((m.year, g), 1)))(_)\n    val originalValue = originalFunction(inputParameter)\n    originalValue.headOption\n  } }\n  val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey { (x: Int, y: Int) => x + y }\n  val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map { (g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey { (m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2 }\n  popularGenresByYear\n}",
          "originalCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n    val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap((m: Movie) => m.genres.map(g => ((m.year, g), 1)))\n    val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey((x: Int, y: Int) => x + y)\n    val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map((g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey((m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2)\n    popularGenresByYear\n  }",
          "status" : "Lived"
        },
        {
          "id" : 62,
          "originalProgramId" : 3,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n  val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap { (inputParameter: Movie) => {\n    val originalFunction = ((m: Movie) => m.genres.map(g => ((m.year, g), 1)))(_)\n    val originalValue = originalFunction(inputParameter)\n    originalValue.toList.tail\n  } }\n  val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey { (x: Int, y: Int) => x + y }\n  val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map { (g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey { (m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2 }\n  popularGenresByYear\n}",
          "originalCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n    val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap((m: Movie) => m.genres.map(g => ((m.year, g), 1)))\n    val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey((x: Int, y: Int) => x + y)\n    val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map((g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey((m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2)\n    popularGenresByYear\n  }",
          "status" : "Killed"
        },
        {
          "id" : 63,
          "originalProgramId" : 3,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n  val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap { (inputParameter: Movie) => {\n    val originalFunction = ((m: Movie) => m.genres.map(g => ((m.year, g), 1)))(_)\n    val originalValue = originalFunction(inputParameter)\n    originalValue.toList.reverse\n  } }\n  val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey { (x: Int, y: Int) => x + y }\n  val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map { (g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey { (m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2 }\n  popularGenresByYear\n}",
          "originalCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n    val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap((m: Movie) => m.genres.map(g => ((m.year, g), 1)))\n    val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey((x: Int, y: Int) => x + y)\n    val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map((g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey((m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2)\n    popularGenresByYear\n  }",
          "status" : "Equivalent"
        },
        {
          "id" : 64,
          "originalProgramId" : 3,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n  val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap { (inputParameter: Movie) => {\n    val originalFunction = ((m: Movie) => m.genres.map(g => ((m.year, g), 1)))(_)\n    val originalValue = originalFunction(inputParameter)\n    List[((Int, String), Int)]()\n  } }\n  val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey { (x: Int, y: Int) => x + y }\n  val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map { (g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey { (m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2 }\n  popularGenresByYear\n}",
          "originalCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n    val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap((m: Movie) => m.genres.map(g => ((m.year, g), 1)))\n    val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey((x: Int, y: Int) => x + y)\n    val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map((g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey((m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2)\n    popularGenresByYear\n  }",
          "status" : "Killed"
        },
        {
          "id" : 65,
          "originalProgramId" : 3,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n  val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap { (m: Movie) => m.genres.map(g => ((m.year, g), 1)) }\n  val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey { (x: Int, y: Int) => x + y }\n  val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map { (inputParameter: ((Int, String), Int)) => {\n    val originalFunction = ((g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)))(_)\n    val originalValue = originalFunction(inputParameter)\n    (0, originalValue._2)\n  } }\n  val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey { (m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2 }\n  popularGenresByYear\n}",
          "originalCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n    val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap((m: Movie) => m.genres.map(g => ((m.year, g), 1)))\n    val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey((x: Int, y: Int) => x + y)\n    val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map((g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey((m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2)\n    popularGenresByYear\n  }",
          "status" : "Killed"
        },
        {
          "id" : 66,
          "originalProgramId" : 3,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n  val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap { (m: Movie) => m.genres.map(g => ((m.year, g), 1)) }\n  val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey { (x: Int, y: Int) => x + y }\n  val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map { (inputParameter: ((Int, String), Int)) => {\n    val originalFunction = ((g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)))(_)\n    val originalValue = originalFunction(inputParameter)\n    (1, originalValue._2)\n  } }\n  val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey { (m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2 }\n  popularGenresByYear\n}",
          "originalCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n    val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap((m: Movie) => m.genres.map(g => ((m.year, g), 1)))\n    val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey((x: Int, y: Int) => x + y)\n    val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map((g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey((m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2)\n    popularGenresByYear\n  }",
          "status" : "Killed"
        },
        {
          "id" : 67,
          "originalProgramId" : 3,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n  val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap { (m: Movie) => m.genres.map(g => ((m.year, g), 1)) }\n  val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey { (x: Int, y: Int) => x + y }\n  val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map { (inputParameter: ((Int, String), Int)) => {\n    val originalFunction = ((g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)))(_)\n    val originalValue = originalFunction(inputParameter)\n    (Int.MaxValue, originalValue._2)\n  } }\n  val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey { (m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2 }\n  popularGenresByYear\n}",
          "originalCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n    val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap((m: Movie) => m.genres.map(g => ((m.year, g), 1)))\n    val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey((x: Int, y: Int) => x + y)\n    val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map((g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey((m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2)\n    popularGenresByYear\n  }",
          "status" : "Killed"
        },
        {
          "id" : 68,
          "originalProgramId" : 3,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n  val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap { (m: Movie) => m.genres.map(g => ((m.year, g), 1)) }\n  val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey { (x: Int, y: Int) => x + y }\n  val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map { (inputParameter: ((Int, String), Int)) => {\n    val originalFunction = ((g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)))(_)\n    val originalValue = originalFunction(inputParameter)\n    (Int.MinValue, originalValue._2)\n  } }\n  val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey { (m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2 }\n  popularGenresByYear\n}",
          "originalCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n    val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap((m: Movie) => m.genres.map(g => ((m.year, g), 1)))\n    val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey((x: Int, y: Int) => x + y)\n    val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map((g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey((m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2)\n    popularGenresByYear\n  }",
          "status" : "Killed"
        },
        {
          "id" : 69,
          "originalProgramId" : 3,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n  val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap { (m: Movie) => m.genres.map(g => ((m.year, g), 1)) }\n  val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey { (x: Int, y: Int) => x + y }\n  val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map { (inputParameter: ((Int, String), Int)) => {\n    val originalFunction = ((g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)))(_)\n    val originalValue = originalFunction(inputParameter)\n    (-originalValue._1, originalValue._2)\n  } }\n  val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey { (m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2 }\n  popularGenresByYear\n}",
          "originalCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n    val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap((m: Movie) => m.genres.map(g => ((m.year, g), 1)))\n    val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey((x: Int, y: Int) => x + y)\n    val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map((g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey((m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2)\n    popularGenresByYear\n  }",
          "status" : "Killed"
        },
        {
          "id" : 70,
          "originalProgramId" : 3,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n  val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap { (m: Movie) => m.genres.map(g => ((m.year, g), 1)) }\n  val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey { (x: Int, y: Int) => x + y }\n  val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map { (inputParameter: ((Int, String), Int)) => {\n    val originalFunction = ((g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)))(_)\n    val originalValue = originalFunction(inputParameter)\n    (originalValue._1, (\"\", originalValue._2._2))\n  } }\n  val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey { (m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2 }\n  popularGenresByYear\n}",
          "originalCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n    val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap((m: Movie) => m.genres.map(g => ((m.year, g), 1)))\n    val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey((x: Int, y: Int) => x + y)\n    val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map((g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey((m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2)\n    popularGenresByYear\n  }",
          "status" : "Killed"
        },
        {
          "id" : 71,
          "originalProgramId" : 3,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n  val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap { (m: Movie) => m.genres.map(g => ((m.year, g), 1)) }\n  val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey { (x: Int, y: Int) => x + y }\n  val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map { (inputParameter: ((Int, String), Int)) => {\n    val originalFunction = ((g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)))(_)\n    val originalValue = originalFunction(inputParameter)\n    (originalValue._1, (originalValue._2._1, 0))\n  } }\n  val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey { (m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2 }\n  popularGenresByYear\n}",
          "originalCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n    val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap((m: Movie) => m.genres.map(g => ((m.year, g), 1)))\n    val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey((x: Int, y: Int) => x + y)\n    val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map((g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey((m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2)\n    popularGenresByYear\n  }",
          "status" : "Killed"
        },
        {
          "id" : 72,
          "originalProgramId" : 3,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n  val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap { (m: Movie) => m.genres.map(g => ((m.year, g), 1)) }\n  val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey { (x: Int, y: Int) => x + y }\n  val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map { (inputParameter: ((Int, String), Int)) => {\n    val originalFunction = ((g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)))(_)\n    val originalValue = originalFunction(inputParameter)\n    (originalValue._1, (originalValue._2._1, 1))\n  } }\n  val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey { (m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2 }\n  popularGenresByYear\n}",
          "originalCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n    val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap((m: Movie) => m.genres.map(g => ((m.year, g), 1)))\n    val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey((x: Int, y: Int) => x + y)\n    val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map((g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey((m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2)\n    popularGenresByYear\n  }",
          "status" : "Killed"
        },
        {
          "id" : 73,
          "originalProgramId" : 3,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n  val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap { (m: Movie) => m.genres.map(g => ((m.year, g), 1)) }\n  val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey { (x: Int, y: Int) => x + y }\n  val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map { (inputParameter: ((Int, String), Int)) => {\n    val originalFunction = ((g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)))(_)\n    val originalValue = originalFunction(inputParameter)\n    (originalValue._1, (originalValue._2._1, Int.MaxValue))\n  } }\n  val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey { (m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2 }\n  popularGenresByYear\n}",
          "originalCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n    val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap((m: Movie) => m.genres.map(g => ((m.year, g), 1)))\n    val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey((x: Int, y: Int) => x + y)\n    val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map((g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey((m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2)\n    popularGenresByYear\n  }",
          "status" : "Killed"
        },
        {
          "id" : 74,
          "originalProgramId" : 3,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n  val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap { (m: Movie) => m.genres.map(g => ((m.year, g), 1)) }\n  val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey { (x: Int, y: Int) => x + y }\n  val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map { (inputParameter: ((Int, String), Int)) => {\n    val originalFunction = ((g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)))(_)\n    val originalValue = originalFunction(inputParameter)\n    (originalValue._1, (originalValue._2._1, Int.MinValue))\n  } }\n  val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey { (m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2 }\n  popularGenresByYear\n}",
          "originalCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n    val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap((m: Movie) => m.genres.map(g => ((m.year, g), 1)))\n    val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey((x: Int, y: Int) => x + y)\n    val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map((g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey((m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2)\n    popularGenresByYear\n  }",
          "status" : "Killed"
        },
        {
          "id" : 75,
          "originalProgramId" : 3,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n  val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap { (m: Movie) => m.genres.map(g => ((m.year, g), 1)) }\n  val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey { (x: Int, y: Int) => x + y }\n  val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map { (inputParameter: ((Int, String), Int)) => {\n    val originalFunction = ((g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)))(_)\n    val originalValue = originalFunction(inputParameter)\n    (originalValue._1, (originalValue._2._1, -originalValue._2._2))\n  } }\n  val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey { (m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2 }\n  popularGenresByYear\n}",
          "originalCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n    val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap((m: Movie) => m.genres.map(g => ((m.year, g), 1)))\n    val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey((x: Int, y: Int) => x + y)\n    val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map((g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey((m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2)\n    popularGenresByYear\n  }",
          "status" : "Killed"
        },
        {
          "id" : 76,
          "originalProgramId" : 3,
          "mutationOperator" : "DTI",
          "mutationOperatorDescription" : "Distinct Transformation Insertion",
          "mutantCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n  val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap { (m: Movie) => m.genres.map(g => ((m.year, g), 1)) }.distinct()\n  val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey { (x: Int, y: Int) => x + y }\n  val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map { (g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey { (m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2 }\n  popularGenresByYear\n}",
          "originalCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n    val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap((m: Movie) => m.genres.map(g => ((m.year, g), 1)))\n    val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey((x: Int, y: Int) => x + y)\n    val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map((g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey((m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2)\n    popularGenresByYear\n  }",
          "status" : "Killed"
        },
        {
          "id" : 77,
          "originalProgramId" : 3,
          "mutationOperator" : "DTI",
          "mutationOperatorDescription" : "Distinct Transformation Insertion",
          "mutantCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n  val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap { (m: Movie) => m.genres.map(g => ((m.year, g), 1)) }\n  val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey { (x: Int, y: Int) => x + y }.distinct()\n  val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map { (g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey { (m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2 }\n  popularGenresByYear\n}",
          "originalCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n    val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap((m: Movie) => m.genres.map(g => ((m.year, g), 1)))\n    val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey((x: Int, y: Int) => x + y)\n    val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map((g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey((m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2)\n    popularGenresByYear\n  }",
          "status" : "Lived"
        },
        {
          "id" : 78,
          "originalProgramId" : 3,
          "mutationOperator" : "DTI",
          "mutationOperatorDescription" : "Distinct Transformation Insertion",
          "mutantCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n  val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap { (m: Movie) => m.genres.map(g => ((m.year, g), 1)) }\n  val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey { (x: Int, y: Int) => x + y }\n  val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map { (g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)) }.distinct()\n  val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey { (m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2 }\n  popularGenresByYear\n}",
          "originalCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n    val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap((m: Movie) => m.genres.map(g => ((m.year, g), 1)))\n    val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey((x: Int, y: Int) => x + y)\n    val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map((g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey((m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2)\n    popularGenresByYear\n  }",
          "status" : "Lived"
        },
        {
          "id" : 79,
          "originalProgramId" : 3,
          "mutationOperator" : "DTI",
          "mutationOperatorDescription" : "Distinct Transformation Insertion",
          "mutantCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n  val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap { (m: Movie) => m.genres.map(g => ((m.year, g), 1)) }\n  val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey { (x: Int, y: Int) => x + y }\n  val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map { (g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey { (m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2 }.distinct()\n  popularGenresByYear\n}",
          "originalCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n    val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap((m: Movie) => m.genres.map(g => ((m.year, g), 1)))\n    val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey((x: Int, y: Int) => x + y)\n    val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map((g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey((m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2)\n    popularGenresByYear\n  }",
          "status" : "Equivalent"
        },
        {
          "id" : 80,
          "originalProgramId" : 3,
          "mutationOperator" : "ATR",
          "mutationOperatorDescription" : "Aggregation Transformation Replacement",
          "mutantCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n  val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap { (m: Movie) => m.genres.map(g => ((m.year, g), 1)) }\n  val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey { (firstParameter: Int, secondParameter: Int) => firstParameter }\n  val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map { (g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey { (m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2 }\n  popularGenresByYear\n}",
          "originalCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n    val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap((m: Movie) => m.genres.map(g => ((m.year, g), 1)))\n    val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey((x: Int, y: Int) => x + y)\n    val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map((g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey((m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2)\n    popularGenresByYear\n  }",
          "status" : "Killed"
        },
        {
          "id" : 81,
          "originalProgramId" : 3,
          "mutationOperator" : "ATR",
          "mutationOperatorDescription" : "Aggregation Transformation Replacement",
          "mutantCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n  val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap { (m: Movie) => m.genres.map(g => ((m.year, g), 1)) }\n  val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey { (firstParameter: Int, secondParameter: Int) => secondParameter }\n  val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map { (g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey { (m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2 }\n  popularGenresByYear\n}",
          "originalCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n    val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap((m: Movie) => m.genres.map(g => ((m.year, g), 1)))\n    val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey((x: Int, y: Int) => x + y)\n    val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map((g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey((m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2)\n    popularGenresByYear\n  }",
          "status" : "Killed"
        },
        {
          "id" : 82,
          "originalProgramId" : 3,
          "mutationOperator" : "ATR",
          "mutationOperatorDescription" : "Aggregation Transformation Replacement",
          "mutantCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n  val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap { (m: Movie) => m.genres.map(g => ((m.year, g), 1)) }\n  val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey { (firstParameter: Int, secondParameter: Int) => {\n    val originalFunction = ((x: Int, y: Int) => x + y)(_, _)\n    originalFunction(firstParameter, firstParameter)\n  } }\n  val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map { (g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey { (m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2 }\n  popularGenresByYear\n}",
          "originalCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n    val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap((m: Movie) => m.genres.map(g => ((m.year, g), 1)))\n    val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey((x: Int, y: Int) => x + y)\n    val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map((g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey((m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2)\n    popularGenresByYear\n  }",
          "status" : "Killed"
        },
        {
          "id" : 83,
          "originalProgramId" : 3,
          "mutationOperator" : "ATR",
          "mutationOperatorDescription" : "Aggregation Transformation Replacement",
          "mutantCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n  val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap { (m: Movie) => m.genres.map(g => ((m.year, g), 1)) }\n  val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey { (firstParameter: Int, secondParameter: Int) => {\n    val originalFunction = ((x: Int, y: Int) => x + y)(_, _)\n    originalFunction(secondParameter, secondParameter)\n  } }\n  val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map { (g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey { (m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2 }\n  popularGenresByYear\n}",
          "originalCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n    val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap((m: Movie) => m.genres.map(g => ((m.year, g), 1)))\n    val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey((x: Int, y: Int) => x + y)\n    val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map((g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey((m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2)\n    popularGenresByYear\n  }",
          "status" : "Killed"
        },
        {
          "id" : 84,
          "originalProgramId" : 3,
          "mutationOperator" : "ATR",
          "mutationOperatorDescription" : "Aggregation Transformation Replacement",
          "mutantCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n  val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap { (m: Movie) => m.genres.map(g => ((m.year, g), 1)) }\n  val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey { (firstParameter: Int, secondParameter: Int) => {\n    val originalFunction = ((x: Int, y: Int) => x + y)(_, _)\n    originalFunction(secondParameter, firstParameter)\n  } }\n  val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map { (g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey { (m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2 }\n  popularGenresByYear\n}",
          "originalCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n    val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap((m: Movie) => m.genres.map(g => ((m.year, g), 1)))\n    val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey((x: Int, y: Int) => x + y)\n    val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map((g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey((m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2)\n    popularGenresByYear\n  }",
          "status" : "Equivalent"
        },
        {
          "id" : 85,
          "originalProgramId" : 3,
          "mutationOperator" : "ATR",
          "mutationOperatorDescription" : "Aggregation Transformation Replacement",
          "mutantCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n  val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap { (m: Movie) => m.genres.map(g => ((m.year, g), 1)) }\n  val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey { (x: Int, y: Int) => x + y }\n  val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map { (g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey { (firstParameter: (String, Int), secondParameter: (String, Int)) => firstParameter }\n  popularGenresByYear\n}",
          "originalCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n    val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap((m: Movie) => m.genres.map(g => ((m.year, g), 1)))\n    val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey((x: Int, y: Int) => x + y)\n    val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map((g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey((m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2)\n    popularGenresByYear\n  }",
          "status" : "Killed"
        },
        {
          "id" : 86,
          "originalProgramId" : 3,
          "mutationOperator" : "ATR",
          "mutationOperatorDescription" : "Aggregation Transformation Replacement",
          "mutantCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n  val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap { (m: Movie) => m.genres.map(g => ((m.year, g), 1)) }\n  val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey { (x: Int, y: Int) => x + y }\n  val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map { (g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey { (firstParameter: (String, Int), secondParameter: (String, Int)) => secondParameter }\n  popularGenresByYear\n}",
          "originalCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n    val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap((m: Movie) => m.genres.map(g => ((m.year, g), 1)))\n    val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey((x: Int, y: Int) => x + y)\n    val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map((g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey((m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2)\n    popularGenresByYear\n  }",
          "status" : "Killed"
        },
        {
          "id" : 87,
          "originalProgramId" : 3,
          "mutationOperator" : "ATR",
          "mutationOperatorDescription" : "Aggregation Transformation Replacement",
          "mutantCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n  val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap { (m: Movie) => m.genres.map(g => ((m.year, g), 1)) }\n  val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey { (x: Int, y: Int) => x + y }\n  val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map { (g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey { (firstParameter: (String, Int), secondParameter: (String, Int)) => {\n    val originalFunction = ((m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2)(_, _)\n    originalFunction(firstParameter, firstParameter)\n  } }\n  popularGenresByYear\n}",
          "originalCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n    val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap((m: Movie) => m.genres.map(g => ((m.year, g), 1)))\n    val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey((x: Int, y: Int) => x + y)\n    val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map((g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey((m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2)\n    popularGenresByYear\n  }",
          "status" : "Killed"
        },
        {
          "id" : 88,
          "originalProgramId" : 3,
          "mutationOperator" : "ATR",
          "mutationOperatorDescription" : "Aggregation Transformation Replacement",
          "mutantCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n  val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap { (m: Movie) => m.genres.map(g => ((m.year, g), 1)) }\n  val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey { (x: Int, y: Int) => x + y }\n  val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map { (g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey { (firstParameter: (String, Int), secondParameter: (String, Int)) => {\n    val originalFunction = ((m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2)(_, _)\n    originalFunction(secondParameter, secondParameter)\n  } }\n  popularGenresByYear\n}",
          "originalCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n    val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap((m: Movie) => m.genres.map(g => ((m.year, g), 1)))\n    val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey((x: Int, y: Int) => x + y)\n    val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map((g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey((m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2)\n    popularGenresByYear\n  }",
          "status" : "Killed"
        },
        {
          "id" : 89,
          "originalProgramId" : 3,
          "mutationOperator" : "ATR",
          "mutationOperatorDescription" : "Aggregation Transformation Replacement",
          "mutantCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n  val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap { (m: Movie) => m.genres.map(g => ((m.year, g), 1)) }\n  val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey { (x: Int, y: Int) => x + y }\n  val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map { (g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey { (firstParameter: (String, Int), secondParameter: (String, Int)) => {\n    val originalFunction = ((m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2)(_, _)\n    originalFunction(secondParameter, firstParameter)\n  } }\n  popularGenresByYear\n}",
          "originalCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n    val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap((m: Movie) => m.genres.map(g => ((m.year, g), 1)))\n    val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey((x: Int, y: Int) => x + y)\n    val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map((g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey((m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2)\n    popularGenresByYear\n  }",
          "status" : "Killed"
        }
      ],
      "removedMutants" : [
      ],
      "mutationOperatorsMetrics" : {
        "totalMutantsPerOperator" : {
          "FTD" : 0,
          "JTR" : 0,
          "UTR" : 0,
          "MTR" : 15,
          "UTD" : 2,
          "OTD" : 0,
          "BTR" : 0,
          "STR" : 0,
          "BTS" : 0,
          "ATR" : 10,
          "OTI" : 0,
          "DTI" : 4,
          "DTD" : 0,
          "NFTP" : 0,
          "UTS" : 0
        },
        "totalKilledMutantsPerOperator" : {
          "FTD" : 0,
          "JTR" : 0,
          "UTR" : 0,
          "MTR" : 13,
          "UTD" : 2,
          "OTD" : 0,
          "BTR" : 0,
          "STR" : 0,
          "BTS" : 0,
          "ATR" : 9,
          "OTI" : 0,
          "DTI" : 1,
          "DTD" : 0,
          "NFTP" : 0,
          "UTS" : 0
        },
        "totalLivedMutantsPerOperator" : {
          "FTD" : 0,
          "JTR" : 0,
          "UTR" : 0,
          "MTR" : 1,
          "UTD" : 0,
          "OTD" : 0,
          "BTR" : 0,
          "STR" : 0,
          "BTS" : 0,
          "ATR" : 0,
          "OTI" : 0,
          "DTI" : 2,
          "DTD" : 0,
          "NFTP" : 0,
          "UTS" : 0
        },
        "totalEquivalentMutantsPerOperator" : {
          "FTD" : 0,
          "JTR" : 0,
          "UTR" : 0,
          "MTR" : 1,
          "UTD" : 0,
          "OTD" : 0,
          "BTR" : 0,
          "STR" : 0,
          "BTS" : 0,
          "ATR" : 1,
          "OTI" : 0,
          "DTI" : 1,
          "DTD" : 0,
          "NFTP" : 0,
          "UTS" : 0
        },
        "totalErrorMutantsPerOperator" : {
          "FTD" : 0,
          "JTR" : 0,
          "UTR" : 0,
          "MTR" : 0,
          "UTD" : 0,
          "OTD" : 0,
          "BTR" : 0,
          "STR" : 0,
          "BTS" : 0,
          "ATR" : 0,
          "OTI" : 0,
          "DTI" : 0,
          "DTD" : 0,
          "NFTP" : 0,
          "UTS" : 0
        },
        "totalRemovedMutantsPerOperator" : {
          "FTD" : 0,
          "JTR" : 0,
          "UTR" : 0,
          "MTR" : 0,
          "UTD" : 0,
          "OTD" : 0,
          "BTR" : 0,
          "STR" : 0,
          "BTS" : 0,
          "ATR" : 0,
          "OTI" : 0,
          "DTI" : 0,
          "DTD" : 0,
          "NFTP" : 0,
          "UTS" : 0
        },
        "descriptionPerOperator" : {
          "FTD" : "Filter Transformation Deletion",
          "JTR" : "Join Transformation Replacement",
          "UTR" : "Unary Transformation Replacement",
          "MTR" : "Mapping Transformation Replacement",
          "UTD" : "Unary Transformation Deletion",
          "OTD" : "Order Transformation Deletion",
          "BTR" : "Binary Transformation Replacement",
          "STR" : "Set Transformation Replacement",
          "BTS" : "Binary Transformation Swap",
          "ATR" : "Aggregation Transformation Replacement",
          "OTI" : "Order Transformation Inversion",
          "DTI" : "Distinct Transformation Insertion",
          "DTD" : "Distinct Transformation Deletion",
          "NFTP" : "Negation of Filter Transformation Predicate",
          "UTS" : "Unary Transformation Swap"
        }
      },
      "totalDatasets" : 5,
      "totalTransformations" : 4,
      "totalMutants" : 31,
      "totalKilledMutants" : 25,
      "totalLivedMutants" : 3,
      "totalEquivalentMutants" : 3,
      "totalErrorMutants" : 0,
      "totalRemovedMutants" : 0,
      "mutationScore" : 0.89285713
    },
    {
      "id" : 4,
      "programSourceId" : 1,
      "name" : "ratingsStatistics",
      "code" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map((r: Rating) => (r.movieId, r))\n    val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n    val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map((tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating))\n    val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n    val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map((x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)))\n    ratingsStats\n  }",
      "datasets" : [
        {
          "id" : 17,
          "name" : "movies",
          "datasetType" : "RDD[Movie]",
          "inputDataset" : true,
          "outputDataset" : false
        },
        {
          "id" : 18,
          "name" : "ratings",
          "datasetType" : "RDD[Rating]",
          "inputDataset" : true,
          "outputDataset" : false
        },
        {
          "id" : 19,
          "name" : "moviesIdKey",
          "datasetType" : "RDD[(Int, Movie)]",
          "inputDataset" : false,
          "outputDataset" : false
        },
        {
          "id" : 20,
          "name" : "ratingsMovieIdKey",
          "datasetType" : "RDD[(Int, Rating)]",
          "inputDataset" : false,
          "outputDataset" : false
        },
        {
          "id" : 21,
          "name" : "joinMoviesRatings",
          "datasetType" : "RDD[(Int, (Movie, Rating))]",
          "inputDataset" : false,
          "outputDataset" : false
        },
        {
          "id" : 22,
          "name" : "moviesInfoCounts",
          "datasetType" : "RDD[(Tuple3[Int, String, Int], Double)]",
          "inputDataset" : false,
          "outputDataset" : false
        },
        {
          "id" : 23,
          "name" : "groupByMoviesInfo",
          "datasetType" : "RDD[(Tuple3[Int, String, Int], Iterable[Double])]",
          "inputDataset" : false,
          "outputDataset" : false
        },
        {
          "id" : 24,
          "name" : "ratingsStats",
          "datasetType" : "RDD[(Tuple3[Int, String, Int], Tuple4[Int, Double, Double, Double])]",
          "inputDataset" : false,
          "outputDataset" : true
        }
      ],
      "transformations" : [
        {
          "id" : 12,
          "name" : "map",
          "inputTypes" : [
            "RDD[Movie]"
          ],
          "outputTypes" : [
            "RDD[(Int, Movie)]"
          ],
          "loadTransformation" : false
        },
        {
          "id" : 13,
          "name" : "map",
          "inputTypes" : [
            "RDD[Rating]"
          ],
          "outputTypes" : [
            "RDD[(Int, Rating)]"
          ],
          "loadTransformation" : false
        },
        {
          "id" : 14,
          "name" : "join",
          "inputTypes" : [
            "RDD[(Int, Movie)]",
            "RDD[(Int, Rating)]"
          ],
          "outputTypes" : [
            "RDD[(Int, (Movie, Rating))]"
          ],
          "loadTransformation" : false
        },
        {
          "id" : 15,
          "name" : "map",
          "inputTypes" : [
            "RDD[(Int, (Movie, Rating))]"
          ],
          "outputTypes" : [
            "RDD[(Tuple3[Int, String, Int], Double)]"
          ],
          "loadTransformation" : false
        },
        {
          "id" : 16,
          "name" : "groupByKey",
          "inputTypes" : [
            "RDD[(Tuple3[Int, String, Int], Double)]"
          ],
          "outputTypes" : [
            "RDD[(Tuple3[Int, String, Int], Iterable[Double])]"
          ],
          "loadTransformation" : false
        },
        {
          "id" : 17,
          "name" : "map",
          "inputTypes" : [
            "RDD[(Tuple3[Int, String, Int], Iterable[Double])]"
          ],
          "outputTypes" : [
            "RDD[(Tuple3[Int, String, Int], Tuple4[Int, Double, Double, Double])]"
          ],
          "loadTransformation" : false
        }
      ],
      "edges" : [
        {
          "id" : 23,
          "datasetId" : 17,
          "transformationId" : 12,
          "direction" : "DatasetToTransformation"
        },
        {
          "id" : 24,
          "datasetId" : 19,
          "transformationId" : 12,
          "direction" : "TransformationToDataset"
        },
        {
          "id" : 25,
          "datasetId" : 18,
          "transformationId" : 13,
          "direction" : "DatasetToTransformation"
        },
        {
          "id" : 26,
          "datasetId" : 20,
          "transformationId" : 13,
          "direction" : "TransformationToDataset"
        },
        {
          "id" : 27,
          "datasetId" : 19,
          "transformationId" : 14,
          "direction" : "DatasetToTransformation"
        },
        {
          "id" : 28,
          "datasetId" : 20,
          "transformationId" : 14,
          "direction" : "DatasetToTransformation"
        },
        {
          "id" : 29,
          "datasetId" : 21,
          "transformationId" : 14,
          "direction" : "TransformationToDataset"
        },
        {
          "id" : 30,
          "datasetId" : 21,
          "transformationId" : 15,
          "direction" : "DatasetToTransformation"
        },
        {
          "id" : 31,
          "datasetId" : 22,
          "transformationId" : 15,
          "direction" : "TransformationToDataset"
        },
        {
          "id" : 32,
          "datasetId" : 22,
          "transformationId" : 16,
          "direction" : "DatasetToTransformation"
        },
        {
          "id" : 33,
          "datasetId" : 23,
          "transformationId" : 16,
          "direction" : "TransformationToDataset"
        },
        {
          "id" : 34,
          "datasetId" : 23,
          "transformationId" : 17,
          "direction" : "DatasetToTransformation"
        },
        {
          "id" : 35,
          "datasetId" : 24,
          "transformationId" : 17,
          "direction" : "TransformationToDataset"
        }
      ],
      "mutants" : [
        {
          "id" : 90,
          "originalProgramId" : 4,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (inputParameter: Movie) => {\n    val originalFunction = ((m: Movie) => (m.movieId, m))(_)\n    val originalValue = originalFunction(inputParameter)\n    (0, originalValue._2)\n  } }\n  val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map { (r: Rating) => (r.movieId, r) }\n  val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n  val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map { (tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating) }\n  val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n  val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map { (x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)) }\n  ratingsStats\n}",
          "originalCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map((r: Rating) => (r.movieId, r))\n    val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n    val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map((tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating))\n    val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n    val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map((x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)))\n    ratingsStats\n  }",
          "status" : "Killed"
        },
        {
          "id" : 91,
          "originalProgramId" : 4,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (inputParameter: Movie) => {\n    val originalFunction = ((m: Movie) => (m.movieId, m))(_)\n    val originalValue = originalFunction(inputParameter)\n    (1, originalValue._2)\n  } }\n  val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map { (r: Rating) => (r.movieId, r) }\n  val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n  val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map { (tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating) }\n  val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n  val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map { (x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)) }\n  ratingsStats\n}",
          "originalCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map((r: Rating) => (r.movieId, r))\n    val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n    val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map((tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating))\n    val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n    val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map((x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)))\n    ratingsStats\n  }",
          "status" : "Killed"
        },
        {
          "id" : 92,
          "originalProgramId" : 4,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (inputParameter: Movie) => {\n    val originalFunction = ((m: Movie) => (m.movieId, m))(_)\n    val originalValue = originalFunction(inputParameter)\n    (Int.MaxValue, originalValue._2)\n  } }\n  val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map { (r: Rating) => (r.movieId, r) }\n  val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n  val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map { (tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating) }\n  val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n  val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map { (x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)) }\n  ratingsStats\n}",
          "originalCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map((r: Rating) => (r.movieId, r))\n    val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n    val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map((tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating))\n    val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n    val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map((x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)))\n    ratingsStats\n  }",
          "status" : "Killed"
        },
        {
          "id" : 93,
          "originalProgramId" : 4,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (inputParameter: Movie) => {\n    val originalFunction = ((m: Movie) => (m.movieId, m))(_)\n    val originalValue = originalFunction(inputParameter)\n    (Int.MinValue, originalValue._2)\n  } }\n  val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map { (r: Rating) => (r.movieId, r) }\n  val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n  val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map { (tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating) }\n  val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n  val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map { (x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)) }\n  ratingsStats\n}",
          "originalCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map((r: Rating) => (r.movieId, r))\n    val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n    val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map((tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating))\n    val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n    val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map((x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)))\n    ratingsStats\n  }",
          "status" : "Killed"
        },
        {
          "id" : 94,
          "originalProgramId" : 4,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (inputParameter: Movie) => {\n    val originalFunction = ((m: Movie) => (m.movieId, m))(_)\n    val originalValue = originalFunction(inputParameter)\n    (-originalValue._1, originalValue._2)\n  } }\n  val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map { (r: Rating) => (r.movieId, r) }\n  val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n  val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map { (tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating) }\n  val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n  val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map { (x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)) }\n  ratingsStats\n}",
          "originalCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map((r: Rating) => (r.movieId, r))\n    val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n    val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map((tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating))\n    val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n    val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map((x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)))\n    ratingsStats\n  }",
          "status" : "Killed"
        },
        {
          "id" : 95,
          "originalProgramId" : 4,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (inputParameter: Movie) => {\n    val originalFunction = ((m: Movie) => (m.movieId, m))(_)\n    val originalValue = originalFunction(inputParameter)\n    (originalValue._1, null.asInstanceOf[Movie])\n  } }\n  val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map { (r: Rating) => (r.movieId, r) }\n  val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n  val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map { (tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating) }\n  val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n  val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map { (x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)) }\n  ratingsStats\n}",
          "originalCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map((r: Rating) => (r.movieId, r))\n    val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n    val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map((tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating))\n    val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n    val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map((x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)))\n    ratingsStats\n  }",
          "status" : "Killed"
        },
        {
          "id" : 96,
          "originalProgramId" : 4,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map { (inputParameter: Rating) => {\n    val originalFunction = ((r: Rating) => (r.movieId, r))(_)\n    val originalValue = originalFunction(inputParameter)\n    (0, originalValue._2)\n  } }\n  val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n  val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map { (tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating) }\n  val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n  val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map { (x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)) }\n  ratingsStats\n}",
          "originalCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map((r: Rating) => (r.movieId, r))\n    val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n    val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map((tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating))\n    val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n    val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map((x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)))\n    ratingsStats\n  }",
          "status" : "Killed"
        },
        {
          "id" : 97,
          "originalProgramId" : 4,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map { (inputParameter: Rating) => {\n    val originalFunction = ((r: Rating) => (r.movieId, r))(_)\n    val originalValue = originalFunction(inputParameter)\n    (1, originalValue._2)\n  } }\n  val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n  val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map { (tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating) }\n  val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n  val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map { (x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)) }\n  ratingsStats\n}",
          "originalCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map((r: Rating) => (r.movieId, r))\n    val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n    val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map((tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating))\n    val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n    val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map((x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)))\n    ratingsStats\n  }",
          "status" : "Killed"
        },
        {
          "id" : 98,
          "originalProgramId" : 4,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map { (inputParameter: Rating) => {\n    val originalFunction = ((r: Rating) => (r.movieId, r))(_)\n    val originalValue = originalFunction(inputParameter)\n    (Int.MaxValue, originalValue._2)\n  } }\n  val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n  val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map { (tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating) }\n  val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n  val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map { (x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)) }\n  ratingsStats\n}",
          "originalCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map((r: Rating) => (r.movieId, r))\n    val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n    val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map((tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating))\n    val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n    val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map((x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)))\n    ratingsStats\n  }",
          "status" : "Killed"
        },
        {
          "id" : 99,
          "originalProgramId" : 4,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map { (inputParameter: Rating) => {\n    val originalFunction = ((r: Rating) => (r.movieId, r))(_)\n    val originalValue = originalFunction(inputParameter)\n    (Int.MinValue, originalValue._2)\n  } }\n  val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n  val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map { (tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating) }\n  val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n  val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map { (x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)) }\n  ratingsStats\n}",
          "originalCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map((r: Rating) => (r.movieId, r))\n    val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n    val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map((tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating))\n    val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n    val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map((x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)))\n    ratingsStats\n  }",
          "status" : "Killed"
        },
        {
          "id" : 100,
          "originalProgramId" : 4,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map { (inputParameter: Rating) => {\n    val originalFunction = ((r: Rating) => (r.movieId, r))(_)\n    val originalValue = originalFunction(inputParameter)\n    (-originalValue._1, originalValue._2)\n  } }\n  val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n  val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map { (tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating) }\n  val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n  val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map { (x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)) }\n  ratingsStats\n}",
          "originalCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map((r: Rating) => (r.movieId, r))\n    val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n    val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map((tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating))\n    val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n    val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map((x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)))\n    ratingsStats\n  }",
          "status" : "Killed"
        },
        {
          "id" : 101,
          "originalProgramId" : 4,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map { (inputParameter: Rating) => {\n    val originalFunction = ((r: Rating) => (r.movieId, r))(_)\n    val originalValue = originalFunction(inputParameter)\n    (originalValue._1, null.asInstanceOf[Rating])\n  } }\n  val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n  val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map { (tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating) }\n  val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n  val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map { (x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)) }\n  ratingsStats\n}",
          "originalCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map((r: Rating) => (r.movieId, r))\n    val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n    val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map((tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating))\n    val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n    val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map((x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)))\n    ratingsStats\n  }",
          "status" : "Killed"
        },
        {
          "id" : 102,
          "originalProgramId" : 4,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map { (r: Rating) => (r.movieId, r) }\n  val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n  val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map { (inputParameter: (Int, (Movie, Rating))) => {\n    val originalFunction = ((tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating))(_)\n    val originalValue = originalFunction(inputParameter)\n    (originalValue._1, 0d)\n  } }\n  val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n  val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map { (x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)) }\n  ratingsStats\n}",
          "originalCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map((r: Rating) => (r.movieId, r))\n    val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n    val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map((tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating))\n    val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n    val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map((x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)))\n    ratingsStats\n  }",
          "status" : "Killed"
        },
        {
          "id" : 103,
          "originalProgramId" : 4,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map { (r: Rating) => (r.movieId, r) }\n  val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n  val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map { (inputParameter: (Int, (Movie, Rating))) => {\n    val originalFunction = ((tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating))(_)\n    val originalValue = originalFunction(inputParameter)\n    (originalValue._1, 1d)\n  } }\n  val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n  val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map { (x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)) }\n  ratingsStats\n}",
          "originalCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map((r: Rating) => (r.movieId, r))\n    val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n    val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map((tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating))\n    val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n    val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map((x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)))\n    ratingsStats\n  }",
          "status" : "Killed"
        },
        {
          "id" : 104,
          "originalProgramId" : 4,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map { (r: Rating) => (r.movieId, r) }\n  val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n  val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map { (inputParameter: (Int, (Movie, Rating))) => {\n    val originalFunction = ((tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating))(_)\n    val originalValue = originalFunction(inputParameter)\n    (originalValue._1, Double.MaxValue)\n  } }\n  val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n  val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map { (x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)) }\n  ratingsStats\n}",
          "originalCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map((r: Rating) => (r.movieId, r))\n    val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n    val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map((tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating))\n    val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n    val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map((x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)))\n    ratingsStats\n  }",
          "status" : "Killed"
        },
        {
          "id" : 105,
          "originalProgramId" : 4,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map { (r: Rating) => (r.movieId, r) }\n  val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n  val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map { (inputParameter: (Int, (Movie, Rating))) => {\n    val originalFunction = ((tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating))(_)\n    val originalValue = originalFunction(inputParameter)\n    (originalValue._1, Double.MinValue)\n  } }\n  val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n  val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map { (x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)) }\n  ratingsStats\n}",
          "originalCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map((r: Rating) => (r.movieId, r))\n    val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n    val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map((tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating))\n    val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n    val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map((x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)))\n    ratingsStats\n  }",
          "status" : "Killed"
        },
        {
          "id" : 106,
          "originalProgramId" : 4,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map { (r: Rating) => (r.movieId, r) }\n  val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n  val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map { (inputParameter: (Int, (Movie, Rating))) => {\n    val originalFunction = ((tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating))(_)\n    val originalValue = originalFunction(inputParameter)\n    (originalValue._1, -originalValue._2)\n  } }\n  val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n  val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map { (x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)) }\n  ratingsStats\n}",
          "originalCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map((r: Rating) => (r.movieId, r))\n    val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n    val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map((tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating))\n    val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n    val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map((x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)))\n    ratingsStats\n  }",
          "status" : "Killed"
        },
        {
          "id" : 107,
          "originalProgramId" : 4,
          "mutationOperator" : "DTI",
          "mutationOperatorDescription" : "Distinct Transformation Insertion",
          "mutantCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }.distinct()\n  val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map { (r: Rating) => (r.movieId, r) }\n  val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n  val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map { (tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating) }\n  val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n  val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map { (x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)) }\n  ratingsStats\n}",
          "originalCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map((r: Rating) => (r.movieId, r))\n    val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n    val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map((tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating))\n    val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n    val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map((x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)))\n    ratingsStats\n  }",
          "status" : "Lived"
        },
        {
          "id" : 108,
          "originalProgramId" : 4,
          "mutationOperator" : "DTI",
          "mutationOperatorDescription" : "Distinct Transformation Insertion",
          "mutantCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map { (r: Rating) => (r.movieId, r) }.distinct()\n  val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n  val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map { (tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating) }\n  val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n  val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map { (x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)) }\n  ratingsStats\n}",
          "originalCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map((r: Rating) => (r.movieId, r))\n    val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n    val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map((tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating))\n    val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n    val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map((x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)))\n    ratingsStats\n  }",
          "status" : "Lived"
        },
        {
          "id" : 109,
          "originalProgramId" : 4,
          "mutationOperator" : "DTI",
          "mutationOperatorDescription" : "Distinct Transformation Insertion",
          "mutantCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map { (r: Rating) => (r.movieId, r) }\n  val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey).distinct()\n  val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map { (tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating) }\n  val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n  val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map { (x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)) }\n  ratingsStats\n}",
          "originalCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map((r: Rating) => (r.movieId, r))\n    val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n    val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map((tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating))\n    val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n    val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map((x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)))\n    ratingsStats\n  }",
          "status" : "Lived"
        },
        {
          "id" : 110,
          "originalProgramId" : 4,
          "mutationOperator" : "DTI",
          "mutationOperatorDescription" : "Distinct Transformation Insertion",
          "mutantCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map { (r: Rating) => (r.movieId, r) }\n  val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n  val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map { (tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating) }.distinct()\n  val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n  val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map { (x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)) }\n  ratingsStats\n}",
          "originalCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map((r: Rating) => (r.movieId, r))\n    val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n    val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map((tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating))\n    val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n    val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map((x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)))\n    ratingsStats\n  }",
          "status" : "Killed"
        },
        {
          "id" : 111,
          "originalProgramId" : 4,
          "mutationOperator" : "DTI",
          "mutationOperatorDescription" : "Distinct Transformation Insertion",
          "mutantCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map { (r: Rating) => (r.movieId, r) }\n  val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n  val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map { (tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating) }\n  val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey().distinct()\n  val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map { (x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)) }\n  ratingsStats\n}",
          "originalCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map((r: Rating) => (r.movieId, r))\n    val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n    val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map((tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating))\n    val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n    val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map((x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)))\n    ratingsStats\n  }",
          "status" : "Equivalent"
        },
        {
          "id" : 112,
          "originalProgramId" : 4,
          "mutationOperator" : "DTI",
          "mutationOperatorDescription" : "Distinct Transformation Insertion",
          "mutantCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map { (r: Rating) => (r.movieId, r) }\n  val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n  val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map { (tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating) }\n  val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n  val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map { (x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)) }.distinct()\n  ratingsStats\n}",
          "originalCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map((r: Rating) => (r.movieId, r))\n    val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n    val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map((tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating))\n    val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n    val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map((x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)))\n    ratingsStats\n  }",
          "status" : "Equivalent"
        },
        {
          "id" : 113,
          "originalProgramId" : 4,
          "mutationOperator" : "JTR",
          "mutationOperatorDescription" : "Join Transformation Replacement",
          "mutantCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map { (r: Rating) => (r.movieId, r) }\n  val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.leftOuterJoin(ratingsMovieIdKey).map(tuple => (tuple._1, (tuple._2._1, tuple._2._2.getOrElse(null.asInstanceOf[Rating]))))\n  val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map { (tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating) }\n  val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n  val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map { (x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)) }\n  ratingsStats\n}",
          "originalCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map((r: Rating) => (r.movieId, r))\n    val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n    val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map((tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating))\n    val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n    val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map((x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)))\n    ratingsStats\n  }",
          "status" : "Lived"
        },
        {
          "id" : 114,
          "originalProgramId" : 4,
          "mutationOperator" : "JTR",
          "mutationOperatorDescription" : "Join Transformation Replacement",
          "mutantCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map { (r: Rating) => (r.movieId, r) }\n  val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.rightOuterJoin(ratingsMovieIdKey).map(tuple => (tuple._1, (tuple._2._1.getOrElse(null.asInstanceOf[Movie]), tuple._2._2)))\n  val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map { (tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating) }\n  val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n  val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map { (x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)) }\n  ratingsStats\n}",
          "originalCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map((r: Rating) => (r.movieId, r))\n    val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n    val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map((tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating))\n    val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n    val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map((x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)))\n    ratingsStats\n  }",
          "status" : "Lived"
        },
        {
          "id" : 115,
          "originalProgramId" : 4,
          "mutationOperator" : "JTR",
          "mutationOperatorDescription" : "Join Transformation Replacement",
          "mutantCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map { (r: Rating) => (r.movieId, r) }\n  val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.fullOuterJoin(ratingsMovieIdKey).map(tuple => (tuple._1, (tuple._2._1.getOrElse(null.asInstanceOf[Movie]), tuple._2._2.getOrElse(null.asInstanceOf[Rating]))))\n  val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map { (tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating) }\n  val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n  val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map { (x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)) }\n  ratingsStats\n}",
          "originalCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map((r: Rating) => (r.movieId, r))\n    val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n    val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map((tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating))\n    val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n    val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map((x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)))\n    ratingsStats\n  }",
          "status" : "Lived"
        }
      ],
      "removedMutants" : [
      ],
      "mutationOperatorsMetrics" : {
        "totalMutantsPerOperator" : {
          "FTD" : 0,
          "JTR" : 3,
          "UTR" : 0,
          "MTR" : 17,
          "UTD" : 0,
          "OTD" : 0,
          "BTR" : 0,
          "STR" : 0,
          "BTS" : 0,
          "ATR" : 0,
          "OTI" : 0,
          "DTI" : 6,
          "DTD" : 0,
          "NFTP" : 0,
          "UTS" : 0
        },
        "totalKilledMutantsPerOperator" : {
          "FTD" : 0,
          "JTR" : 0,
          "UTR" : 0,
          "MTR" : 17,
          "UTD" : 0,
          "OTD" : 0,
          "BTR" : 0,
          "STR" : 0,
          "BTS" : 0,
          "ATR" : 0,
          "OTI" : 0,
          "DTI" : 1,
          "DTD" : 0,
          "NFTP" : 0,
          "UTS" : 0
        },
        "totalLivedMutantsPerOperator" : {
          "FTD" : 0,
          "JTR" : 3,
          "UTR" : 0,
          "MTR" : 0,
          "UTD" : 0,
          "OTD" : 0,
          "BTR" : 0,
          "STR" : 0,
          "BTS" : 0,
          "ATR" : 0,
          "OTI" : 0,
          "DTI" : 3,
          "DTD" : 0,
          "NFTP" : 0,
          "UTS" : 0
        },
        "totalEquivalentMutantsPerOperator" : {
          "FTD" : 0,
          "JTR" : 0,
          "UTR" : 0,
          "MTR" : 0,
          "UTD" : 0,
          "OTD" : 0,
          "BTR" : 0,
          "STR" : 0,
          "BTS" : 0,
          "ATR" : 0,
          "OTI" : 0,
          "DTI" : 2,
          "DTD" : 0,
          "NFTP" : 0,
          "UTS" : 0
        },
        "totalErrorMutantsPerOperator" : {
          "FTD" : 0,
          "JTR" : 0,
          "UTR" : 0,
          "MTR" : 0,
          "UTD" : 0,
          "OTD" : 0,
          "BTR" : 0,
          "STR" : 0,
          "BTS" : 0,
          "ATR" : 0,
          "OTI" : 0,
          "DTI" : 0,
          "DTD" : 0,
          "NFTP" : 0,
          "UTS" : 0
        },
        "totalRemovedMutantsPerOperator" : {
          "FTD" : 0,
          "JTR" : 0,
          "UTR" : 0,
          "MTR" : 0,
          "UTD" : 0,
          "OTD" : 0,
          "BTR" : 0,
          "STR" : 0,
          "BTS" : 0,
          "ATR" : 0,
          "OTI" : 0,
          "DTI" : 0,
          "DTD" : 0,
          "NFTP" : 0,
          "UTS" : 0
        },
        "descriptionPerOperator" : {
          "FTD" : "Filter Transformation Deletion",
          "JTR" : "Join Transformation Replacement",
          "UTR" : "Unary Transformation Replacement",
          "MTR" : "Mapping Transformation Replacement",
          "UTD" : "Unary Transformation Deletion",
          "OTD" : "Order Transformation Deletion",
          "BTR" : "Binary Transformation Replacement",
          "STR" : "Set Transformation Replacement",
          "BTS" : "Binary Transformation Swap",
          "ATR" : "Aggregation Transformation Replacement",
          "OTI" : "Order Transformation Inversion",
          "DTI" : "Distinct Transformation Insertion",
          "DTD" : "Distinct Transformation Deletion",
          "NFTP" : "Negation of Filter Transformation Predicate",
          "UTS" : "Unary Transformation Swap"
        }
      },
      "totalDatasets" : 8,
      "totalTransformations" : 6,
      "totalMutants" : 26,
      "totalKilledMutants" : 18,
      "totalLivedMutants" : 6,
      "totalEquivalentMutants" : 2,
      "totalErrorMutants" : 0,
      "totalRemovedMutants" : 0,
      "mutationScore" : 0.75
    },
    {
      "id" : 5,
      "programSourceId" : 1,
      "name" : "meanOfMeansOfRatingsOfAllMovies",
      "code" : "def meanOfMeansOfRatingsOfAllMovies(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))]) = {\n    val meanOfRatingsAllMovies: RDD[(Double, Int)] = ratingsStats.map((m: ((Int, String, Int), (Int, Double, Double, Double))) => (m._2._2, 1))\n    val sumMeanOfRatingsAllMovies: (Double, Int) = meanOfRatingsAllMovies.reduce((m1: (Double, Int), m2: (Double, Int)) => (m1._1 + m2._1, m1._2 + m2._2))\n    sumMeanOfRatingsAllMovies._1 / sumMeanOfRatingsAllMovies._2\n  }",
      "datasets" : [
        {
          "id" : 25,
          "name" : "ratingsStats",
          "datasetType" : "RDD[(Tuple3[Int, String, Int], Tuple4[Int, Double, Double, Double])]",
          "inputDataset" : true,
          "outputDataset" : false
        },
        {
          "id" : 26,
          "name" : "meanOfRatingsAllMovies",
          "datasetType" : "RDD[(Double, Int)]",
          "inputDataset" : false,
          "outputDataset" : false
        }
      ],
      "transformations" : [
        {
          "id" : 18,
          "name" : "map",
          "inputTypes" : [
            "RDD[(Tuple3[Int, String, Int], Tuple4[Int, Double, Double, Double])]"
          ],
          "outputTypes" : [
            "RDD[(Double, Int)]"
          ],
          "loadTransformation" : false
        },
        {
          "id" : 19,
          "name" : "reduce",
          "inputTypes" : [
            "RDD[(Double, Int)]"
          ],
          "outputTypes" : [
          ],
          "loadTransformation" : true
        }
      ],
      "edges" : [
        {
          "id" : 36,
          "datasetId" : 25,
          "transformationId" : 18,
          "direction" : "DatasetToTransformation"
        },
        {
          "id" : 37,
          "datasetId" : 26,
          "transformationId" : 18,
          "direction" : "TransformationToDataset"
        },
        {
          "id" : 38,
          "datasetId" : 26,
          "transformationId" : 19,
          "direction" : "DatasetToTransformation"
        }
      ],
      "mutants" : [
        {
          "id" : 116,
          "originalProgramId" : 5,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def meanOfMeansOfRatingsOfAllMovies(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))]) = {\n  val meanOfRatingsAllMovies: RDD[(Double, Int)] = ratingsStats.map { (inputParameter: (Tuple3[Int, String, Int], Tuple4[Int, Double, Double, Double])) => {\n    val originalFunction = ((m: ((Int, String, Int), (Int, Double, Double, Double))) => (m._2._2, 1))(_)\n    val originalValue = originalFunction(inputParameter)\n    (0d, originalValue._2)\n  } }\n  val sumMeanOfRatingsAllMovies: (Double, Int) = meanOfRatingsAllMovies.reduce { (m1: (Double, Int), m2: (Double, Int)) => (m1._1 + m2._1, m1._2 + m2._2) }\n  sumMeanOfRatingsAllMovies._1 / sumMeanOfRatingsAllMovies._2\n}",
          "originalCode" : "def meanOfMeansOfRatingsOfAllMovies(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))]) = {\n    val meanOfRatingsAllMovies: RDD[(Double, Int)] = ratingsStats.map((m: ((Int, String, Int), (Int, Double, Double, Double))) => (m._2._2, 1))\n    val sumMeanOfRatingsAllMovies: (Double, Int) = meanOfRatingsAllMovies.reduce((m1: (Double, Int), m2: (Double, Int)) => (m1._1 + m2._1, m1._2 + m2._2))\n    sumMeanOfRatingsAllMovies._1 / sumMeanOfRatingsAllMovies._2\n  }",
          "status" : "Killed"
        },
        {
          "id" : 117,
          "originalProgramId" : 5,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def meanOfMeansOfRatingsOfAllMovies(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))]) = {\n  val meanOfRatingsAllMovies: RDD[(Double, Int)] = ratingsStats.map { (inputParameter: (Tuple3[Int, String, Int], Tuple4[Int, Double, Double, Double])) => {\n    val originalFunction = ((m: ((Int, String, Int), (Int, Double, Double, Double))) => (m._2._2, 1))(_)\n    val originalValue = originalFunction(inputParameter)\n    (1d, originalValue._2)\n  } }\n  val sumMeanOfRatingsAllMovies: (Double, Int) = meanOfRatingsAllMovies.reduce { (m1: (Double, Int), m2: (Double, Int)) => (m1._1 + m2._1, m1._2 + m2._2) }\n  sumMeanOfRatingsAllMovies._1 / sumMeanOfRatingsAllMovies._2\n}",
          "originalCode" : "def meanOfMeansOfRatingsOfAllMovies(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))]) = {\n    val meanOfRatingsAllMovies: RDD[(Double, Int)] = ratingsStats.map((m: ((Int, String, Int), (Int, Double, Double, Double))) => (m._2._2, 1))\n    val sumMeanOfRatingsAllMovies: (Double, Int) = meanOfRatingsAllMovies.reduce((m1: (Double, Int), m2: (Double, Int)) => (m1._1 + m2._1, m1._2 + m2._2))\n    sumMeanOfRatingsAllMovies._1 / sumMeanOfRatingsAllMovies._2\n  }",
          "status" : "Killed"
        },
        {
          "id" : 118,
          "originalProgramId" : 5,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def meanOfMeansOfRatingsOfAllMovies(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))]) = {\n  val meanOfRatingsAllMovies: RDD[(Double, Int)] = ratingsStats.map { (inputParameter: (Tuple3[Int, String, Int], Tuple4[Int, Double, Double, Double])) => {\n    val originalFunction = ((m: ((Int, String, Int), (Int, Double, Double, Double))) => (m._2._2, 1))(_)\n    val originalValue = originalFunction(inputParameter)\n    (Double.MaxValue, originalValue._2)\n  } }\n  val sumMeanOfRatingsAllMovies: (Double, Int) = meanOfRatingsAllMovies.reduce { (m1: (Double, Int), m2: (Double, Int)) => (m1._1 + m2._1, m1._2 + m2._2) }\n  sumMeanOfRatingsAllMovies._1 / sumMeanOfRatingsAllMovies._2\n}",
          "originalCode" : "def meanOfMeansOfRatingsOfAllMovies(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))]) = {\n    val meanOfRatingsAllMovies: RDD[(Double, Int)] = ratingsStats.map((m: ((Int, String, Int), (Int, Double, Double, Double))) => (m._2._2, 1))\n    val sumMeanOfRatingsAllMovies: (Double, Int) = meanOfRatingsAllMovies.reduce((m1: (Double, Int), m2: (Double, Int)) => (m1._1 + m2._1, m1._2 + m2._2))\n    sumMeanOfRatingsAllMovies._1 / sumMeanOfRatingsAllMovies._2\n  }",
          "status" : "Killed"
        },
        {
          "id" : 119,
          "originalProgramId" : 5,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def meanOfMeansOfRatingsOfAllMovies(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))]) = {\n  val meanOfRatingsAllMovies: RDD[(Double, Int)] = ratingsStats.map { (inputParameter: (Tuple3[Int, String, Int], Tuple4[Int, Double, Double, Double])) => {\n    val originalFunction = ((m: ((Int, String, Int), (Int, Double, Double, Double))) => (m._2._2, 1))(_)\n    val originalValue = originalFunction(inputParameter)\n    (Double.MinValue, originalValue._2)\n  } }\n  val sumMeanOfRatingsAllMovies: (Double, Int) = meanOfRatingsAllMovies.reduce { (m1: (Double, Int), m2: (Double, Int)) => (m1._1 + m2._1, m1._2 + m2._2) }\n  sumMeanOfRatingsAllMovies._1 / sumMeanOfRatingsAllMovies._2\n}",
          "originalCode" : "def meanOfMeansOfRatingsOfAllMovies(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))]) = {\n    val meanOfRatingsAllMovies: RDD[(Double, Int)] = ratingsStats.map((m: ((Int, String, Int), (Int, Double, Double, Double))) => (m._2._2, 1))\n    val sumMeanOfRatingsAllMovies: (Double, Int) = meanOfRatingsAllMovies.reduce((m1: (Double, Int), m2: (Double, Int)) => (m1._1 + m2._1, m1._2 + m2._2))\n    sumMeanOfRatingsAllMovies._1 / sumMeanOfRatingsAllMovies._2\n  }",
          "status" : "Killed"
        },
        {
          "id" : 120,
          "originalProgramId" : 5,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def meanOfMeansOfRatingsOfAllMovies(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))]) = {\n  val meanOfRatingsAllMovies: RDD[(Double, Int)] = ratingsStats.map { (inputParameter: (Tuple3[Int, String, Int], Tuple4[Int, Double, Double, Double])) => {\n    val originalFunction = ((m: ((Int, String, Int), (Int, Double, Double, Double))) => (m._2._2, 1))(_)\n    val originalValue = originalFunction(inputParameter)\n    (-originalValue._1, originalValue._2)\n  } }\n  val sumMeanOfRatingsAllMovies: (Double, Int) = meanOfRatingsAllMovies.reduce { (m1: (Double, Int), m2: (Double, Int)) => (m1._1 + m2._1, m1._2 + m2._2) }\n  sumMeanOfRatingsAllMovies._1 / sumMeanOfRatingsAllMovies._2\n}",
          "originalCode" : "def meanOfMeansOfRatingsOfAllMovies(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))]) = {\n    val meanOfRatingsAllMovies: RDD[(Double, Int)] = ratingsStats.map((m: ((Int, String, Int), (Int, Double, Double, Double))) => (m._2._2, 1))\n    val sumMeanOfRatingsAllMovies: (Double, Int) = meanOfRatingsAllMovies.reduce((m1: (Double, Int), m2: (Double, Int)) => (m1._1 + m2._1, m1._2 + m2._2))\n    sumMeanOfRatingsAllMovies._1 / sumMeanOfRatingsAllMovies._2\n  }",
          "status" : "Killed"
        },
        {
          "id" : 121,
          "originalProgramId" : 5,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def meanOfMeansOfRatingsOfAllMovies(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))]) = {\n  val meanOfRatingsAllMovies: RDD[(Double, Int)] = ratingsStats.map { (inputParameter: (Tuple3[Int, String, Int], Tuple4[Int, Double, Double, Double])) => {\n    val originalFunction = ((m: ((Int, String, Int), (Int, Double, Double, Double))) => (m._2._2, 1))(_)\n    val originalValue = originalFunction(inputParameter)\n    (originalValue._1, 0)\n  } }\n  val sumMeanOfRatingsAllMovies: (Double, Int) = meanOfRatingsAllMovies.reduce { (m1: (Double, Int), m2: (Double, Int)) => (m1._1 + m2._1, m1._2 + m2._2) }\n  sumMeanOfRatingsAllMovies._1 / sumMeanOfRatingsAllMovies._2\n}",
          "originalCode" : "def meanOfMeansOfRatingsOfAllMovies(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))]) = {\n    val meanOfRatingsAllMovies: RDD[(Double, Int)] = ratingsStats.map((m: ((Int, String, Int), (Int, Double, Double, Double))) => (m._2._2, 1))\n    val sumMeanOfRatingsAllMovies: (Double, Int) = meanOfRatingsAllMovies.reduce((m1: (Double, Int), m2: (Double, Int)) => (m1._1 + m2._1, m1._2 + m2._2))\n    sumMeanOfRatingsAllMovies._1 / sumMeanOfRatingsAllMovies._2\n  }",
          "status" : "Killed"
        },
        {
          "id" : 122,
          "originalProgramId" : 5,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def meanOfMeansOfRatingsOfAllMovies(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))]) = {\n  val meanOfRatingsAllMovies: RDD[(Double, Int)] = ratingsStats.map { (inputParameter: (Tuple3[Int, String, Int], Tuple4[Int, Double, Double, Double])) => {\n    val originalFunction = ((m: ((Int, String, Int), (Int, Double, Double, Double))) => (m._2._2, 1))(_)\n    val originalValue = originalFunction(inputParameter)\n    (originalValue._1, 1)\n  } }\n  val sumMeanOfRatingsAllMovies: (Double, Int) = meanOfRatingsAllMovies.reduce { (m1: (Double, Int), m2: (Double, Int)) => (m1._1 + m2._1, m1._2 + m2._2) }\n  sumMeanOfRatingsAllMovies._1 / sumMeanOfRatingsAllMovies._2\n}",
          "originalCode" : "def meanOfMeansOfRatingsOfAllMovies(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))]) = {\n    val meanOfRatingsAllMovies: RDD[(Double, Int)] = ratingsStats.map((m: ((Int, String, Int), (Int, Double, Double, Double))) => (m._2._2, 1))\n    val sumMeanOfRatingsAllMovies: (Double, Int) = meanOfRatingsAllMovies.reduce((m1: (Double, Int), m2: (Double, Int)) => (m1._1 + m2._1, m1._2 + m2._2))\n    sumMeanOfRatingsAllMovies._1 / sumMeanOfRatingsAllMovies._2\n  }",
          "status" : "Equivalent"
        },
        {
          "id" : 123,
          "originalProgramId" : 5,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def meanOfMeansOfRatingsOfAllMovies(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))]) = {\n  val meanOfRatingsAllMovies: RDD[(Double, Int)] = ratingsStats.map { (inputParameter: (Tuple3[Int, String, Int], Tuple4[Int, Double, Double, Double])) => {\n    val originalFunction = ((m: ((Int, String, Int), (Int, Double, Double, Double))) => (m._2._2, 1))(_)\n    val originalValue = originalFunction(inputParameter)\n    (originalValue._1, Int.MaxValue)\n  } }\n  val sumMeanOfRatingsAllMovies: (Double, Int) = meanOfRatingsAllMovies.reduce { (m1: (Double, Int), m2: (Double, Int)) => (m1._1 + m2._1, m1._2 + m2._2) }\n  sumMeanOfRatingsAllMovies._1 / sumMeanOfRatingsAllMovies._2\n}",
          "originalCode" : "def meanOfMeansOfRatingsOfAllMovies(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))]) = {\n    val meanOfRatingsAllMovies: RDD[(Double, Int)] = ratingsStats.map((m: ((Int, String, Int), (Int, Double, Double, Double))) => (m._2._2, 1))\n    val sumMeanOfRatingsAllMovies: (Double, Int) = meanOfRatingsAllMovies.reduce((m1: (Double, Int), m2: (Double, Int)) => (m1._1 + m2._1, m1._2 + m2._2))\n    sumMeanOfRatingsAllMovies._1 / sumMeanOfRatingsAllMovies._2\n  }",
          "status" : "Killed"
        },
        {
          "id" : 124,
          "originalProgramId" : 5,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def meanOfMeansOfRatingsOfAllMovies(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))]) = {\n  val meanOfRatingsAllMovies: RDD[(Double, Int)] = ratingsStats.map { (inputParameter: (Tuple3[Int, String, Int], Tuple4[Int, Double, Double, Double])) => {\n    val originalFunction = ((m: ((Int, String, Int), (Int, Double, Double, Double))) => (m._2._2, 1))(_)\n    val originalValue = originalFunction(inputParameter)\n    (originalValue._1, Int.MinValue)\n  } }\n  val sumMeanOfRatingsAllMovies: (Double, Int) = meanOfRatingsAllMovies.reduce { (m1: (Double, Int), m2: (Double, Int)) => (m1._1 + m2._1, m1._2 + m2._2) }\n  sumMeanOfRatingsAllMovies._1 / sumMeanOfRatingsAllMovies._2\n}",
          "originalCode" : "def meanOfMeansOfRatingsOfAllMovies(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))]) = {\n    val meanOfRatingsAllMovies: RDD[(Double, Int)] = ratingsStats.map((m: ((Int, String, Int), (Int, Double, Double, Double))) => (m._2._2, 1))\n    val sumMeanOfRatingsAllMovies: (Double, Int) = meanOfRatingsAllMovies.reduce((m1: (Double, Int), m2: (Double, Int)) => (m1._1 + m2._1, m1._2 + m2._2))\n    sumMeanOfRatingsAllMovies._1 / sumMeanOfRatingsAllMovies._2\n  }",
          "status" : "Killed"
        },
        {
          "id" : 125,
          "originalProgramId" : 5,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def meanOfMeansOfRatingsOfAllMovies(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))]) = {\n  val meanOfRatingsAllMovies: RDD[(Double, Int)] = ratingsStats.map { (inputParameter: (Tuple3[Int, String, Int], Tuple4[Int, Double, Double, Double])) => {\n    val originalFunction = ((m: ((Int, String, Int), (Int, Double, Double, Double))) => (m._2._2, 1))(_)\n    val originalValue = originalFunction(inputParameter)\n    (originalValue._1, -originalValue._2)\n  } }\n  val sumMeanOfRatingsAllMovies: (Double, Int) = meanOfRatingsAllMovies.reduce { (m1: (Double, Int), m2: (Double, Int)) => (m1._1 + m2._1, m1._2 + m2._2) }\n  sumMeanOfRatingsAllMovies._1 / sumMeanOfRatingsAllMovies._2\n}",
          "originalCode" : "def meanOfMeansOfRatingsOfAllMovies(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))]) = {\n    val meanOfRatingsAllMovies: RDD[(Double, Int)] = ratingsStats.map((m: ((Int, String, Int), (Int, Double, Double, Double))) => (m._2._2, 1))\n    val sumMeanOfRatingsAllMovies: (Double, Int) = meanOfRatingsAllMovies.reduce((m1: (Double, Int), m2: (Double, Int)) => (m1._1 + m2._1, m1._2 + m2._2))\n    sumMeanOfRatingsAllMovies._1 / sumMeanOfRatingsAllMovies._2\n  }",
          "status" : "Killed"
        },
        {
          "id" : 126,
          "originalProgramId" : 5,
          "mutationOperator" : "DTI",
          "mutationOperatorDescription" : "Distinct Transformation Insertion",
          "mutantCode" : "def meanOfMeansOfRatingsOfAllMovies(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))]) = {\n  val meanOfRatingsAllMovies: RDD[(Double, Int)] = ratingsStats.map { (m: ((Int, String, Int), (Int, Double, Double, Double))) => (m._2._2, 1) }.distinct()\n  val sumMeanOfRatingsAllMovies: (Double, Int) = meanOfRatingsAllMovies.reduce { (m1: (Double, Int), m2: (Double, Int)) => (m1._1 + m2._1, m1._2 + m2._2) }\n  sumMeanOfRatingsAllMovies._1 / sumMeanOfRatingsAllMovies._2\n}",
          "originalCode" : "def meanOfMeansOfRatingsOfAllMovies(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))]) = {\n    val meanOfRatingsAllMovies: RDD[(Double, Int)] = ratingsStats.map((m: ((Int, String, Int), (Int, Double, Double, Double))) => (m._2._2, 1))\n    val sumMeanOfRatingsAllMovies: (Double, Int) = meanOfRatingsAllMovies.reduce((m1: (Double, Int), m2: (Double, Int)) => (m1._1 + m2._1, m1._2 + m2._2))\n    sumMeanOfRatingsAllMovies._1 / sumMeanOfRatingsAllMovies._2\n  }",
          "status" : "Lived"
        }
      ],
      "removedMutants" : [
      ],
      "mutationOperatorsMetrics" : {
        "totalMutantsPerOperator" : {
          "FTD" : 0,
          "JTR" : 0,
          "UTR" : 0,
          "MTR" : 10,
          "UTD" : 0,
          "OTD" : 0,
          "BTR" : 0,
          "STR" : 0,
          "BTS" : 0,
          "ATR" : 0,
          "OTI" : 0,
          "DTI" : 1,
          "DTD" : 0,
          "NFTP" : 0,
          "UTS" : 0
        },
        "totalKilledMutantsPerOperator" : {
          "FTD" : 0,
          "JTR" : 0,
          "UTR" : 0,
          "MTR" : 9,
          "UTD" : 0,
          "OTD" : 0,
          "BTR" : 0,
          "STR" : 0,
          "BTS" : 0,
          "ATR" : 0,
          "OTI" : 0,
          "DTI" : 0,
          "DTD" : 0,
          "NFTP" : 0,
          "UTS" : 0
        },
        "totalLivedMutantsPerOperator" : {
          "FTD" : 0,
          "JTR" : 0,
          "UTR" : 0,
          "MTR" : 0,
          "UTD" : 0,
          "OTD" : 0,
          "BTR" : 0,
          "STR" : 0,
          "BTS" : 0,
          "ATR" : 0,
          "OTI" : 0,
          "DTI" : 1,
          "DTD" : 0,
          "NFTP" : 0,
          "UTS" : 0
        },
        "totalEquivalentMutantsPerOperator" : {
          "FTD" : 0,
          "JTR" : 0,
          "UTR" : 0,
          "MTR" : 1,
          "UTD" : 0,
          "OTD" : 0,
          "BTR" : 0,
          "STR" : 0,
          "BTS" : 0,
          "ATR" : 0,
          "OTI" : 0,
          "DTI" : 0,
          "DTD" : 0,
          "NFTP" : 0,
          "UTS" : 0
        },
        "totalErrorMutantsPerOperator" : {
          "FTD" : 0,
          "JTR" : 0,
          "UTR" : 0,
          "MTR" : 0,
          "UTD" : 0,
          "OTD" : 0,
          "BTR" : 0,
          "STR" : 0,
          "BTS" : 0,
          "ATR" : 0,
          "OTI" : 0,
          "DTI" : 0,
          "DTD" : 0,
          "NFTP" : 0,
          "UTS" : 0
        },
        "totalRemovedMutantsPerOperator" : {
          "FTD" : 0,
          "JTR" : 0,
          "UTR" : 0,
          "MTR" : 0,
          "UTD" : 0,
          "OTD" : 0,
          "BTR" : 0,
          "STR" : 0,
          "BTS" : 0,
          "ATR" : 0,
          "OTI" : 0,
          "DTI" : 0,
          "DTD" : 0,
          "NFTP" : 0,
          "UTS" : 0
        },
        "descriptionPerOperator" : {
          "FTD" : "Filter Transformation Deletion",
          "JTR" : "Join Transformation Replacement",
          "UTR" : "Unary Transformation Replacement",
          "MTR" : "Mapping Transformation Replacement",
          "UTD" : "Unary Transformation Deletion",
          "OTD" : "Order Transformation Deletion",
          "BTR" : "Binary Transformation Replacement",
          "STR" : "Set Transformation Replacement",
          "BTS" : "Binary Transformation Swap",
          "ATR" : "Aggregation Transformation Replacement",
          "OTI" : "Order Transformation Inversion",
          "DTI" : "Distinct Transformation Insertion",
          "DTD" : "Distinct Transformation Deletion",
          "NFTP" : "Negation of Filter Transformation Predicate",
          "UTS" : "Unary Transformation Swap"
        }
      },
      "totalDatasets" : 2,
      "totalTransformations" : 2,
      "totalMutants" : 11,
      "totalKilledMutants" : 9,
      "totalLivedMutants" : 1,
      "totalEquivalentMutants" : 1,
      "totalErrorMutants" : 0,
      "totalRemovedMutants" : 0,
      "mutationScore" : 0.9
    },
    {
      "id" : 6,
      "programSourceId" : 1,
      "name" : "bestMoviesDecade",
      "code" : "def bestMoviesDecade(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))], minimumVotesRequired: Double, meanOfMeansRatingsOfAllMovies: Double) = {\n    val ratingsStatisticsWithWR: RDD[((Int, String, Int), (Int, Double, Double, Double, Double))] = ratingsStats.map((s: ((Int, String, Int), (Int, Double, Double, Double))) => (s._1, (s._2._1, s._2._2, s._2._3, s._2._4, weighted_rating(s._2._2, s._2._1.toDouble, minimumVotesRequired, meanOfMeansRatingsOfAllMovies))))\n    val ratingsStatisticsWithWRDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = ratingsStatisticsWithWR.map((m: (((Int, String, Int), (Int, Double, Double, Double, Double)))) => (m._1._3 / 10 * 10, (m._1._2, m._2)))\n    val groupByDecade: RDD[(Int, Iterable[(String, (Int, Double, Double, Double, Double))])] = ratingsStatisticsWithWRDecade.groupByKey()\n    val bestMoviesDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = groupByDecade.map((j: (Int, Iterable[(String, (Int, Double, Double, Double, Double))])) => (j._1, j._2.reduce((j1, j2) => if (j1._2._5 > j2._2._5) j1 else j2)))\n    val bestMoviesDecadeSorted: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = bestMoviesDecade.sortByKey(true)\n    bestMoviesDecadeSorted\n  }",
      "datasets" : [
        {
          "id" : 27,
          "name" : "ratingsStats",
          "datasetType" : "RDD[(Tuple3[Int, String, Int], Tuple4[Int, Double, Double, Double])]",
          "inputDataset" : true,
          "outputDataset" : false
        },
        {
          "id" : 28,
          "name" : "ratingsStatisticsWithWR",
          "datasetType" : "RDD[(Tuple3[Int, String, Int], Tuple5[Int, Double, Double, Double, Double])]",
          "inputDataset" : false,
          "outputDataset" : false
        },
        {
          "id" : 29,
          "name" : "ratingsStatisticsWithWRDecade",
          "datasetType" : "RDD[(Int, (String, Tuple5[Int, Double, Double, Double, Double]))]",
          "inputDataset" : false,
          "outputDataset" : false
        },
        {
          "id" : 30,
          "name" : "groupByDecade",
          "datasetType" : "RDD[(Int, Iterable[(String, Tuple5[Int, Double, Double, Double, Double])])]",
          "inputDataset" : false,
          "outputDataset" : false
        },
        {
          "id" : 31,
          "name" : "bestMoviesDecade",
          "datasetType" : "RDD[(Int, (String, Tuple5[Int, Double, Double, Double, Double]))]",
          "inputDataset" : false,
          "outputDataset" : false
        },
        {
          "id" : 32,
          "name" : "bestMoviesDecadeSorted",
          "datasetType" : "RDD[(Int, (String, Tuple5[Int, Double, Double, Double, Double]))]",
          "inputDataset" : false,
          "outputDataset" : true
        }
      ],
      "transformations" : [
        {
          "id" : 20,
          "name" : "map",
          "inputTypes" : [
            "RDD[(Tuple3[Int, String, Int], Tuple4[Int, Double, Double, Double])]"
          ],
          "outputTypes" : [
            "RDD[(Tuple3[Int, String, Int], Tuple5[Int, Double, Double, Double, Double])]"
          ],
          "loadTransformation" : false
        },
        {
          "id" : 21,
          "name" : "map",
          "inputTypes" : [
            "RDD[(Tuple3[Int, String, Int], Tuple5[Int, Double, Double, Double, Double])]"
          ],
          "outputTypes" : [
            "RDD[(Int, (String, Tuple5[Int, Double, Double, Double, Double]))]"
          ],
          "loadTransformation" : false
        },
        {
          "id" : 22,
          "name" : "groupByKey",
          "inputTypes" : [
            "RDD[(Int, (String, Tuple5[Int, Double, Double, Double, Double]))]"
          ],
          "outputTypes" : [
            "RDD[(Int, Iterable[(String, Tuple5[Int, Double, Double, Double, Double])])]"
          ],
          "loadTransformation" : false
        },
        {
          "id" : 23,
          "name" : "map",
          "inputTypes" : [
            "RDD[(Int, Iterable[(String, Tuple5[Int, Double, Double, Double, Double])])]"
          ],
          "outputTypes" : [
            "RDD[(Int, (String, Tuple5[Int, Double, Double, Double, Double]))]"
          ],
          "loadTransformation" : false
        },
        {
          "id" : 24,
          "name" : "sortByKey",
          "inputTypes" : [
            "RDD[(Int, (String, Tuple5[Int, Double, Double, Double, Double]))]"
          ],
          "outputTypes" : [
            "RDD[(Int, (String, Tuple5[Int, Double, Double, Double, Double]))]"
          ],
          "loadTransformation" : false
        }
      ],
      "edges" : [
        {
          "id" : 39,
          "datasetId" : 27,
          "transformationId" : 20,
          "direction" : "DatasetToTransformation"
        },
        {
          "id" : 40,
          "datasetId" : 28,
          "transformationId" : 20,
          "direction" : "TransformationToDataset"
        },
        {
          "id" : 41,
          "datasetId" : 28,
          "transformationId" : 21,
          "direction" : "DatasetToTransformation"
        },
        {
          "id" : 42,
          "datasetId" : 29,
          "transformationId" : 21,
          "direction" : "TransformationToDataset"
        },
        {
          "id" : 43,
          "datasetId" : 29,
          "transformationId" : 22,
          "direction" : "DatasetToTransformation"
        },
        {
          "id" : 44,
          "datasetId" : 30,
          "transformationId" : 22,
          "direction" : "TransformationToDataset"
        },
        {
          "id" : 45,
          "datasetId" : 30,
          "transformationId" : 23,
          "direction" : "DatasetToTransformation"
        },
        {
          "id" : 46,
          "datasetId" : 31,
          "transformationId" : 23,
          "direction" : "TransformationToDataset"
        },
        {
          "id" : 47,
          "datasetId" : 31,
          "transformationId" : 24,
          "direction" : "DatasetToTransformation"
        },
        {
          "id" : 48,
          "datasetId" : 32,
          "transformationId" : 24,
          "direction" : "TransformationToDataset"
        }
      ],
      "mutants" : [
        {
          "id" : 127,
          "originalProgramId" : 6,
          "mutationOperator" : "UTD",
          "mutationOperatorDescription" : "Unary Transformation Deletion",
          "mutantCode" : "def bestMoviesDecade(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))], minimumVotesRequired: Double, meanOfMeansRatingsOfAllMovies: Double) = {\n  val ratingsStatisticsWithWR: RDD[((Int, String, Int), (Int, Double, Double, Double, Double))] = ratingsStats.map { (s: ((Int, String, Int), (Int, Double, Double, Double))) => (s._1, (s._2._1, s._2._2, s._2._3, s._2._4, weighted_rating(s._2._2, s._2._1.toDouble, minimumVotesRequired, meanOfMeansRatingsOfAllMovies))) }\n  val ratingsStatisticsWithWRDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = ratingsStatisticsWithWR.map { (m: ((Int, String, Int), (Int, Double, Double, Double, Double))) => (m._1._3 / 10 * 10, (m._1._2, m._2)) }\n  val groupByDecade: RDD[(Int, Iterable[(String, (Int, Double, Double, Double, Double))])] = ratingsStatisticsWithWRDecade.groupByKey()\n  val bestMoviesDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = groupByDecade.map { (j: (Int, Iterable[(String, (Int, Double, Double, Double, Double))])) => (j._1, j._2.reduce((j1, j2) => if (j1._2._5 > j2._2._5) j1 else j2)) }\n  val bestMoviesDecadeSorted: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = bestMoviesDecade\n  bestMoviesDecadeSorted\n}",
          "originalCode" : "def bestMoviesDecade(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))], minimumVotesRequired: Double, meanOfMeansRatingsOfAllMovies: Double) = {\n    val ratingsStatisticsWithWR: RDD[((Int, String, Int), (Int, Double, Double, Double, Double))] = ratingsStats.map((s: ((Int, String, Int), (Int, Double, Double, Double))) => (s._1, (s._2._1, s._2._2, s._2._3, s._2._4, weighted_rating(s._2._2, s._2._1.toDouble, minimumVotesRequired, meanOfMeansRatingsOfAllMovies))))\n    val ratingsStatisticsWithWRDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = ratingsStatisticsWithWR.map((m: (((Int, String, Int), (Int, Double, Double, Double, Double)))) => (m._1._3 / 10 * 10, (m._1._2, m._2)))\n    val groupByDecade: RDD[(Int, Iterable[(String, (Int, Double, Double, Double, Double))])] = ratingsStatisticsWithWRDecade.groupByKey()\n    val bestMoviesDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = groupByDecade.map((j: (Int, Iterable[(String, (Int, Double, Double, Double, Double))])) => (j._1, j._2.reduce((j1, j2) => if (j1._2._5 > j2._2._5) j1 else j2)))\n    val bestMoviesDecadeSorted: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = bestMoviesDecade.sortByKey(true)\n    bestMoviesDecadeSorted\n  }",
          "status" : "Lived"
        },
        {
          "id" : 128,
          "originalProgramId" : 6,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def bestMoviesDecade(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))], minimumVotesRequired: Double, meanOfMeansRatingsOfAllMovies: Double) = {\n  val ratingsStatisticsWithWR: RDD[((Int, String, Int), (Int, Double, Double, Double, Double))] = ratingsStats.map { (s: ((Int, String, Int), (Int, Double, Double, Double))) => (s._1, (s._2._1, s._2._2, s._2._3, s._2._4, weighted_rating(s._2._2, s._2._1.toDouble, minimumVotesRequired, meanOfMeansRatingsOfAllMovies))) }\n  val ratingsStatisticsWithWRDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = ratingsStatisticsWithWR.map { (inputParameter: (Tuple3[Int, String, Int], Tuple5[Int, Double, Double, Double, Double])) => {\n    val originalFunction = ((m: ((Int, String, Int), (Int, Double, Double, Double, Double))) => (m._1._3 / 10 * 10, (m._1._2, m._2)))(_)\n    val originalValue = originalFunction(inputParameter)\n    (0, originalValue._2)\n  } }\n  val groupByDecade: RDD[(Int, Iterable[(String, (Int, Double, Double, Double, Double))])] = ratingsStatisticsWithWRDecade.groupByKey()\n  val bestMoviesDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = groupByDecade.map { (j: (Int, Iterable[(String, (Int, Double, Double, Double, Double))])) => (j._1, j._2.reduce((j1, j2) => if (j1._2._5 > j2._2._5) j1 else j2)) }\n  val bestMoviesDecadeSorted: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = bestMoviesDecade.sortByKey(true)\n  bestMoviesDecadeSorted\n}",
          "originalCode" : "def bestMoviesDecade(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))], minimumVotesRequired: Double, meanOfMeansRatingsOfAllMovies: Double) = {\n    val ratingsStatisticsWithWR: RDD[((Int, String, Int), (Int, Double, Double, Double, Double))] = ratingsStats.map((s: ((Int, String, Int), (Int, Double, Double, Double))) => (s._1, (s._2._1, s._2._2, s._2._3, s._2._4, weighted_rating(s._2._2, s._2._1.toDouble, minimumVotesRequired, meanOfMeansRatingsOfAllMovies))))\n    val ratingsStatisticsWithWRDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = ratingsStatisticsWithWR.map((m: (((Int, String, Int), (Int, Double, Double, Double, Double)))) => (m._1._3 / 10 * 10, (m._1._2, m._2)))\n    val groupByDecade: RDD[(Int, Iterable[(String, (Int, Double, Double, Double, Double))])] = ratingsStatisticsWithWRDecade.groupByKey()\n    val bestMoviesDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = groupByDecade.map((j: (Int, Iterable[(String, (Int, Double, Double, Double, Double))])) => (j._1, j._2.reduce((j1, j2) => if (j1._2._5 > j2._2._5) j1 else j2)))\n    val bestMoviesDecadeSorted: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = bestMoviesDecade.sortByKey(true)\n    bestMoviesDecadeSorted\n  }",
          "status" : "Killed"
        },
        {
          "id" : 129,
          "originalProgramId" : 6,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def bestMoviesDecade(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))], minimumVotesRequired: Double, meanOfMeansRatingsOfAllMovies: Double) = {\n  val ratingsStatisticsWithWR: RDD[((Int, String, Int), (Int, Double, Double, Double, Double))] = ratingsStats.map { (s: ((Int, String, Int), (Int, Double, Double, Double))) => (s._1, (s._2._1, s._2._2, s._2._3, s._2._4, weighted_rating(s._2._2, s._2._1.toDouble, minimumVotesRequired, meanOfMeansRatingsOfAllMovies))) }\n  val ratingsStatisticsWithWRDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = ratingsStatisticsWithWR.map { (inputParameter: (Tuple3[Int, String, Int], Tuple5[Int, Double, Double, Double, Double])) => {\n    val originalFunction = ((m: ((Int, String, Int), (Int, Double, Double, Double, Double))) => (m._1._3 / 10 * 10, (m._1._2, m._2)))(_)\n    val originalValue = originalFunction(inputParameter)\n    (1, originalValue._2)\n  } }\n  val groupByDecade: RDD[(Int, Iterable[(String, (Int, Double, Double, Double, Double))])] = ratingsStatisticsWithWRDecade.groupByKey()\n  val bestMoviesDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = groupByDecade.map { (j: (Int, Iterable[(String, (Int, Double, Double, Double, Double))])) => (j._1, j._2.reduce((j1, j2) => if (j1._2._5 > j2._2._5) j1 else j2)) }\n  val bestMoviesDecadeSorted: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = bestMoviesDecade.sortByKey(true)\n  bestMoviesDecadeSorted\n}",
          "originalCode" : "def bestMoviesDecade(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))], minimumVotesRequired: Double, meanOfMeansRatingsOfAllMovies: Double) = {\n    val ratingsStatisticsWithWR: RDD[((Int, String, Int), (Int, Double, Double, Double, Double))] = ratingsStats.map((s: ((Int, String, Int), (Int, Double, Double, Double))) => (s._1, (s._2._1, s._2._2, s._2._3, s._2._4, weighted_rating(s._2._2, s._2._1.toDouble, minimumVotesRequired, meanOfMeansRatingsOfAllMovies))))\n    val ratingsStatisticsWithWRDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = ratingsStatisticsWithWR.map((m: (((Int, String, Int), (Int, Double, Double, Double, Double)))) => (m._1._3 / 10 * 10, (m._1._2, m._2)))\n    val groupByDecade: RDD[(Int, Iterable[(String, (Int, Double, Double, Double, Double))])] = ratingsStatisticsWithWRDecade.groupByKey()\n    val bestMoviesDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = groupByDecade.map((j: (Int, Iterable[(String, (Int, Double, Double, Double, Double))])) => (j._1, j._2.reduce((j1, j2) => if (j1._2._5 > j2._2._5) j1 else j2)))\n    val bestMoviesDecadeSorted: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = bestMoviesDecade.sortByKey(true)\n    bestMoviesDecadeSorted\n  }",
          "status" : "Killed"
        },
        {
          "id" : 130,
          "originalProgramId" : 6,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def bestMoviesDecade(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))], minimumVotesRequired: Double, meanOfMeansRatingsOfAllMovies: Double) = {\n  val ratingsStatisticsWithWR: RDD[((Int, String, Int), (Int, Double, Double, Double, Double))] = ratingsStats.map { (s: ((Int, String, Int), (Int, Double, Double, Double))) => (s._1, (s._2._1, s._2._2, s._2._3, s._2._4, weighted_rating(s._2._2, s._2._1.toDouble, minimumVotesRequired, meanOfMeansRatingsOfAllMovies))) }\n  val ratingsStatisticsWithWRDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = ratingsStatisticsWithWR.map { (inputParameter: (Tuple3[Int, String, Int], Tuple5[Int, Double, Double, Double, Double])) => {\n    val originalFunction = ((m: ((Int, String, Int), (Int, Double, Double, Double, Double))) => (m._1._3 / 10 * 10, (m._1._2, m._2)))(_)\n    val originalValue = originalFunction(inputParameter)\n    (Int.MaxValue, originalValue._2)\n  } }\n  val groupByDecade: RDD[(Int, Iterable[(String, (Int, Double, Double, Double, Double))])] = ratingsStatisticsWithWRDecade.groupByKey()\n  val bestMoviesDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = groupByDecade.map { (j: (Int, Iterable[(String, (Int, Double, Double, Double, Double))])) => (j._1, j._2.reduce((j1, j2) => if (j1._2._5 > j2._2._5) j1 else j2)) }\n  val bestMoviesDecadeSorted: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = bestMoviesDecade.sortByKey(true)\n  bestMoviesDecadeSorted\n}",
          "originalCode" : "def bestMoviesDecade(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))], minimumVotesRequired: Double, meanOfMeansRatingsOfAllMovies: Double) = {\n    val ratingsStatisticsWithWR: RDD[((Int, String, Int), (Int, Double, Double, Double, Double))] = ratingsStats.map((s: ((Int, String, Int), (Int, Double, Double, Double))) => (s._1, (s._2._1, s._2._2, s._2._3, s._2._4, weighted_rating(s._2._2, s._2._1.toDouble, minimumVotesRequired, meanOfMeansRatingsOfAllMovies))))\n    val ratingsStatisticsWithWRDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = ratingsStatisticsWithWR.map((m: (((Int, String, Int), (Int, Double, Double, Double, Double)))) => (m._1._3 / 10 * 10, (m._1._2, m._2)))\n    val groupByDecade: RDD[(Int, Iterable[(String, (Int, Double, Double, Double, Double))])] = ratingsStatisticsWithWRDecade.groupByKey()\n    val bestMoviesDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = groupByDecade.map((j: (Int, Iterable[(String, (Int, Double, Double, Double, Double))])) => (j._1, j._2.reduce((j1, j2) => if (j1._2._5 > j2._2._5) j1 else j2)))\n    val bestMoviesDecadeSorted: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = bestMoviesDecade.sortByKey(true)\n    bestMoviesDecadeSorted\n  }",
          "status" : "Killed"
        },
        {
          "id" : 131,
          "originalProgramId" : 6,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def bestMoviesDecade(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))], minimumVotesRequired: Double, meanOfMeansRatingsOfAllMovies: Double) = {\n  val ratingsStatisticsWithWR: RDD[((Int, String, Int), (Int, Double, Double, Double, Double))] = ratingsStats.map { (s: ((Int, String, Int), (Int, Double, Double, Double))) => (s._1, (s._2._1, s._2._2, s._2._3, s._2._4, weighted_rating(s._2._2, s._2._1.toDouble, minimumVotesRequired, meanOfMeansRatingsOfAllMovies))) }\n  val ratingsStatisticsWithWRDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = ratingsStatisticsWithWR.map { (inputParameter: (Tuple3[Int, String, Int], Tuple5[Int, Double, Double, Double, Double])) => {\n    val originalFunction = ((m: ((Int, String, Int), (Int, Double, Double, Double, Double))) => (m._1._3 / 10 * 10, (m._1._2, m._2)))(_)\n    val originalValue = originalFunction(inputParameter)\n    (Int.MinValue, originalValue._2)\n  } }\n  val groupByDecade: RDD[(Int, Iterable[(String, (Int, Double, Double, Double, Double))])] = ratingsStatisticsWithWRDecade.groupByKey()\n  val bestMoviesDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = groupByDecade.map { (j: (Int, Iterable[(String, (Int, Double, Double, Double, Double))])) => (j._1, j._2.reduce((j1, j2) => if (j1._2._5 > j2._2._5) j1 else j2)) }\n  val bestMoviesDecadeSorted: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = bestMoviesDecade.sortByKey(true)\n  bestMoviesDecadeSorted\n}",
          "originalCode" : "def bestMoviesDecade(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))], minimumVotesRequired: Double, meanOfMeansRatingsOfAllMovies: Double) = {\n    val ratingsStatisticsWithWR: RDD[((Int, String, Int), (Int, Double, Double, Double, Double))] = ratingsStats.map((s: ((Int, String, Int), (Int, Double, Double, Double))) => (s._1, (s._2._1, s._2._2, s._2._3, s._2._4, weighted_rating(s._2._2, s._2._1.toDouble, minimumVotesRequired, meanOfMeansRatingsOfAllMovies))))\n    val ratingsStatisticsWithWRDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = ratingsStatisticsWithWR.map((m: (((Int, String, Int), (Int, Double, Double, Double, Double)))) => (m._1._3 / 10 * 10, (m._1._2, m._2)))\n    val groupByDecade: RDD[(Int, Iterable[(String, (Int, Double, Double, Double, Double))])] = ratingsStatisticsWithWRDecade.groupByKey()\n    val bestMoviesDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = groupByDecade.map((j: (Int, Iterable[(String, (Int, Double, Double, Double, Double))])) => (j._1, j._2.reduce((j1, j2) => if (j1._2._5 > j2._2._5) j1 else j2)))\n    val bestMoviesDecadeSorted: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = bestMoviesDecade.sortByKey(true)\n    bestMoviesDecadeSorted\n  }",
          "status" : "Killed"
        },
        {
          "id" : 132,
          "originalProgramId" : 6,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def bestMoviesDecade(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))], minimumVotesRequired: Double, meanOfMeansRatingsOfAllMovies: Double) = {\n  val ratingsStatisticsWithWR: RDD[((Int, String, Int), (Int, Double, Double, Double, Double))] = ratingsStats.map { (s: ((Int, String, Int), (Int, Double, Double, Double))) => (s._1, (s._2._1, s._2._2, s._2._3, s._2._4, weighted_rating(s._2._2, s._2._1.toDouble, minimumVotesRequired, meanOfMeansRatingsOfAllMovies))) }\n  val ratingsStatisticsWithWRDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = ratingsStatisticsWithWR.map { (inputParameter: (Tuple3[Int, String, Int], Tuple5[Int, Double, Double, Double, Double])) => {\n    val originalFunction = ((m: ((Int, String, Int), (Int, Double, Double, Double, Double))) => (m._1._3 / 10 * 10, (m._1._2, m._2)))(_)\n    val originalValue = originalFunction(inputParameter)\n    (-originalValue._1, originalValue._2)\n  } }\n  val groupByDecade: RDD[(Int, Iterable[(String, (Int, Double, Double, Double, Double))])] = ratingsStatisticsWithWRDecade.groupByKey()\n  val bestMoviesDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = groupByDecade.map { (j: (Int, Iterable[(String, (Int, Double, Double, Double, Double))])) => (j._1, j._2.reduce((j1, j2) => if (j1._2._5 > j2._2._5) j1 else j2)) }\n  val bestMoviesDecadeSorted: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = bestMoviesDecade.sortByKey(true)\n  bestMoviesDecadeSorted\n}",
          "originalCode" : "def bestMoviesDecade(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))], minimumVotesRequired: Double, meanOfMeansRatingsOfAllMovies: Double) = {\n    val ratingsStatisticsWithWR: RDD[((Int, String, Int), (Int, Double, Double, Double, Double))] = ratingsStats.map((s: ((Int, String, Int), (Int, Double, Double, Double))) => (s._1, (s._2._1, s._2._2, s._2._3, s._2._4, weighted_rating(s._2._2, s._2._1.toDouble, minimumVotesRequired, meanOfMeansRatingsOfAllMovies))))\n    val ratingsStatisticsWithWRDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = ratingsStatisticsWithWR.map((m: (((Int, String, Int), (Int, Double, Double, Double, Double)))) => (m._1._3 / 10 * 10, (m._1._2, m._2)))\n    val groupByDecade: RDD[(Int, Iterable[(String, (Int, Double, Double, Double, Double))])] = ratingsStatisticsWithWRDecade.groupByKey()\n    val bestMoviesDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = groupByDecade.map((j: (Int, Iterable[(String, (Int, Double, Double, Double, Double))])) => (j._1, j._2.reduce((j1, j2) => if (j1._2._5 > j2._2._5) j1 else j2)))\n    val bestMoviesDecadeSorted: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = bestMoviesDecade.sortByKey(true)\n    bestMoviesDecadeSorted\n  }",
          "status" : "Killed"
        },
        {
          "id" : 133,
          "originalProgramId" : 6,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def bestMoviesDecade(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))], minimumVotesRequired: Double, meanOfMeansRatingsOfAllMovies: Double) = {\n  val ratingsStatisticsWithWR: RDD[((Int, String, Int), (Int, Double, Double, Double, Double))] = ratingsStats.map { (s: ((Int, String, Int), (Int, Double, Double, Double))) => (s._1, (s._2._1, s._2._2, s._2._3, s._2._4, weighted_rating(s._2._2, s._2._1.toDouble, minimumVotesRequired, meanOfMeansRatingsOfAllMovies))) }\n  val ratingsStatisticsWithWRDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = ratingsStatisticsWithWR.map { (inputParameter: (Tuple3[Int, String, Int], Tuple5[Int, Double, Double, Double, Double])) => {\n    val originalFunction = ((m: ((Int, String, Int), (Int, Double, Double, Double, Double))) => (m._1._3 / 10 * 10, (m._1._2, m._2)))(_)\n    val originalValue = originalFunction(inputParameter)\n    (originalValue._1, (\"\", originalValue._2._2))\n  } }\n  val groupByDecade: RDD[(Int, Iterable[(String, (Int, Double, Double, Double, Double))])] = ratingsStatisticsWithWRDecade.groupByKey()\n  val bestMoviesDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = groupByDecade.map { (j: (Int, Iterable[(String, (Int, Double, Double, Double, Double))])) => (j._1, j._2.reduce((j1, j2) => if (j1._2._5 > j2._2._5) j1 else j2)) }\n  val bestMoviesDecadeSorted: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = bestMoviesDecade.sortByKey(true)\n  bestMoviesDecadeSorted\n}",
          "originalCode" : "def bestMoviesDecade(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))], minimumVotesRequired: Double, meanOfMeansRatingsOfAllMovies: Double) = {\n    val ratingsStatisticsWithWR: RDD[((Int, String, Int), (Int, Double, Double, Double, Double))] = ratingsStats.map((s: ((Int, String, Int), (Int, Double, Double, Double))) => (s._1, (s._2._1, s._2._2, s._2._3, s._2._4, weighted_rating(s._2._2, s._2._1.toDouble, minimumVotesRequired, meanOfMeansRatingsOfAllMovies))))\n    val ratingsStatisticsWithWRDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = ratingsStatisticsWithWR.map((m: (((Int, String, Int), (Int, Double, Double, Double, Double)))) => (m._1._3 / 10 * 10, (m._1._2, m._2)))\n    val groupByDecade: RDD[(Int, Iterable[(String, (Int, Double, Double, Double, Double))])] = ratingsStatisticsWithWRDecade.groupByKey()\n    val bestMoviesDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = groupByDecade.map((j: (Int, Iterable[(String, (Int, Double, Double, Double, Double))])) => (j._1, j._2.reduce((j1, j2) => if (j1._2._5 > j2._2._5) j1 else j2)))\n    val bestMoviesDecadeSorted: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = bestMoviesDecade.sortByKey(true)\n    bestMoviesDecadeSorted\n  }",
          "status" : "Killed"
        },
        {
          "id" : 134,
          "originalProgramId" : 6,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def bestMoviesDecade(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))], minimumVotesRequired: Double, meanOfMeansRatingsOfAllMovies: Double) = {\n  val ratingsStatisticsWithWR: RDD[((Int, String, Int), (Int, Double, Double, Double, Double))] = ratingsStats.map { (s: ((Int, String, Int), (Int, Double, Double, Double))) => (s._1, (s._2._1, s._2._2, s._2._3, s._2._4, weighted_rating(s._2._2, s._2._1.toDouble, minimumVotesRequired, meanOfMeansRatingsOfAllMovies))) }\n  val ratingsStatisticsWithWRDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = ratingsStatisticsWithWR.map { (m: ((Int, String, Int), (Int, Double, Double, Double, Double))) => (m._1._3 / 10 * 10, (m._1._2, m._2)) }\n  val groupByDecade: RDD[(Int, Iterable[(String, (Int, Double, Double, Double, Double))])] = ratingsStatisticsWithWRDecade.groupByKey()\n  val bestMoviesDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = groupByDecade.map { (inputParameter: (Int, Iterable[(String, Tuple5[Int, Double, Double, Double, Double])])) => {\n    val originalFunction = ((j: (Int, Iterable[(String, (Int, Double, Double, Double, Double))])) => (j._1, j._2.reduce((j1, j2) => if (j1._2._5 > j2._2._5) j1 else j2)))(_)\n    val originalValue = originalFunction(inputParameter)\n    (0, originalValue._2)\n  } }\n  val bestMoviesDecadeSorted: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = bestMoviesDecade.sortByKey(true)\n  bestMoviesDecadeSorted\n}",
          "originalCode" : "def bestMoviesDecade(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))], minimumVotesRequired: Double, meanOfMeansRatingsOfAllMovies: Double) = {\n    val ratingsStatisticsWithWR: RDD[((Int, String, Int), (Int, Double, Double, Double, Double))] = ratingsStats.map((s: ((Int, String, Int), (Int, Double, Double, Double))) => (s._1, (s._2._1, s._2._2, s._2._3, s._2._4, weighted_rating(s._2._2, s._2._1.toDouble, minimumVotesRequired, meanOfMeansRatingsOfAllMovies))))\n    val ratingsStatisticsWithWRDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = ratingsStatisticsWithWR.map((m: (((Int, String, Int), (Int, Double, Double, Double, Double)))) => (m._1._3 / 10 * 10, (m._1._2, m._2)))\n    val groupByDecade: RDD[(Int, Iterable[(String, (Int, Double, Double, Double, Double))])] = ratingsStatisticsWithWRDecade.groupByKey()\n    val bestMoviesDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = groupByDecade.map((j: (Int, Iterable[(String, (Int, Double, Double, Double, Double))])) => (j._1, j._2.reduce((j1, j2) => if (j1._2._5 > j2._2._5) j1 else j2)))\n    val bestMoviesDecadeSorted: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = bestMoviesDecade.sortByKey(true)\n    bestMoviesDecadeSorted\n  }",
          "status" : "Killed"
        },
        {
          "id" : 135,
          "originalProgramId" : 6,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def bestMoviesDecade(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))], minimumVotesRequired: Double, meanOfMeansRatingsOfAllMovies: Double) = {\n  val ratingsStatisticsWithWR: RDD[((Int, String, Int), (Int, Double, Double, Double, Double))] = ratingsStats.map { (s: ((Int, String, Int), (Int, Double, Double, Double))) => (s._1, (s._2._1, s._2._2, s._2._3, s._2._4, weighted_rating(s._2._2, s._2._1.toDouble, minimumVotesRequired, meanOfMeansRatingsOfAllMovies))) }\n  val ratingsStatisticsWithWRDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = ratingsStatisticsWithWR.map { (m: ((Int, String, Int), (Int, Double, Double, Double, Double))) => (m._1._3 / 10 * 10, (m._1._2, m._2)) }\n  val groupByDecade: RDD[(Int, Iterable[(String, (Int, Double, Double, Double, Double))])] = ratingsStatisticsWithWRDecade.groupByKey()\n  val bestMoviesDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = groupByDecade.map { (inputParameter: (Int, Iterable[(String, Tuple5[Int, Double, Double, Double, Double])])) => {\n    val originalFunction = ((j: (Int, Iterable[(String, (Int, Double, Double, Double, Double))])) => (j._1, j._2.reduce((j1, j2) => if (j1._2._5 > j2._2._5) j1 else j2)))(_)\n    val originalValue = originalFunction(inputParameter)\n    (1, originalValue._2)\n  } }\n  val bestMoviesDecadeSorted: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = bestMoviesDecade.sortByKey(true)\n  bestMoviesDecadeSorted\n}",
          "originalCode" : "def bestMoviesDecade(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))], minimumVotesRequired: Double, meanOfMeansRatingsOfAllMovies: Double) = {\n    val ratingsStatisticsWithWR: RDD[((Int, String, Int), (Int, Double, Double, Double, Double))] = ratingsStats.map((s: ((Int, String, Int), (Int, Double, Double, Double))) => (s._1, (s._2._1, s._2._2, s._2._3, s._2._4, weighted_rating(s._2._2, s._2._1.toDouble, minimumVotesRequired, meanOfMeansRatingsOfAllMovies))))\n    val ratingsStatisticsWithWRDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = ratingsStatisticsWithWR.map((m: (((Int, String, Int), (Int, Double, Double, Double, Double)))) => (m._1._3 / 10 * 10, (m._1._2, m._2)))\n    val groupByDecade: RDD[(Int, Iterable[(String, (Int, Double, Double, Double, Double))])] = ratingsStatisticsWithWRDecade.groupByKey()\n    val bestMoviesDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = groupByDecade.map((j: (Int, Iterable[(String, (Int, Double, Double, Double, Double))])) => (j._1, j._2.reduce((j1, j2) => if (j1._2._5 > j2._2._5) j1 else j2)))\n    val bestMoviesDecadeSorted: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = bestMoviesDecade.sortByKey(true)\n    bestMoviesDecadeSorted\n  }",
          "status" : "Killed"
        },
        {
          "id" : 136,
          "originalProgramId" : 6,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def bestMoviesDecade(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))], minimumVotesRequired: Double, meanOfMeansRatingsOfAllMovies: Double) = {\n  val ratingsStatisticsWithWR: RDD[((Int, String, Int), (Int, Double, Double, Double, Double))] = ratingsStats.map { (s: ((Int, String, Int), (Int, Double, Double, Double))) => (s._1, (s._2._1, s._2._2, s._2._3, s._2._4, weighted_rating(s._2._2, s._2._1.toDouble, minimumVotesRequired, meanOfMeansRatingsOfAllMovies))) }\n  val ratingsStatisticsWithWRDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = ratingsStatisticsWithWR.map { (m: ((Int, String, Int), (Int, Double, Double, Double, Double))) => (m._1._3 / 10 * 10, (m._1._2, m._2)) }\n  val groupByDecade: RDD[(Int, Iterable[(String, (Int, Double, Double, Double, Double))])] = ratingsStatisticsWithWRDecade.groupByKey()\n  val bestMoviesDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = groupByDecade.map { (inputParameter: (Int, Iterable[(String, Tuple5[Int, Double, Double, Double, Double])])) => {\n    val originalFunction = ((j: (Int, Iterable[(String, (Int, Double, Double, Double, Double))])) => (j._1, j._2.reduce((j1, j2) => if (j1._2._5 > j2._2._5) j1 else j2)))(_)\n    val originalValue = originalFunction(inputParameter)\n    (Int.MaxValue, originalValue._2)\n  } }\n  val bestMoviesDecadeSorted: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = bestMoviesDecade.sortByKey(true)\n  bestMoviesDecadeSorted\n}",
          "originalCode" : "def bestMoviesDecade(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))], minimumVotesRequired: Double, meanOfMeansRatingsOfAllMovies: Double) = {\n    val ratingsStatisticsWithWR: RDD[((Int, String, Int), (Int, Double, Double, Double, Double))] = ratingsStats.map((s: ((Int, String, Int), (Int, Double, Double, Double))) => (s._1, (s._2._1, s._2._2, s._2._3, s._2._4, weighted_rating(s._2._2, s._2._1.toDouble, minimumVotesRequired, meanOfMeansRatingsOfAllMovies))))\n    val ratingsStatisticsWithWRDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = ratingsStatisticsWithWR.map((m: (((Int, String, Int), (Int, Double, Double, Double, Double)))) => (m._1._3 / 10 * 10, (m._1._2, m._2)))\n    val groupByDecade: RDD[(Int, Iterable[(String, (Int, Double, Double, Double, Double))])] = ratingsStatisticsWithWRDecade.groupByKey()\n    val bestMoviesDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = groupByDecade.map((j: (Int, Iterable[(String, (Int, Double, Double, Double, Double))])) => (j._1, j._2.reduce((j1, j2) => if (j1._2._5 > j2._2._5) j1 else j2)))\n    val bestMoviesDecadeSorted: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = bestMoviesDecade.sortByKey(true)\n    bestMoviesDecadeSorted\n  }",
          "status" : "Killed"
        },
        {
          "id" : 137,
          "originalProgramId" : 6,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def bestMoviesDecade(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))], minimumVotesRequired: Double, meanOfMeansRatingsOfAllMovies: Double) = {\n  val ratingsStatisticsWithWR: RDD[((Int, String, Int), (Int, Double, Double, Double, Double))] = ratingsStats.map { (s: ((Int, String, Int), (Int, Double, Double, Double))) => (s._1, (s._2._1, s._2._2, s._2._3, s._2._4, weighted_rating(s._2._2, s._2._1.toDouble, minimumVotesRequired, meanOfMeansRatingsOfAllMovies))) }\n  val ratingsStatisticsWithWRDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = ratingsStatisticsWithWR.map { (m: ((Int, String, Int), (Int, Double, Double, Double, Double))) => (m._1._3 / 10 * 10, (m._1._2, m._2)) }\n  val groupByDecade: RDD[(Int, Iterable[(String, (Int, Double, Double, Double, Double))])] = ratingsStatisticsWithWRDecade.groupByKey()\n  val bestMoviesDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = groupByDecade.map { (inputParameter: (Int, Iterable[(String, Tuple5[Int, Double, Double, Double, Double])])) => {\n    val originalFunction = ((j: (Int, Iterable[(String, (Int, Double, Double, Double, Double))])) => (j._1, j._2.reduce((j1, j2) => if (j1._2._5 > j2._2._5) j1 else j2)))(_)\n    val originalValue = originalFunction(inputParameter)\n    (Int.MinValue, originalValue._2)\n  } }\n  val bestMoviesDecadeSorted: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = bestMoviesDecade.sortByKey(true)\n  bestMoviesDecadeSorted\n}",
          "originalCode" : "def bestMoviesDecade(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))], minimumVotesRequired: Double, meanOfMeansRatingsOfAllMovies: Double) = {\n    val ratingsStatisticsWithWR: RDD[((Int, String, Int), (Int, Double, Double, Double, Double))] = ratingsStats.map((s: ((Int, String, Int), (Int, Double, Double, Double))) => (s._1, (s._2._1, s._2._2, s._2._3, s._2._4, weighted_rating(s._2._2, s._2._1.toDouble, minimumVotesRequired, meanOfMeansRatingsOfAllMovies))))\n    val ratingsStatisticsWithWRDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = ratingsStatisticsWithWR.map((m: (((Int, String, Int), (Int, Double, Double, Double, Double)))) => (m._1._3 / 10 * 10, (m._1._2, m._2)))\n    val groupByDecade: RDD[(Int, Iterable[(String, (Int, Double, Double, Double, Double))])] = ratingsStatisticsWithWRDecade.groupByKey()\n    val bestMoviesDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = groupByDecade.map((j: (Int, Iterable[(String, (Int, Double, Double, Double, Double))])) => (j._1, j._2.reduce((j1, j2) => if (j1._2._5 > j2._2._5) j1 else j2)))\n    val bestMoviesDecadeSorted: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = bestMoviesDecade.sortByKey(true)\n    bestMoviesDecadeSorted\n  }",
          "status" : "Killed"
        },
        {
          "id" : 138,
          "originalProgramId" : 6,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def bestMoviesDecade(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))], minimumVotesRequired: Double, meanOfMeansRatingsOfAllMovies: Double) = {\n  val ratingsStatisticsWithWR: RDD[((Int, String, Int), (Int, Double, Double, Double, Double))] = ratingsStats.map { (s: ((Int, String, Int), (Int, Double, Double, Double))) => (s._1, (s._2._1, s._2._2, s._2._3, s._2._4, weighted_rating(s._2._2, s._2._1.toDouble, minimumVotesRequired, meanOfMeansRatingsOfAllMovies))) }\n  val ratingsStatisticsWithWRDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = ratingsStatisticsWithWR.map { (m: ((Int, String, Int), (Int, Double, Double, Double, Double))) => (m._1._3 / 10 * 10, (m._1._2, m._2)) }\n  val groupByDecade: RDD[(Int, Iterable[(String, (Int, Double, Double, Double, Double))])] = ratingsStatisticsWithWRDecade.groupByKey()\n  val bestMoviesDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = groupByDecade.map { (inputParameter: (Int, Iterable[(String, Tuple5[Int, Double, Double, Double, Double])])) => {\n    val originalFunction = ((j: (Int, Iterable[(String, (Int, Double, Double, Double, Double))])) => (j._1, j._2.reduce((j1, j2) => if (j1._2._5 > j2._2._5) j1 else j2)))(_)\n    val originalValue = originalFunction(inputParameter)\n    (-originalValue._1, originalValue._2)\n  } }\n  val bestMoviesDecadeSorted: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = bestMoviesDecade.sortByKey(true)\n  bestMoviesDecadeSorted\n}",
          "originalCode" : "def bestMoviesDecade(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))], minimumVotesRequired: Double, meanOfMeansRatingsOfAllMovies: Double) = {\n    val ratingsStatisticsWithWR: RDD[((Int, String, Int), (Int, Double, Double, Double, Double))] = ratingsStats.map((s: ((Int, String, Int), (Int, Double, Double, Double))) => (s._1, (s._2._1, s._2._2, s._2._3, s._2._4, weighted_rating(s._2._2, s._2._1.toDouble, minimumVotesRequired, meanOfMeansRatingsOfAllMovies))))\n    val ratingsStatisticsWithWRDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = ratingsStatisticsWithWR.map((m: (((Int, String, Int), (Int, Double, Double, Double, Double)))) => (m._1._3 / 10 * 10, (m._1._2, m._2)))\n    val groupByDecade: RDD[(Int, Iterable[(String, (Int, Double, Double, Double, Double))])] = ratingsStatisticsWithWRDecade.groupByKey()\n    val bestMoviesDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = groupByDecade.map((j: (Int, Iterable[(String, (Int, Double, Double, Double, Double))])) => (j._1, j._2.reduce((j1, j2) => if (j1._2._5 > j2._2._5) j1 else j2)))\n    val bestMoviesDecadeSorted: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = bestMoviesDecade.sortByKey(true)\n    bestMoviesDecadeSorted\n  }",
          "status" : "Killed"
        },
        {
          "id" : 139,
          "originalProgramId" : 6,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def bestMoviesDecade(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))], minimumVotesRequired: Double, meanOfMeansRatingsOfAllMovies: Double) = {\n  val ratingsStatisticsWithWR: RDD[((Int, String, Int), (Int, Double, Double, Double, Double))] = ratingsStats.map { (s: ((Int, String, Int), (Int, Double, Double, Double))) => (s._1, (s._2._1, s._2._2, s._2._3, s._2._4, weighted_rating(s._2._2, s._2._1.toDouble, minimumVotesRequired, meanOfMeansRatingsOfAllMovies))) }\n  val ratingsStatisticsWithWRDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = ratingsStatisticsWithWR.map { (m: ((Int, String, Int), (Int, Double, Double, Double, Double))) => (m._1._3 / 10 * 10, (m._1._2, m._2)) }\n  val groupByDecade: RDD[(Int, Iterable[(String, (Int, Double, Double, Double, Double))])] = ratingsStatisticsWithWRDecade.groupByKey()\n  val bestMoviesDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = groupByDecade.map { (inputParameter: (Int, Iterable[(String, Tuple5[Int, Double, Double, Double, Double])])) => {\n    val originalFunction = ((j: (Int, Iterable[(String, (Int, Double, Double, Double, Double))])) => (j._1, j._2.reduce((j1, j2) => if (j1._2._5 > j2._2._5) j1 else j2)))(_)\n    val originalValue = originalFunction(inputParameter)\n    (originalValue._1, (\"\", originalValue._2._2))\n  } }\n  val bestMoviesDecadeSorted: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = bestMoviesDecade.sortByKey(true)\n  bestMoviesDecadeSorted\n}",
          "originalCode" : "def bestMoviesDecade(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))], minimumVotesRequired: Double, meanOfMeansRatingsOfAllMovies: Double) = {\n    val ratingsStatisticsWithWR: RDD[((Int, String, Int), (Int, Double, Double, Double, Double))] = ratingsStats.map((s: ((Int, String, Int), (Int, Double, Double, Double))) => (s._1, (s._2._1, s._2._2, s._2._3, s._2._4, weighted_rating(s._2._2, s._2._1.toDouble, minimumVotesRequired, meanOfMeansRatingsOfAllMovies))))\n    val ratingsStatisticsWithWRDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = ratingsStatisticsWithWR.map((m: (((Int, String, Int), (Int, Double, Double, Double, Double)))) => (m._1._3 / 10 * 10, (m._1._2, m._2)))\n    val groupByDecade: RDD[(Int, Iterable[(String, (Int, Double, Double, Double, Double))])] = ratingsStatisticsWithWRDecade.groupByKey()\n    val bestMoviesDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = groupByDecade.map((j: (Int, Iterable[(String, (Int, Double, Double, Double, Double))])) => (j._1, j._2.reduce((j1, j2) => if (j1._2._5 > j2._2._5) j1 else j2)))\n    val bestMoviesDecadeSorted: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = bestMoviesDecade.sortByKey(true)\n    bestMoviesDecadeSorted\n  }",
          "status" : "Killed"
        },
        {
          "id" : 140,
          "originalProgramId" : 6,
          "mutationOperator" : "DTI",
          "mutationOperatorDescription" : "Distinct Transformation Insertion",
          "mutantCode" : "def bestMoviesDecade(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))], minimumVotesRequired: Double, meanOfMeansRatingsOfAllMovies: Double) = {\n  val ratingsStatisticsWithWR: RDD[((Int, String, Int), (Int, Double, Double, Double, Double))] = ratingsStats.map { (s: ((Int, String, Int), (Int, Double, Double, Double))) => (s._1, (s._2._1, s._2._2, s._2._3, s._2._4, weighted_rating(s._2._2, s._2._1.toDouble, minimumVotesRequired, meanOfMeansRatingsOfAllMovies))) }.distinct()\n  val ratingsStatisticsWithWRDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = ratingsStatisticsWithWR.map { (m: ((Int, String, Int), (Int, Double, Double, Double, Double))) => (m._1._3 / 10 * 10, (m._1._2, m._2)) }\n  val groupByDecade: RDD[(Int, Iterable[(String, (Int, Double, Double, Double, Double))])] = ratingsStatisticsWithWRDecade.groupByKey()\n  val bestMoviesDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = groupByDecade.map { (j: (Int, Iterable[(String, (Int, Double, Double, Double, Double))])) => (j._1, j._2.reduce((j1, j2) => if (j1._2._5 > j2._2._5) j1 else j2)) }\n  val bestMoviesDecadeSorted: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = bestMoviesDecade.sortByKey(true)\n  bestMoviesDecadeSorted\n}",
          "originalCode" : "def bestMoviesDecade(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))], minimumVotesRequired: Double, meanOfMeansRatingsOfAllMovies: Double) = {\n    val ratingsStatisticsWithWR: RDD[((Int, String, Int), (Int, Double, Double, Double, Double))] = ratingsStats.map((s: ((Int, String, Int), (Int, Double, Double, Double))) => (s._1, (s._2._1, s._2._2, s._2._3, s._2._4, weighted_rating(s._2._2, s._2._1.toDouble, minimumVotesRequired, meanOfMeansRatingsOfAllMovies))))\n    val ratingsStatisticsWithWRDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = ratingsStatisticsWithWR.map((m: (((Int, String, Int), (Int, Double, Double, Double, Double)))) => (m._1._3 / 10 * 10, (m._1._2, m._2)))\n    val groupByDecade: RDD[(Int, Iterable[(String, (Int, Double, Double, Double, Double))])] = ratingsStatisticsWithWRDecade.groupByKey()\n    val bestMoviesDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = groupByDecade.map((j: (Int, Iterable[(String, (Int, Double, Double, Double, Double))])) => (j._1, j._2.reduce((j1, j2) => if (j1._2._5 > j2._2._5) j1 else j2)))\n    val bestMoviesDecadeSorted: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = bestMoviesDecade.sortByKey(true)\n    bestMoviesDecadeSorted\n  }",
          "status" : "Equivalent"
        },
        {
          "id" : 141,
          "originalProgramId" : 6,
          "mutationOperator" : "DTI",
          "mutationOperatorDescription" : "Distinct Transformation Insertion",
          "mutantCode" : "def bestMoviesDecade(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))], minimumVotesRequired: Double, meanOfMeansRatingsOfAllMovies: Double) = {\n  val ratingsStatisticsWithWR: RDD[((Int, String, Int), (Int, Double, Double, Double, Double))] = ratingsStats.map { (s: ((Int, String, Int), (Int, Double, Double, Double))) => (s._1, (s._2._1, s._2._2, s._2._3, s._2._4, weighted_rating(s._2._2, s._2._1.toDouble, minimumVotesRequired, meanOfMeansRatingsOfAllMovies))) }\n  val ratingsStatisticsWithWRDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = ratingsStatisticsWithWR.map { (m: ((Int, String, Int), (Int, Double, Double, Double, Double))) => (m._1._3 / 10 * 10, (m._1._2, m._2)) }.distinct()\n  val groupByDecade: RDD[(Int, Iterable[(String, (Int, Double, Double, Double, Double))])] = ratingsStatisticsWithWRDecade.groupByKey()\n  val bestMoviesDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = groupByDecade.map { (j: (Int, Iterable[(String, (Int, Double, Double, Double, Double))])) => (j._1, j._2.reduce((j1, j2) => if (j1._2._5 > j2._2._5) j1 else j2)) }\n  val bestMoviesDecadeSorted: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = bestMoviesDecade.sortByKey(true)\n  bestMoviesDecadeSorted\n}",
          "originalCode" : "def bestMoviesDecade(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))], minimumVotesRequired: Double, meanOfMeansRatingsOfAllMovies: Double) = {\n    val ratingsStatisticsWithWR: RDD[((Int, String, Int), (Int, Double, Double, Double, Double))] = ratingsStats.map((s: ((Int, String, Int), (Int, Double, Double, Double))) => (s._1, (s._2._1, s._2._2, s._2._3, s._2._4, weighted_rating(s._2._2, s._2._1.toDouble, minimumVotesRequired, meanOfMeansRatingsOfAllMovies))))\n    val ratingsStatisticsWithWRDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = ratingsStatisticsWithWR.map((m: (((Int, String, Int), (Int, Double, Double, Double, Double)))) => (m._1._3 / 10 * 10, (m._1._2, m._2)))\n    val groupByDecade: RDD[(Int, Iterable[(String, (Int, Double, Double, Double, Double))])] = ratingsStatisticsWithWRDecade.groupByKey()\n    val bestMoviesDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = groupByDecade.map((j: (Int, Iterable[(String, (Int, Double, Double, Double, Double))])) => (j._1, j._2.reduce((j1, j2) => if (j1._2._5 > j2._2._5) j1 else j2)))\n    val bestMoviesDecadeSorted: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = bestMoviesDecade.sortByKey(true)\n    bestMoviesDecadeSorted\n  }",
          "status" : "Equivalent"
        },
        {
          "id" : 142,
          "originalProgramId" : 6,
          "mutationOperator" : "DTI",
          "mutationOperatorDescription" : "Distinct Transformation Insertion",
          "mutantCode" : "def bestMoviesDecade(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))], minimumVotesRequired: Double, meanOfMeansRatingsOfAllMovies: Double) = {\n  val ratingsStatisticsWithWR: RDD[((Int, String, Int), (Int, Double, Double, Double, Double))] = ratingsStats.map { (s: ((Int, String, Int), (Int, Double, Double, Double))) => (s._1, (s._2._1, s._2._2, s._2._3, s._2._4, weighted_rating(s._2._2, s._2._1.toDouble, minimumVotesRequired, meanOfMeansRatingsOfAllMovies))) }\n  val ratingsStatisticsWithWRDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = ratingsStatisticsWithWR.map { (m: ((Int, String, Int), (Int, Double, Double, Double, Double))) => (m._1._3 / 10 * 10, (m._1._2, m._2)) }\n  val groupByDecade: RDD[(Int, Iterable[(String, (Int, Double, Double, Double, Double))])] = ratingsStatisticsWithWRDecade.groupByKey().distinct()\n  val bestMoviesDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = groupByDecade.map { (j: (Int, Iterable[(String, (Int, Double, Double, Double, Double))])) => (j._1, j._2.reduce((j1, j2) => if (j1._2._5 > j2._2._5) j1 else j2)) }\n  val bestMoviesDecadeSorted: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = bestMoviesDecade.sortByKey(true)\n  bestMoviesDecadeSorted\n}",
          "originalCode" : "def bestMoviesDecade(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))], minimumVotesRequired: Double, meanOfMeansRatingsOfAllMovies: Double) = {\n    val ratingsStatisticsWithWR: RDD[((Int, String, Int), (Int, Double, Double, Double, Double))] = ratingsStats.map((s: ((Int, String, Int), (Int, Double, Double, Double))) => (s._1, (s._2._1, s._2._2, s._2._3, s._2._4, weighted_rating(s._2._2, s._2._1.toDouble, minimumVotesRequired, meanOfMeansRatingsOfAllMovies))))\n    val ratingsStatisticsWithWRDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = ratingsStatisticsWithWR.map((m: (((Int, String, Int), (Int, Double, Double, Double, Double)))) => (m._1._3 / 10 * 10, (m._1._2, m._2)))\n    val groupByDecade: RDD[(Int, Iterable[(String, (Int, Double, Double, Double, Double))])] = ratingsStatisticsWithWRDecade.groupByKey()\n    val bestMoviesDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = groupByDecade.map((j: (Int, Iterable[(String, (Int, Double, Double, Double, Double))])) => (j._1, j._2.reduce((j1, j2) => if (j1._2._5 > j2._2._5) j1 else j2)))\n    val bestMoviesDecadeSorted: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = bestMoviesDecade.sortByKey(true)\n    bestMoviesDecadeSorted\n  }",
          "status" : "Equivalent"
        },
        {
          "id" : 143,
          "originalProgramId" : 6,
          "mutationOperator" : "DTI",
          "mutationOperatorDescription" : "Distinct Transformation Insertion",
          "mutantCode" : "def bestMoviesDecade(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))], minimumVotesRequired: Double, meanOfMeansRatingsOfAllMovies: Double) = {\n  val ratingsStatisticsWithWR: RDD[((Int, String, Int), (Int, Double, Double, Double, Double))] = ratingsStats.map { (s: ((Int, String, Int), (Int, Double, Double, Double))) => (s._1, (s._2._1, s._2._2, s._2._3, s._2._4, weighted_rating(s._2._2, s._2._1.toDouble, minimumVotesRequired, meanOfMeansRatingsOfAllMovies))) }\n  val ratingsStatisticsWithWRDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = ratingsStatisticsWithWR.map { (m: ((Int, String, Int), (Int, Double, Double, Double, Double))) => (m._1._3 / 10 * 10, (m._1._2, m._2)) }\n  val groupByDecade: RDD[(Int, Iterable[(String, (Int, Double, Double, Double, Double))])] = ratingsStatisticsWithWRDecade.groupByKey()\n  val bestMoviesDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = groupByDecade.map { (j: (Int, Iterable[(String, (Int, Double, Double, Double, Double))])) => (j._1, j._2.reduce((j1, j2) => if (j1._2._5 > j2._2._5) j1 else j2)) }.distinct()\n  val bestMoviesDecadeSorted: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = bestMoviesDecade.sortByKey(true)\n  bestMoviesDecadeSorted\n}",
          "originalCode" : "def bestMoviesDecade(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))], minimumVotesRequired: Double, meanOfMeansRatingsOfAllMovies: Double) = {\n    val ratingsStatisticsWithWR: RDD[((Int, String, Int), (Int, Double, Double, Double, Double))] = ratingsStats.map((s: ((Int, String, Int), (Int, Double, Double, Double))) => (s._1, (s._2._1, s._2._2, s._2._3, s._2._4, weighted_rating(s._2._2, s._2._1.toDouble, minimumVotesRequired, meanOfMeansRatingsOfAllMovies))))\n    val ratingsStatisticsWithWRDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = ratingsStatisticsWithWR.map((m: (((Int, String, Int), (Int, Double, Double, Double, Double)))) => (m._1._3 / 10 * 10, (m._1._2, m._2)))\n    val groupByDecade: RDD[(Int, Iterable[(String, (Int, Double, Double, Double, Double))])] = ratingsStatisticsWithWRDecade.groupByKey()\n    val bestMoviesDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = groupByDecade.map((j: (Int, Iterable[(String, (Int, Double, Double, Double, Double))])) => (j._1, j._2.reduce((j1, j2) => if (j1._2._5 > j2._2._5) j1 else j2)))\n    val bestMoviesDecadeSorted: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = bestMoviesDecade.sortByKey(true)\n    bestMoviesDecadeSorted\n  }",
          "status" : "Equivalent"
        },
        {
          "id" : 144,
          "originalProgramId" : 6,
          "mutationOperator" : "DTI",
          "mutationOperatorDescription" : "Distinct Transformation Insertion",
          "mutantCode" : "def bestMoviesDecade(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))], minimumVotesRequired: Double, meanOfMeansRatingsOfAllMovies: Double) = {\n  val ratingsStatisticsWithWR: RDD[((Int, String, Int), (Int, Double, Double, Double, Double))] = ratingsStats.map { (s: ((Int, String, Int), (Int, Double, Double, Double))) => (s._1, (s._2._1, s._2._2, s._2._3, s._2._4, weighted_rating(s._2._2, s._2._1.toDouble, minimumVotesRequired, meanOfMeansRatingsOfAllMovies))) }\n  val ratingsStatisticsWithWRDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = ratingsStatisticsWithWR.map { (m: ((Int, String, Int), (Int, Double, Double, Double, Double))) => (m._1._3 / 10 * 10, (m._1._2, m._2)) }\n  val groupByDecade: RDD[(Int, Iterable[(String, (Int, Double, Double, Double, Double))])] = ratingsStatisticsWithWRDecade.groupByKey()\n  val bestMoviesDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = groupByDecade.map { (j: (Int, Iterable[(String, (Int, Double, Double, Double, Double))])) => (j._1, j._2.reduce((j1, j2) => if (j1._2._5 > j2._2._5) j1 else j2)) }\n  val bestMoviesDecadeSorted: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = bestMoviesDecade.sortByKey(true).distinct()\n  bestMoviesDecadeSorted\n}",
          "originalCode" : "def bestMoviesDecade(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))], minimumVotesRequired: Double, meanOfMeansRatingsOfAllMovies: Double) = {\n    val ratingsStatisticsWithWR: RDD[((Int, String, Int), (Int, Double, Double, Double, Double))] = ratingsStats.map((s: ((Int, String, Int), (Int, Double, Double, Double))) => (s._1, (s._2._1, s._2._2, s._2._3, s._2._4, weighted_rating(s._2._2, s._2._1.toDouble, minimumVotesRequired, meanOfMeansRatingsOfAllMovies))))\n    val ratingsStatisticsWithWRDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = ratingsStatisticsWithWR.map((m: (((Int, String, Int), (Int, Double, Double, Double, Double)))) => (m._1._3 / 10 * 10, (m._1._2, m._2)))\n    val groupByDecade: RDD[(Int, Iterable[(String, (Int, Double, Double, Double, Double))])] = ratingsStatisticsWithWRDecade.groupByKey()\n    val bestMoviesDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = groupByDecade.map((j: (Int, Iterable[(String, (Int, Double, Double, Double, Double))])) => (j._1, j._2.reduce((j1, j2) => if (j1._2._5 > j2._2._5) j1 else j2)))\n    val bestMoviesDecadeSorted: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = bestMoviesDecade.sortByKey(true)\n    bestMoviesDecadeSorted\n  }",
          "status" : "Lived"
        },
        {
          "id" : 145,
          "originalProgramId" : 6,
          "mutationOperator" : "OTD",
          "mutationOperatorDescription" : "Order Transformation Deletion",
          "mutantCode" : "def bestMoviesDecade(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))], minimumVotesRequired: Double, meanOfMeansRatingsOfAllMovies: Double) = {\n  val ratingsStatisticsWithWR: RDD[((Int, String, Int), (Int, Double, Double, Double, Double))] = ratingsStats.map { (s: ((Int, String, Int), (Int, Double, Double, Double))) => (s._1, (s._2._1, s._2._2, s._2._3, s._2._4, weighted_rating(s._2._2, s._2._1.toDouble, minimumVotesRequired, meanOfMeansRatingsOfAllMovies))) }\n  val ratingsStatisticsWithWRDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = ratingsStatisticsWithWR.map { (m: ((Int, String, Int), (Int, Double, Double, Double, Double))) => (m._1._3 / 10 * 10, (m._1._2, m._2)) }\n  val groupByDecade: RDD[(Int, Iterable[(String, (Int, Double, Double, Double, Double))])] = ratingsStatisticsWithWRDecade.groupByKey()\n  val bestMoviesDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = groupByDecade.map { (j: (Int, Iterable[(String, (Int, Double, Double, Double, Double))])) => (j._1, j._2.reduce((j1, j2) => if (j1._2._5 > j2._2._5) j1 else j2)) }\n  val bestMoviesDecadeSorted: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = bestMoviesDecade\n  bestMoviesDecadeSorted\n}",
          "originalCode" : "def bestMoviesDecade(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))], minimumVotesRequired: Double, meanOfMeansRatingsOfAllMovies: Double) = {\n    val ratingsStatisticsWithWR: RDD[((Int, String, Int), (Int, Double, Double, Double, Double))] = ratingsStats.map((s: ((Int, String, Int), (Int, Double, Double, Double))) => (s._1, (s._2._1, s._2._2, s._2._3, s._2._4, weighted_rating(s._2._2, s._2._1.toDouble, minimumVotesRequired, meanOfMeansRatingsOfAllMovies))))\n    val ratingsStatisticsWithWRDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = ratingsStatisticsWithWR.map((m: (((Int, String, Int), (Int, Double, Double, Double, Double)))) => (m._1._3 / 10 * 10, (m._1._2, m._2)))\n    val groupByDecade: RDD[(Int, Iterable[(String, (Int, Double, Double, Double, Double))])] = ratingsStatisticsWithWRDecade.groupByKey()\n    val bestMoviesDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = groupByDecade.map((j: (Int, Iterable[(String, (Int, Double, Double, Double, Double))])) => (j._1, j._2.reduce((j1, j2) => if (j1._2._5 > j2._2._5) j1 else j2)))\n    val bestMoviesDecadeSorted: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = bestMoviesDecade.sortByKey(true)\n    bestMoviesDecadeSorted\n  }",
          "status" : "Lived"
        },
        {
          "id" : 146,
          "originalProgramId" : 6,
          "mutationOperator" : "OTI",
          "mutationOperatorDescription" : "Order Transformation Inversion",
          "mutantCode" : "def bestMoviesDecade(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))], minimumVotesRequired: Double, meanOfMeansRatingsOfAllMovies: Double) = {\n  val ratingsStatisticsWithWR: RDD[((Int, String, Int), (Int, Double, Double, Double, Double))] = ratingsStats.map { (s: ((Int, String, Int), (Int, Double, Double, Double))) => (s._1, (s._2._1, s._2._2, s._2._3, s._2._4, weighted_rating(s._2._2, s._2._1.toDouble, minimumVotesRequired, meanOfMeansRatingsOfAllMovies))) }\n  val ratingsStatisticsWithWRDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = ratingsStatisticsWithWR.map { (m: ((Int, String, Int), (Int, Double, Double, Double, Double))) => (m._1._3 / 10 * 10, (m._1._2, m._2)) }\n  val groupByDecade: RDD[(Int, Iterable[(String, (Int, Double, Double, Double, Double))])] = ratingsStatisticsWithWRDecade.groupByKey()\n  val bestMoviesDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = groupByDecade.map { (j: (Int, Iterable[(String, (Int, Double, Double, Double, Double))])) => (j._1, j._2.reduce((j1, j2) => if (j1._2._5 > j2._2._5) j1 else j2)) }\n  val bestMoviesDecadeSorted: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = bestMoviesDecade.sortByKey(false)\n  bestMoviesDecadeSorted\n}",
          "originalCode" : "def bestMoviesDecade(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))], minimumVotesRequired: Double, meanOfMeansRatingsOfAllMovies: Double) = {\n    val ratingsStatisticsWithWR: RDD[((Int, String, Int), (Int, Double, Double, Double, Double))] = ratingsStats.map((s: ((Int, String, Int), (Int, Double, Double, Double))) => (s._1, (s._2._1, s._2._2, s._2._3, s._2._4, weighted_rating(s._2._2, s._2._1.toDouble, minimumVotesRequired, meanOfMeansRatingsOfAllMovies))))\n    val ratingsStatisticsWithWRDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = ratingsStatisticsWithWR.map((m: (((Int, String, Int), (Int, Double, Double, Double, Double)))) => (m._1._3 / 10 * 10, (m._1._2, m._2)))\n    val groupByDecade: RDD[(Int, Iterable[(String, (Int, Double, Double, Double, Double))])] = ratingsStatisticsWithWRDecade.groupByKey()\n    val bestMoviesDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = groupByDecade.map((j: (Int, Iterable[(String, (Int, Double, Double, Double, Double))])) => (j._1, j._2.reduce((j1, j2) => if (j1._2._5 > j2._2._5) j1 else j2)))\n    val bestMoviesDecadeSorted: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = bestMoviesDecade.sortByKey(true)\n    bestMoviesDecadeSorted\n  }",
          "status" : "Lived"
        }
      ],
      "removedMutants" : [
      ],
      "mutationOperatorsMetrics" : {
        "totalMutantsPerOperator" : {
          "FTD" : 0,
          "JTR" : 0,
          "UTR" : 0,
          "MTR" : 12,
          "UTD" : 1,
          "OTD" : 1,
          "BTR" : 0,
          "STR" : 0,
          "BTS" : 0,
          "ATR" : 0,
          "OTI" : 1,
          "DTI" : 5,
          "DTD" : 0,
          "NFTP" : 0,
          "UTS" : 0
        },
        "totalKilledMutantsPerOperator" : {
          "FTD" : 0,
          "JTR" : 0,
          "UTR" : 0,
          "MTR" : 12,
          "UTD" : 0,
          "OTD" : 0,
          "BTR" : 0,
          "STR" : 0,
          "BTS" : 0,
          "ATR" : 0,
          "OTI" : 0,
          "DTI" : 0,
          "DTD" : 0,
          "NFTP" : 0,
          "UTS" : 0
        },
        "totalLivedMutantsPerOperator" : {
          "FTD" : 0,
          "JTR" : 0,
          "UTR" : 0,
          "MTR" : 0,
          "UTD" : 1,
          "OTD" : 1,
          "BTR" : 0,
          "STR" : 0,
          "BTS" : 0,
          "ATR" : 0,
          "OTI" : 1,
          "DTI" : 1,
          "DTD" : 0,
          "NFTP" : 0,
          "UTS" : 0
        },
        "totalEquivalentMutantsPerOperator" : {
          "FTD" : 0,
          "JTR" : 0,
          "UTR" : 0,
          "MTR" : 0,
          "UTD" : 0,
          "OTD" : 0,
          "BTR" : 0,
          "STR" : 0,
          "BTS" : 0,
          "ATR" : 0,
          "OTI" : 0,
          "DTI" : 4,
          "DTD" : 0,
          "NFTP" : 0,
          "UTS" : 0
        },
        "totalErrorMutantsPerOperator" : {
          "FTD" : 0,
          "JTR" : 0,
          "UTR" : 0,
          "MTR" : 0,
          "UTD" : 0,
          "OTD" : 0,
          "BTR" : 0,
          "STR" : 0,
          "BTS" : 0,
          "ATR" : 0,
          "OTI" : 0,
          "DTI" : 0,
          "DTD" : 0,
          "NFTP" : 0,
          "UTS" : 0
        },
        "totalRemovedMutantsPerOperator" : {
          "FTD" : 0,
          "JTR" : 0,
          "UTR" : 0,
          "MTR" : 0,
          "UTD" : 0,
          "OTD" : 0,
          "BTR" : 0,
          "STR" : 0,
          "BTS" : 0,
          "ATR" : 0,
          "OTI" : 0,
          "DTI" : 0,
          "DTD" : 0,
          "NFTP" : 0,
          "UTS" : 0
        },
        "descriptionPerOperator" : {
          "FTD" : "Filter Transformation Deletion",
          "JTR" : "Join Transformation Replacement",
          "UTR" : "Unary Transformation Replacement",
          "MTR" : "Mapping Transformation Replacement",
          "UTD" : "Unary Transformation Deletion",
          "OTD" : "Order Transformation Deletion",
          "BTR" : "Binary Transformation Replacement",
          "STR" : "Set Transformation Replacement",
          "BTS" : "Binary Transformation Swap",
          "ATR" : "Aggregation Transformation Replacement",
          "OTI" : "Order Transformation Inversion",
          "DTI" : "Distinct Transformation Insertion",
          "DTD" : "Distinct Transformation Deletion",
          "NFTP" : "Negation of Filter Transformation Predicate",
          "UTS" : "Unary Transformation Swap"
        }
      },
      "totalDatasets" : 6,
      "totalTransformations" : 5,
      "totalMutants" : 20,
      "totalKilledMutants" : 12,
      "totalLivedMutants" : 4,
      "totalEquivalentMutants" : 4,
      "totalErrorMutants" : 0,
      "totalRemovedMutants" : 0,
      "mutationScore" : 0.75
    },
    {
      "id" : 7,
      "programSourceId" : 1,
      "name" : "genresTagsCount",
      "code" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val tagsMovieIdKey: RDD[(Int, String)] = tags.map((t: Tag) => (t.movieId, t.tag))\n    val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n    val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap((mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)))\n    val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey((w: Int, z: Int) => w + z)\n    val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n    genresTagsCountSorted\n  }",
      "datasets" : [
        {
          "id" : 33,
          "name" : "movies",
          "datasetType" : "RDD[Movie]",
          "inputDataset" : true,
          "outputDataset" : false
        },
        {
          "id" : 34,
          "name" : "tags",
          "datasetType" : "RDD[Tag]",
          "inputDataset" : true,
          "outputDataset" : false
        },
        {
          "id" : 35,
          "name" : "moviesIdKey",
          "datasetType" : "RDD[(Int, Movie)]",
          "inputDataset" : false,
          "outputDataset" : false
        },
        {
          "id" : 36,
          "name" : "tagsMovieIdKey",
          "datasetType" : "RDD[(Int, String)]",
          "inputDataset" : false,
          "outputDataset" : false
        },
        {
          "id" : 37,
          "name" : "joinMoviesTags",
          "datasetType" : "RDD[(Int, (Movie, String))]",
          "inputDataset" : false,
          "outputDataset" : false
        },
        {
          "id" : 38,
          "name" : "genresTags",
          "datasetType" : "RDD[((String, String), Int)]",
          "inputDataset" : false,
          "outputDataset" : false
        },
        {
          "id" : 39,
          "name" : "genresTagsCounts",
          "datasetType" : "RDD[((String, String), Int)]",
          "inputDataset" : false,
          "outputDataset" : false
        },
        {
          "id" : 40,
          "name" : "genresTagsCountMapped",
          "datasetType" : "RDD[(String, (String, Int))]",
          "inputDataset" : false,
          "outputDataset" : false
        },
        {
          "id" : 41,
          "name" : "genresTagsCountSorted",
          "datasetType" : "RDD[(String, (String, Int))]",
          "inputDataset" : false,
          "outputDataset" : true
        }
      ],
      "transformations" : [
        {
          "id" : 25,
          "name" : "map",
          "inputTypes" : [
            "RDD[Movie]"
          ],
          "outputTypes" : [
            "RDD[(Int, Movie)]"
          ],
          "loadTransformation" : false
        },
        {
          "id" : 26,
          "name" : "map",
          "inputTypes" : [
            "RDD[Tag]"
          ],
          "outputTypes" : [
            "RDD[(Int, String)]"
          ],
          "loadTransformation" : false
        },
        {
          "id" : 27,
          "name" : "join",
          "inputTypes" : [
            "RDD[(Int, Movie)]",
            "RDD[(Int, String)]"
          ],
          "outputTypes" : [
            "RDD[(Int, (Movie, String))]"
          ],
          "loadTransformation" : false
        },
        {
          "id" : 28,
          "name" : "flatMap",
          "inputTypes" : [
            "RDD[(Int, (Movie, String))]"
          ],
          "outputTypes" : [
            "RDD[((String, String), Int)]"
          ],
          "loadTransformation" : false
        },
        {
          "id" : 29,
          "name" : "reduceByKey",
          "inputTypes" : [
            "RDD[((String, String), Int)]"
          ],
          "outputTypes" : [
            "RDD[((String, String), Int)]"
          ],
          "loadTransformation" : false
        },
        {
          "id" : 30,
          "name" : "map",
          "inputTypes" : [
            "RDD[((String, String), Int)]"
          ],
          "outputTypes" : [
            "RDD[(String, (String, Int))]"
          ],
          "loadTransformation" : false
        },
        {
          "id" : 31,
          "name" : "sortByKey",
          "inputTypes" : [
            "RDD[(String, (String, Int))]"
          ],
          "outputTypes" : [
            "RDD[(String, (String, Int))]"
          ],
          "loadTransformation" : false
        }
      ],
      "edges" : [
        {
          "id" : 49,
          "datasetId" : 33,
          "transformationId" : 25,
          "direction" : "DatasetToTransformation"
        },
        {
          "id" : 50,
          "datasetId" : 35,
          "transformationId" : 25,
          "direction" : "TransformationToDataset"
        },
        {
          "id" : 51,
          "datasetId" : 34,
          "transformationId" : 26,
          "direction" : "DatasetToTransformation"
        },
        {
          "id" : 52,
          "datasetId" : 36,
          "transformationId" : 26,
          "direction" : "TransformationToDataset"
        },
        {
          "id" : 53,
          "datasetId" : 35,
          "transformationId" : 27,
          "direction" : "DatasetToTransformation"
        },
        {
          "id" : 54,
          "datasetId" : 36,
          "transformationId" : 27,
          "direction" : "DatasetToTransformation"
        },
        {
          "id" : 55,
          "datasetId" : 37,
          "transformationId" : 27,
          "direction" : "TransformationToDataset"
        },
        {
          "id" : 56,
          "datasetId" : 37,
          "transformationId" : 28,
          "direction" : "DatasetToTransformation"
        },
        {
          "id" : 57,
          "datasetId" : 38,
          "transformationId" : 28,
          "direction" : "TransformationToDataset"
        },
        {
          "id" : 58,
          "datasetId" : 38,
          "transformationId" : 29,
          "direction" : "DatasetToTransformation"
        },
        {
          "id" : 59,
          "datasetId" : 39,
          "transformationId" : 29,
          "direction" : "TransformationToDataset"
        },
        {
          "id" : 60,
          "datasetId" : 39,
          "transformationId" : 30,
          "direction" : "DatasetToTransformation"
        },
        {
          "id" : 61,
          "datasetId" : 40,
          "transformationId" : 30,
          "direction" : "TransformationToDataset"
        },
        {
          "id" : 62,
          "datasetId" : 40,
          "transformationId" : 31,
          "direction" : "DatasetToTransformation"
        },
        {
          "id" : 63,
          "datasetId" : 41,
          "transformationId" : 31,
          "direction" : "TransformationToDataset"
        }
      ],
      "mutants" : [
        {
          "id" : 147,
          "originalProgramId" : 7,
          "mutationOperator" : "UTD",
          "mutationOperatorDescription" : "Unary Transformation Deletion",
          "mutantCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val tagsMovieIdKey: RDD[(Int, String)] = tags.map { (t: Tag) => (t.movieId, t.tag) }\n  val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n  val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap { (mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)) }\n  val genresTagsCounts: RDD[((String, String), Int)] = genresTags\n  val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map { (g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n  genresTagsCountSorted\n}",
          "originalCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val tagsMovieIdKey: RDD[(Int, String)] = tags.map((t: Tag) => (t.movieId, t.tag))\n    val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n    val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap((mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)))\n    val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey((w: Int, z: Int) => w + z)\n    val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n    genresTagsCountSorted\n  }",
          "status" : "Killed"
        },
        {
          "id" : 148,
          "originalProgramId" : 7,
          "mutationOperator" : "UTD",
          "mutationOperatorDescription" : "Unary Transformation Deletion",
          "mutantCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val tagsMovieIdKey: RDD[(Int, String)] = tags.map { (t: Tag) => (t.movieId, t.tag) }\n  val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n  val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap { (mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)) }\n  val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey { (w: Int, z: Int) => w + z }\n  val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map { (g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped\n  genresTagsCountSorted\n}",
          "originalCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val tagsMovieIdKey: RDD[(Int, String)] = tags.map((t: Tag) => (t.movieId, t.tag))\n    val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n    val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap((mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)))\n    val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey((w: Int, z: Int) => w + z)\n    val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n    genresTagsCountSorted\n  }",
          "status" : "Killed"
        },
        {
          "id" : 149,
          "originalProgramId" : 7,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (inputParameter: Movie) => {\n    val originalFunction = ((m: Movie) => (m.movieId, m))(_)\n    val originalValue = originalFunction(inputParameter)\n    (0, originalValue._2)\n  } }\n  val tagsMovieIdKey: RDD[(Int, String)] = tags.map { (t: Tag) => (t.movieId, t.tag) }\n  val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n  val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap { (mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)) }\n  val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey { (w: Int, z: Int) => w + z }\n  val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map { (g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n  genresTagsCountSorted\n}",
          "originalCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val tagsMovieIdKey: RDD[(Int, String)] = tags.map((t: Tag) => (t.movieId, t.tag))\n    val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n    val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap((mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)))\n    val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey((w: Int, z: Int) => w + z)\n    val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n    genresTagsCountSorted\n  }",
          "status" : "Killed"
        },
        {
          "id" : 150,
          "originalProgramId" : 7,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (inputParameter: Movie) => {\n    val originalFunction = ((m: Movie) => (m.movieId, m))(_)\n    val originalValue = originalFunction(inputParameter)\n    (1, originalValue._2)\n  } }\n  val tagsMovieIdKey: RDD[(Int, String)] = tags.map { (t: Tag) => (t.movieId, t.tag) }\n  val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n  val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap { (mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)) }\n  val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey { (w: Int, z: Int) => w + z }\n  val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map { (g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n  genresTagsCountSorted\n}",
          "originalCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val tagsMovieIdKey: RDD[(Int, String)] = tags.map((t: Tag) => (t.movieId, t.tag))\n    val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n    val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap((mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)))\n    val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey((w: Int, z: Int) => w + z)\n    val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n    genresTagsCountSorted\n  }",
          "status" : "Killed"
        },
        {
          "id" : 151,
          "originalProgramId" : 7,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (inputParameter: Movie) => {\n    val originalFunction = ((m: Movie) => (m.movieId, m))(_)\n    val originalValue = originalFunction(inputParameter)\n    (Int.MaxValue, originalValue._2)\n  } }\n  val tagsMovieIdKey: RDD[(Int, String)] = tags.map { (t: Tag) => (t.movieId, t.tag) }\n  val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n  val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap { (mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)) }\n  val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey { (w: Int, z: Int) => w + z }\n  val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map { (g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n  genresTagsCountSorted\n}",
          "originalCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val tagsMovieIdKey: RDD[(Int, String)] = tags.map((t: Tag) => (t.movieId, t.tag))\n    val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n    val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap((mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)))\n    val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey((w: Int, z: Int) => w + z)\n    val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n    genresTagsCountSorted\n  }",
          "status" : "Killed"
        },
        {
          "id" : 152,
          "originalProgramId" : 7,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (inputParameter: Movie) => {\n    val originalFunction = ((m: Movie) => (m.movieId, m))(_)\n    val originalValue = originalFunction(inputParameter)\n    (Int.MinValue, originalValue._2)\n  } }\n  val tagsMovieIdKey: RDD[(Int, String)] = tags.map { (t: Tag) => (t.movieId, t.tag) }\n  val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n  val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap { (mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)) }\n  val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey { (w: Int, z: Int) => w + z }\n  val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map { (g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n  genresTagsCountSorted\n}",
          "originalCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val tagsMovieIdKey: RDD[(Int, String)] = tags.map((t: Tag) => (t.movieId, t.tag))\n    val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n    val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap((mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)))\n    val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey((w: Int, z: Int) => w + z)\n    val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n    genresTagsCountSorted\n  }",
          "status" : "Killed"
        },
        {
          "id" : 153,
          "originalProgramId" : 7,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (inputParameter: Movie) => {\n    val originalFunction = ((m: Movie) => (m.movieId, m))(_)\n    val originalValue = originalFunction(inputParameter)\n    (-originalValue._1, originalValue._2)\n  } }\n  val tagsMovieIdKey: RDD[(Int, String)] = tags.map { (t: Tag) => (t.movieId, t.tag) }\n  val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n  val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap { (mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)) }\n  val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey { (w: Int, z: Int) => w + z }\n  val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map { (g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n  genresTagsCountSorted\n}",
          "originalCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val tagsMovieIdKey: RDD[(Int, String)] = tags.map((t: Tag) => (t.movieId, t.tag))\n    val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n    val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap((mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)))\n    val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey((w: Int, z: Int) => w + z)\n    val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n    genresTagsCountSorted\n  }",
          "status" : "Killed"
        },
        {
          "id" : 154,
          "originalProgramId" : 7,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (inputParameter: Movie) => {\n    val originalFunction = ((m: Movie) => (m.movieId, m))(_)\n    val originalValue = originalFunction(inputParameter)\n    (originalValue._1, null.asInstanceOf[Movie])\n  } }\n  val tagsMovieIdKey: RDD[(Int, String)] = tags.map { (t: Tag) => (t.movieId, t.tag) }\n  val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n  val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap { (mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)) }\n  val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey { (w: Int, z: Int) => w + z }\n  val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map { (g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n  genresTagsCountSorted\n}",
          "originalCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val tagsMovieIdKey: RDD[(Int, String)] = tags.map((t: Tag) => (t.movieId, t.tag))\n    val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n    val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap((mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)))\n    val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey((w: Int, z: Int) => w + z)\n    val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n    genresTagsCountSorted\n  }",
          "status" : "Killed"
        },
        {
          "id" : 155,
          "originalProgramId" : 7,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val tagsMovieIdKey: RDD[(Int, String)] = tags.map { (inputParameter: Tag) => {\n    val originalFunction = ((t: Tag) => (t.movieId, t.tag))(_)\n    val originalValue = originalFunction(inputParameter)\n    (0, originalValue._2)\n  } }\n  val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n  val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap { (mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)) }\n  val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey { (w: Int, z: Int) => w + z }\n  val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map { (g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n  genresTagsCountSorted\n}",
          "originalCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val tagsMovieIdKey: RDD[(Int, String)] = tags.map((t: Tag) => (t.movieId, t.tag))\n    val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n    val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap((mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)))\n    val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey((w: Int, z: Int) => w + z)\n    val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n    genresTagsCountSorted\n  }",
          "status" : "Killed"
        },
        {
          "id" : 156,
          "originalProgramId" : 7,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val tagsMovieIdKey: RDD[(Int, String)] = tags.map { (inputParameter: Tag) => {\n    val originalFunction = ((t: Tag) => (t.movieId, t.tag))(_)\n    val originalValue = originalFunction(inputParameter)\n    (1, originalValue._2)\n  } }\n  val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n  val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap { (mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)) }\n  val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey { (w: Int, z: Int) => w + z }\n  val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map { (g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n  genresTagsCountSorted\n}",
          "originalCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val tagsMovieIdKey: RDD[(Int, String)] = tags.map((t: Tag) => (t.movieId, t.tag))\n    val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n    val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap((mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)))\n    val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey((w: Int, z: Int) => w + z)\n    val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n    genresTagsCountSorted\n  }",
          "status" : "Killed"
        },
        {
          "id" : 157,
          "originalProgramId" : 7,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val tagsMovieIdKey: RDD[(Int, String)] = tags.map { (inputParameter: Tag) => {\n    val originalFunction = ((t: Tag) => (t.movieId, t.tag))(_)\n    val originalValue = originalFunction(inputParameter)\n    (Int.MaxValue, originalValue._2)\n  } }\n  val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n  val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap { (mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)) }\n  val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey { (w: Int, z: Int) => w + z }\n  val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map { (g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n  genresTagsCountSorted\n}",
          "originalCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val tagsMovieIdKey: RDD[(Int, String)] = tags.map((t: Tag) => (t.movieId, t.tag))\n    val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n    val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap((mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)))\n    val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey((w: Int, z: Int) => w + z)\n    val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n    genresTagsCountSorted\n  }",
          "status" : "Killed"
        },
        {
          "id" : 158,
          "originalProgramId" : 7,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val tagsMovieIdKey: RDD[(Int, String)] = tags.map { (inputParameter: Tag) => {\n    val originalFunction = ((t: Tag) => (t.movieId, t.tag))(_)\n    val originalValue = originalFunction(inputParameter)\n    (Int.MinValue, originalValue._2)\n  } }\n  val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n  val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap { (mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)) }\n  val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey { (w: Int, z: Int) => w + z }\n  val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map { (g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n  genresTagsCountSorted\n}",
          "originalCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val tagsMovieIdKey: RDD[(Int, String)] = tags.map((t: Tag) => (t.movieId, t.tag))\n    val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n    val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap((mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)))\n    val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey((w: Int, z: Int) => w + z)\n    val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n    genresTagsCountSorted\n  }",
          "status" : "Killed"
        },
        {
          "id" : 159,
          "originalProgramId" : 7,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val tagsMovieIdKey: RDD[(Int, String)] = tags.map { (inputParameter: Tag) => {\n    val originalFunction = ((t: Tag) => (t.movieId, t.tag))(_)\n    val originalValue = originalFunction(inputParameter)\n    (-originalValue._1, originalValue._2)\n  } }\n  val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n  val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap { (mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)) }\n  val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey { (w: Int, z: Int) => w + z }\n  val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map { (g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n  genresTagsCountSorted\n}",
          "originalCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val tagsMovieIdKey: RDD[(Int, String)] = tags.map((t: Tag) => (t.movieId, t.tag))\n    val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n    val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap((mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)))\n    val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey((w: Int, z: Int) => w + z)\n    val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n    genresTagsCountSorted\n  }",
          "status" : "Killed"
        },
        {
          "id" : 160,
          "originalProgramId" : 7,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val tagsMovieIdKey: RDD[(Int, String)] = tags.map { (inputParameter: Tag) => {\n    val originalFunction = ((t: Tag) => (t.movieId, t.tag))(_)\n    val originalValue = originalFunction(inputParameter)\n    (originalValue._1, \"\")\n  } }\n  val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n  val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap { (mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)) }\n  val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey { (w: Int, z: Int) => w + z }\n  val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map { (g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n  genresTagsCountSorted\n}",
          "originalCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val tagsMovieIdKey: RDD[(Int, String)] = tags.map((t: Tag) => (t.movieId, t.tag))\n    val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n    val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap((mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)))\n    val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey((w: Int, z: Int) => w + z)\n    val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n    genresTagsCountSorted\n  }",
          "status" : "Killed"
        },
        {
          "id" : 161,
          "originalProgramId" : 7,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val tagsMovieIdKey: RDD[(Int, String)] = tags.map { (t: Tag) => (t.movieId, t.tag) }\n  val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n  val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap { (inputParameter: (Int, (Movie, String))) => {\n    val originalFunction = ((mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)))(_)\n    val originalValue = originalFunction(inputParameter)\n    originalValue.headOption\n  } }\n  val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey { (w: Int, z: Int) => w + z }\n  val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map { (g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n  genresTagsCountSorted\n}",
          "originalCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val tagsMovieIdKey: RDD[(Int, String)] = tags.map((t: Tag) => (t.movieId, t.tag))\n    val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n    val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap((mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)))\n    val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey((w: Int, z: Int) => w + z)\n    val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n    genresTagsCountSorted\n  }",
          "status" : "Killed"
        },
        {
          "id" : 162,
          "originalProgramId" : 7,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val tagsMovieIdKey: RDD[(Int, String)] = tags.map { (t: Tag) => (t.movieId, t.tag) }\n  val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n  val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap { (inputParameter: (Int, (Movie, String))) => {\n    val originalFunction = ((mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)))(_)\n    val originalValue = originalFunction(inputParameter)\n    originalValue.toList.tail\n  } }\n  val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey { (w: Int, z: Int) => w + z }\n  val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map { (g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n  genresTagsCountSorted\n}",
          "originalCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val tagsMovieIdKey: RDD[(Int, String)] = tags.map((t: Tag) => (t.movieId, t.tag))\n    val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n    val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap((mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)))\n    val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey((w: Int, z: Int) => w + z)\n    val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n    genresTagsCountSorted\n  }",
          "status" : "Killed"
        },
        {
          "id" : 163,
          "originalProgramId" : 7,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val tagsMovieIdKey: RDD[(Int, String)] = tags.map { (t: Tag) => (t.movieId, t.tag) }\n  val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n  val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap { (inputParameter: (Int, (Movie, String))) => {\n    val originalFunction = ((mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)))(_)\n    val originalValue = originalFunction(inputParameter)\n    originalValue.toList.reverse\n  } }\n  val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey { (w: Int, z: Int) => w + z }\n  val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map { (g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n  genresTagsCountSorted\n}",
          "originalCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val tagsMovieIdKey: RDD[(Int, String)] = tags.map((t: Tag) => (t.movieId, t.tag))\n    val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n    val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap((mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)))\n    val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey((w: Int, z: Int) => w + z)\n    val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n    genresTagsCountSorted\n  }",
          "status" : "Equivalent"
        },
        {
          "id" : 164,
          "originalProgramId" : 7,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val tagsMovieIdKey: RDD[(Int, String)] = tags.map { (t: Tag) => (t.movieId, t.tag) }\n  val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n  val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap { (inputParameter: (Int, (Movie, String))) => {\n    val originalFunction = ((mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)))(_)\n    val originalValue = originalFunction(inputParameter)\n    List[((String, String), Int)]()\n  } }\n  val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey { (w: Int, z: Int) => w + z }\n  val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map { (g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n  genresTagsCountSorted\n}",
          "originalCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val tagsMovieIdKey: RDD[(Int, String)] = tags.map((t: Tag) => (t.movieId, t.tag))\n    val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n    val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap((mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)))\n    val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey((w: Int, z: Int) => w + z)\n    val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n    genresTagsCountSorted\n  }",
          "status" : "Killed"
        },
        {
          "id" : 165,
          "originalProgramId" : 7,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val tagsMovieIdKey: RDD[(Int, String)] = tags.map { (t: Tag) => (t.movieId, t.tag) }\n  val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n  val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap { (mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)) }\n  val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey { (w: Int, z: Int) => w + z }\n  val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map { (inputParameter: ((String, String), Int)) => {\n    val originalFunction = ((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))(_)\n    val originalValue = originalFunction(inputParameter)\n    (\"\", originalValue._2)\n  } }\n  val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n  genresTagsCountSorted\n}",
          "originalCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val tagsMovieIdKey: RDD[(Int, String)] = tags.map((t: Tag) => (t.movieId, t.tag))\n    val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n    val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap((mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)))\n    val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey((w: Int, z: Int) => w + z)\n    val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n    genresTagsCountSorted\n  }",
          "status" : "Killed"
        },
        {
          "id" : 166,
          "originalProgramId" : 7,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val tagsMovieIdKey: RDD[(Int, String)] = tags.map { (t: Tag) => (t.movieId, t.tag) }\n  val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n  val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap { (mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)) }\n  val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey { (w: Int, z: Int) => w + z }\n  val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map { (inputParameter: ((String, String), Int)) => {\n    val originalFunction = ((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))(_)\n    val originalValue = originalFunction(inputParameter)\n    (originalValue._1, (\"\", originalValue._2._2))\n  } }\n  val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n  genresTagsCountSorted\n}",
          "originalCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val tagsMovieIdKey: RDD[(Int, String)] = tags.map((t: Tag) => (t.movieId, t.tag))\n    val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n    val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap((mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)))\n    val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey((w: Int, z: Int) => w + z)\n    val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n    genresTagsCountSorted\n  }",
          "status" : "Killed"
        },
        {
          "id" : 167,
          "originalProgramId" : 7,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val tagsMovieIdKey: RDD[(Int, String)] = tags.map { (t: Tag) => (t.movieId, t.tag) }\n  val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n  val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap { (mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)) }\n  val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey { (w: Int, z: Int) => w + z }\n  val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map { (inputParameter: ((String, String), Int)) => {\n    val originalFunction = ((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))(_)\n    val originalValue = originalFunction(inputParameter)\n    (originalValue._1, (originalValue._2._1, 0))\n  } }\n  val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n  genresTagsCountSorted\n}",
          "originalCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val tagsMovieIdKey: RDD[(Int, String)] = tags.map((t: Tag) => (t.movieId, t.tag))\n    val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n    val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap((mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)))\n    val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey((w: Int, z: Int) => w + z)\n    val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n    genresTagsCountSorted\n  }",
          "status" : "Killed"
        },
        {
          "id" : 168,
          "originalProgramId" : 7,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val tagsMovieIdKey: RDD[(Int, String)] = tags.map { (t: Tag) => (t.movieId, t.tag) }\n  val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n  val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap { (mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)) }\n  val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey { (w: Int, z: Int) => w + z }\n  val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map { (inputParameter: ((String, String), Int)) => {\n    val originalFunction = ((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))(_)\n    val originalValue = originalFunction(inputParameter)\n    (originalValue._1, (originalValue._2._1, 1))\n  } }\n  val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n  genresTagsCountSorted\n}",
          "originalCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val tagsMovieIdKey: RDD[(Int, String)] = tags.map((t: Tag) => (t.movieId, t.tag))\n    val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n    val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap((mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)))\n    val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey((w: Int, z: Int) => w + z)\n    val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n    genresTagsCountSorted\n  }",
          "status" : "Killed"
        },
        {
          "id" : 169,
          "originalProgramId" : 7,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val tagsMovieIdKey: RDD[(Int, String)] = tags.map { (t: Tag) => (t.movieId, t.tag) }\n  val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n  val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap { (mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)) }\n  val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey { (w: Int, z: Int) => w + z }\n  val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map { (inputParameter: ((String, String), Int)) => {\n    val originalFunction = ((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))(_)\n    val originalValue = originalFunction(inputParameter)\n    (originalValue._1, (originalValue._2._1, Int.MaxValue))\n  } }\n  val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n  genresTagsCountSorted\n}",
          "originalCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val tagsMovieIdKey: RDD[(Int, String)] = tags.map((t: Tag) => (t.movieId, t.tag))\n    val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n    val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap((mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)))\n    val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey((w: Int, z: Int) => w + z)\n    val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n    genresTagsCountSorted\n  }",
          "status" : "Killed"
        },
        {
          "id" : 170,
          "originalProgramId" : 7,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val tagsMovieIdKey: RDD[(Int, String)] = tags.map { (t: Tag) => (t.movieId, t.tag) }\n  val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n  val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap { (mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)) }\n  val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey { (w: Int, z: Int) => w + z }\n  val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map { (inputParameter: ((String, String), Int)) => {\n    val originalFunction = ((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))(_)\n    val originalValue = originalFunction(inputParameter)\n    (originalValue._1, (originalValue._2._1, Int.MinValue))\n  } }\n  val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n  genresTagsCountSorted\n}",
          "originalCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val tagsMovieIdKey: RDD[(Int, String)] = tags.map((t: Tag) => (t.movieId, t.tag))\n    val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n    val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap((mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)))\n    val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey((w: Int, z: Int) => w + z)\n    val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n    genresTagsCountSorted\n  }",
          "status" : "Killed"
        },
        {
          "id" : 171,
          "originalProgramId" : 7,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val tagsMovieIdKey: RDD[(Int, String)] = tags.map { (t: Tag) => (t.movieId, t.tag) }\n  val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n  val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap { (mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)) }\n  val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey { (w: Int, z: Int) => w + z }\n  val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map { (inputParameter: ((String, String), Int)) => {\n    val originalFunction = ((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))(_)\n    val originalValue = originalFunction(inputParameter)\n    (originalValue._1, (originalValue._2._1, -originalValue._2._2))\n  } }\n  val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n  genresTagsCountSorted\n}",
          "originalCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val tagsMovieIdKey: RDD[(Int, String)] = tags.map((t: Tag) => (t.movieId, t.tag))\n    val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n    val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap((mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)))\n    val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey((w: Int, z: Int) => w + z)\n    val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n    genresTagsCountSorted\n  }",
          "status" : "Killed"
        },
        {
          "id" : 172,
          "originalProgramId" : 7,
          "mutationOperator" : "DTI",
          "mutationOperatorDescription" : "Distinct Transformation Insertion",
          "mutantCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }.distinct()\n  val tagsMovieIdKey: RDD[(Int, String)] = tags.map { (t: Tag) => (t.movieId, t.tag) }\n  val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n  val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap { (mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)) }\n  val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey { (w: Int, z: Int) => w + z }\n  val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map { (g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n  genresTagsCountSorted\n}",
          "originalCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val tagsMovieIdKey: RDD[(Int, String)] = tags.map((t: Tag) => (t.movieId, t.tag))\n    val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n    val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap((mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)))\n    val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey((w: Int, z: Int) => w + z)\n    val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n    genresTagsCountSorted\n  }",
          "status" : "Lived"
        },
        {
          "id" : 173,
          "originalProgramId" : 7,
          "mutationOperator" : "DTI",
          "mutationOperatorDescription" : "Distinct Transformation Insertion",
          "mutantCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val tagsMovieIdKey: RDD[(Int, String)] = tags.map { (t: Tag) => (t.movieId, t.tag) }.distinct()\n  val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n  val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap { (mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)) }\n  val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey { (w: Int, z: Int) => w + z }\n  val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map { (g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n  genresTagsCountSorted\n}",
          "originalCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val tagsMovieIdKey: RDD[(Int, String)] = tags.map((t: Tag) => (t.movieId, t.tag))\n    val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n    val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap((mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)))\n    val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey((w: Int, z: Int) => w + z)\n    val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n    genresTagsCountSorted\n  }",
          "status" : "Killed"
        },
        {
          "id" : 174,
          "originalProgramId" : 7,
          "mutationOperator" : "DTI",
          "mutationOperatorDescription" : "Distinct Transformation Insertion",
          "mutantCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val tagsMovieIdKey: RDD[(Int, String)] = tags.map { (t: Tag) => (t.movieId, t.tag) }\n  val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey).distinct()\n  val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap { (mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)) }\n  val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey { (w: Int, z: Int) => w + z }\n  val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map { (g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n  genresTagsCountSorted\n}",
          "originalCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val tagsMovieIdKey: RDD[(Int, String)] = tags.map((t: Tag) => (t.movieId, t.tag))\n    val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n    val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap((mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)))\n    val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey((w: Int, z: Int) => w + z)\n    val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n    genresTagsCountSorted\n  }",
          "status" : "Killed"
        },
        {
          "id" : 175,
          "originalProgramId" : 7,
          "mutationOperator" : "DTI",
          "mutationOperatorDescription" : "Distinct Transformation Insertion",
          "mutantCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val tagsMovieIdKey: RDD[(Int, String)] = tags.map { (t: Tag) => (t.movieId, t.tag) }\n  val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n  val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap { (mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)) }.distinct()\n  val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey { (w: Int, z: Int) => w + z }\n  val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map { (g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n  genresTagsCountSorted\n}",
          "originalCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val tagsMovieIdKey: RDD[(Int, String)] = tags.map((t: Tag) => (t.movieId, t.tag))\n    val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n    val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap((mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)))\n    val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey((w: Int, z: Int) => w + z)\n    val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n    genresTagsCountSorted\n  }",
          "status" : "Killed"
        },
        {
          "id" : 176,
          "originalProgramId" : 7,
          "mutationOperator" : "DTI",
          "mutationOperatorDescription" : "Distinct Transformation Insertion",
          "mutantCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val tagsMovieIdKey: RDD[(Int, String)] = tags.map { (t: Tag) => (t.movieId, t.tag) }\n  val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n  val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap { (mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)) }\n  val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey { (w: Int, z: Int) => w + z }.distinct()\n  val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map { (g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n  genresTagsCountSorted\n}",
          "originalCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val tagsMovieIdKey: RDD[(Int, String)] = tags.map((t: Tag) => (t.movieId, t.tag))\n    val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n    val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap((mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)))\n    val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey((w: Int, z: Int) => w + z)\n    val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n    genresTagsCountSorted\n  }",
          "status" : "Killed"
        },
        {
          "id" : 177,
          "originalProgramId" : 7,
          "mutationOperator" : "DTI",
          "mutationOperatorDescription" : "Distinct Transformation Insertion",
          "mutantCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val tagsMovieIdKey: RDD[(Int, String)] = tags.map { (t: Tag) => (t.movieId, t.tag) }\n  val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n  val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap { (mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)) }\n  val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey { (w: Int, z: Int) => w + z }\n  val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map { (g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)) }.distinct()\n  val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n  genresTagsCountSorted\n}",
          "originalCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val tagsMovieIdKey: RDD[(Int, String)] = tags.map((t: Tag) => (t.movieId, t.tag))\n    val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n    val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap((mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)))\n    val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey((w: Int, z: Int) => w + z)\n    val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n    genresTagsCountSorted\n  }",
          "status" : "Lived"
        },
        {
          "id" : 178,
          "originalProgramId" : 7,
          "mutationOperator" : "DTI",
          "mutationOperatorDescription" : "Distinct Transformation Insertion",
          "mutantCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val tagsMovieIdKey: RDD[(Int, String)] = tags.map { (t: Tag) => (t.movieId, t.tag) }\n  val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n  val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap { (mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)) }\n  val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey { (w: Int, z: Int) => w + z }\n  val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map { (g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true).distinct()\n  genresTagsCountSorted\n}",
          "originalCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val tagsMovieIdKey: RDD[(Int, String)] = tags.map((t: Tag) => (t.movieId, t.tag))\n    val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n    val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap((mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)))\n    val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey((w: Int, z: Int) => w + z)\n    val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n    genresTagsCountSorted\n  }",
          "status" : "Killed"
        },
        {
          "id" : 179,
          "originalProgramId" : 7,
          "mutationOperator" : "ATR",
          "mutationOperatorDescription" : "Aggregation Transformation Replacement",
          "mutantCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val tagsMovieIdKey: RDD[(Int, String)] = tags.map { (t: Tag) => (t.movieId, t.tag) }\n  val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n  val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap { (mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)) }\n  val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey { (firstParameter: Int, secondParameter: Int) => firstParameter }\n  val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map { (g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n  genresTagsCountSorted\n}",
          "originalCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val tagsMovieIdKey: RDD[(Int, String)] = tags.map((t: Tag) => (t.movieId, t.tag))\n    val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n    val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap((mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)))\n    val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey((w: Int, z: Int) => w + z)\n    val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n    genresTagsCountSorted\n  }",
          "status" : "Killed"
        },
        {
          "id" : 180,
          "originalProgramId" : 7,
          "mutationOperator" : "ATR",
          "mutationOperatorDescription" : "Aggregation Transformation Replacement",
          "mutantCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val tagsMovieIdKey: RDD[(Int, String)] = tags.map { (t: Tag) => (t.movieId, t.tag) }\n  val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n  val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap { (mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)) }\n  val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey { (firstParameter: Int, secondParameter: Int) => secondParameter }\n  val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map { (g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n  genresTagsCountSorted\n}",
          "originalCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val tagsMovieIdKey: RDD[(Int, String)] = tags.map((t: Tag) => (t.movieId, t.tag))\n    val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n    val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap((mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)))\n    val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey((w: Int, z: Int) => w + z)\n    val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n    genresTagsCountSorted\n  }",
          "status" : "Killed"
        },
        {
          "id" : 181,
          "originalProgramId" : 7,
          "mutationOperator" : "ATR",
          "mutationOperatorDescription" : "Aggregation Transformation Replacement",
          "mutantCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val tagsMovieIdKey: RDD[(Int, String)] = tags.map { (t: Tag) => (t.movieId, t.tag) }\n  val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n  val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap { (mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)) }\n  val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey { (firstParameter: Int, secondParameter: Int) => {\n    val originalFunction = ((w: Int, z: Int) => w + z)(_, _)\n    originalFunction(firstParameter, firstParameter)\n  } }\n  val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map { (g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n  genresTagsCountSorted\n}",
          "originalCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val tagsMovieIdKey: RDD[(Int, String)] = tags.map((t: Tag) => (t.movieId, t.tag))\n    val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n    val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap((mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)))\n    val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey((w: Int, z: Int) => w + z)\n    val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n    genresTagsCountSorted\n  }",
          "status" : "Lived"
        },
        {
          "id" : 182,
          "originalProgramId" : 7,
          "mutationOperator" : "ATR",
          "mutationOperatorDescription" : "Aggregation Transformation Replacement",
          "mutantCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val tagsMovieIdKey: RDD[(Int, String)] = tags.map { (t: Tag) => (t.movieId, t.tag) }\n  val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n  val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap { (mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)) }\n  val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey { (firstParameter: Int, secondParameter: Int) => {\n    val originalFunction = ((w: Int, z: Int) => w + z)(_, _)\n    originalFunction(secondParameter, secondParameter)\n  } }\n  val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map { (g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n  genresTagsCountSorted\n}",
          "originalCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val tagsMovieIdKey: RDD[(Int, String)] = tags.map((t: Tag) => (t.movieId, t.tag))\n    val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n    val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap((mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)))\n    val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey((w: Int, z: Int) => w + z)\n    val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n    genresTagsCountSorted\n  }",
          "status" : "Lived"
        },
        {
          "id" : 183,
          "originalProgramId" : 7,
          "mutationOperator" : "ATR",
          "mutationOperatorDescription" : "Aggregation Transformation Replacement",
          "mutantCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val tagsMovieIdKey: RDD[(Int, String)] = tags.map { (t: Tag) => (t.movieId, t.tag) }\n  val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n  val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap { (mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)) }\n  val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey { (firstParameter: Int, secondParameter: Int) => {\n    val originalFunction = ((w: Int, z: Int) => w + z)(_, _)\n    originalFunction(secondParameter, firstParameter)\n  } }\n  val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map { (g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n  genresTagsCountSorted\n}",
          "originalCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val tagsMovieIdKey: RDD[(Int, String)] = tags.map((t: Tag) => (t.movieId, t.tag))\n    val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n    val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap((mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)))\n    val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey((w: Int, z: Int) => w + z)\n    val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n    genresTagsCountSorted\n  }",
          "status" : "Equivalent"
        },
        {
          "id" : 184,
          "originalProgramId" : 7,
          "mutationOperator" : "JTR",
          "mutationOperatorDescription" : "Join Transformation Replacement",
          "mutantCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val tagsMovieIdKey: RDD[(Int, String)] = tags.map { (t: Tag) => (t.movieId, t.tag) }\n  val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.leftOuterJoin(tagsMovieIdKey).map(tuple => (tuple._1, (tuple._2._1, tuple._2._2.getOrElse(\"\"))))\n  val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap { (mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)) }\n  val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey { (w: Int, z: Int) => w + z }\n  val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map { (g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n  genresTagsCountSorted\n}",
          "originalCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val tagsMovieIdKey: RDD[(Int, String)] = tags.map((t: Tag) => (t.movieId, t.tag))\n    val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n    val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap((mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)))\n    val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey((w: Int, z: Int) => w + z)\n    val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n    genresTagsCountSorted\n  }",
          "status" : "Lived"
        },
        {
          "id" : 185,
          "originalProgramId" : 7,
          "mutationOperator" : "JTR",
          "mutationOperatorDescription" : "Join Transformation Replacement",
          "mutantCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val tagsMovieIdKey: RDD[(Int, String)] = tags.map { (t: Tag) => (t.movieId, t.tag) }\n  val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.rightOuterJoin(tagsMovieIdKey).map(tuple => (tuple._1, (tuple._2._1.getOrElse(null.asInstanceOf[Movie]), tuple._2._2)))\n  val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap { (mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)) }\n  val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey { (w: Int, z: Int) => w + z }\n  val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map { (g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n  genresTagsCountSorted\n}",
          "originalCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val tagsMovieIdKey: RDD[(Int, String)] = tags.map((t: Tag) => (t.movieId, t.tag))\n    val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n    val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap((mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)))\n    val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey((w: Int, z: Int) => w + z)\n    val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n    genresTagsCountSorted\n  }",
          "status" : "Lived"
        },
        {
          "id" : 186,
          "originalProgramId" : 7,
          "mutationOperator" : "JTR",
          "mutationOperatorDescription" : "Join Transformation Replacement",
          "mutantCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val tagsMovieIdKey: RDD[(Int, String)] = tags.map { (t: Tag) => (t.movieId, t.tag) }\n  val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.fullOuterJoin(tagsMovieIdKey).map(tuple => (tuple._1, (tuple._2._1.getOrElse(null.asInstanceOf[Movie]), tuple._2._2.getOrElse(\"\"))))\n  val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap { (mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)) }\n  val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey { (w: Int, z: Int) => w + z }\n  val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map { (g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n  genresTagsCountSorted\n}",
          "originalCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val tagsMovieIdKey: RDD[(Int, String)] = tags.map((t: Tag) => (t.movieId, t.tag))\n    val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n    val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap((mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)))\n    val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey((w: Int, z: Int) => w + z)\n    val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n    genresTagsCountSorted\n  }",
          "status" : "Lived"
        },
        {
          "id" : 187,
          "originalProgramId" : 7,
          "mutationOperator" : "OTD",
          "mutationOperatorDescription" : "Order Transformation Deletion",
          "mutantCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val tagsMovieIdKey: RDD[(Int, String)] = tags.map { (t: Tag) => (t.movieId, t.tag) }\n  val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n  val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap { (mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)) }\n  val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey { (w: Int, z: Int) => w + z }\n  val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map { (g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped\n  genresTagsCountSorted\n}",
          "originalCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val tagsMovieIdKey: RDD[(Int, String)] = tags.map((t: Tag) => (t.movieId, t.tag))\n    val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n    val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap((mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)))\n    val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey((w: Int, z: Int) => w + z)\n    val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n    genresTagsCountSorted\n  }",
          "status" : "Killed"
        },
        {
          "id" : 188,
          "originalProgramId" : 7,
          "mutationOperator" : "OTI",
          "mutationOperatorDescription" : "Order Transformation Inversion",
          "mutantCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val tagsMovieIdKey: RDD[(Int, String)] = tags.map { (t: Tag) => (t.movieId, t.tag) }\n  val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n  val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap { (mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)) }\n  val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey { (w: Int, z: Int) => w + z }\n  val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map { (g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(false)\n  genresTagsCountSorted\n}",
          "originalCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val tagsMovieIdKey: RDD[(Int, String)] = tags.map((t: Tag) => (t.movieId, t.tag))\n    val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n    val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap((mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)))\n    val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey((w: Int, z: Int) => w + z)\n    val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n    genresTagsCountSorted\n  }",
          "status" : "Killed"
        }
      ],
      "removedMutants" : [
      ],
      "mutationOperatorsMetrics" : {
        "totalMutantsPerOperator" : {
          "FTD" : 0,
          "JTR" : 3,
          "UTR" : 0,
          "MTR" : 23,
          "UTD" : 2,
          "OTD" : 1,
          "BTR" : 0,
          "STR" : 0,
          "BTS" : 0,
          "ATR" : 5,
          "OTI" : 1,
          "DTI" : 7,
          "DTD" : 0,
          "NFTP" : 0,
          "UTS" : 0
        },
        "totalKilledMutantsPerOperator" : {
          "FTD" : 0,
          "JTR" : 0,
          "UTR" : 0,
          "MTR" : 22,
          "UTD" : 2,
          "OTD" : 1,
          "BTR" : 0,
          "STR" : 0,
          "BTS" : 0,
          "ATR" : 2,
          "OTI" : 1,
          "DTI" : 5,
          "DTD" : 0,
          "NFTP" : 0,
          "UTS" : 0
        },
        "totalLivedMutantsPerOperator" : {
          "FTD" : 0,
          "JTR" : 3,
          "UTR" : 0,
          "MTR" : 0,
          "UTD" : 0,
          "OTD" : 0,
          "BTR" : 0,
          "STR" : 0,
          "BTS" : 0,
          "ATR" : 2,
          "OTI" : 0,
          "DTI" : 2,
          "DTD" : 0,
          "NFTP" : 0,
          "UTS" : 0
        },
        "totalEquivalentMutantsPerOperator" : {
          "FTD" : 0,
          "JTR" : 0,
          "UTR" : 0,
          "MTR" : 1,
          "UTD" : 0,
          "OTD" : 0,
          "BTR" : 0,
          "STR" : 0,
          "BTS" : 0,
          "ATR" : 1,
          "OTI" : 0,
          "DTI" : 0,
          "DTD" : 0,
          "NFTP" : 0,
          "UTS" : 0
        },
        "totalErrorMutantsPerOperator" : {
          "FTD" : 0,
          "JTR" : 0,
          "UTR" : 0,
          "MTR" : 0,
          "UTD" : 0,
          "OTD" : 0,
          "BTR" : 0,
          "STR" : 0,
          "BTS" : 0,
          "ATR" : 0,
          "OTI" : 0,
          "DTI" : 0,
          "DTD" : 0,
          "NFTP" : 0,
          "UTS" : 0
        },
        "totalRemovedMutantsPerOperator" : {
          "FTD" : 0,
          "JTR" : 0,
          "UTR" : 0,
          "MTR" : 0,
          "UTD" : 0,
          "OTD" : 0,
          "BTR" : 0,
          "STR" : 0,
          "BTS" : 0,
          "ATR" : 0,
          "OTI" : 0,
          "DTI" : 0,
          "DTD" : 0,
          "NFTP" : 0,
          "UTS" : 0
        },
        "descriptionPerOperator" : {
          "FTD" : "Filter Transformation Deletion",
          "JTR" : "Join Transformation Replacement",
          "UTR" : "Unary Transformation Replacement",
          "MTR" : "Mapping Transformation Replacement",
          "UTD" : "Unary Transformation Deletion",
          "OTD" : "Order Transformation Deletion",
          "BTR" : "Binary Transformation Replacement",
          "STR" : "Set Transformation Replacement",
          "BTS" : "Binary Transformation Swap",
          "ATR" : "Aggregation Transformation Replacement",
          "OTI" : "Order Transformation Inversion",
          "DTI" : "Distinct Transformation Insertion",
          "DTD" : "Distinct Transformation Deletion",
          "NFTP" : "Negation of Filter Transformation Predicate",
          "UTS" : "Unary Transformation Swap"
        }
      },
      "totalDatasets" : 9,
      "totalTransformations" : 7,
      "totalMutants" : 42,
      "totalKilledMutants" : 33,
      "totalLivedMutants" : 7,
      "totalEquivalentMutants" : 2,
      "totalErrorMutants" : 0,
      "totalRemovedMutants" : 0,
      "mutationScore" : 0.825
    },
    {
      "id" : 8,
      "programSourceId" : 1,
      "name" : "tagBestSummarizeGenre",
      "code" : "def tagBestSummarizeGenre(genresTagsCountSorted: RDD[(String, (String, Int))]) = {\n    val genresTagsCountSortedGrouped: RDD[(String, Iterable[(String, Int)])] = genresTagsCountSorted.groupByKey()\n    val genresTagsCountSortedTop5: RDD[(String, List[(String, Int)])] = genresTagsCountSortedGrouped.map((l: (String, Iterable[(String, Int)])) => (l._1, l._2.toList.sortBy(_._2).reverse.take(5)))\n    genresTagsCountSortedTop5\n  }",
      "datasets" : [
        {
          "id" : 42,
          "name" : "genresTagsCountSorted",
          "datasetType" : "RDD[(String, (String, Int))]",
          "inputDataset" : true,
          "outputDataset" : false
        },
        {
          "id" : 43,
          "name" : "genresTagsCountSortedGrouped",
          "datasetType" : "RDD[(String, Iterable[(String, Int)])]",
          "inputDataset" : false,
          "outputDataset" : false
        },
        {
          "id" : 44,
          "name" : "genresTagsCountSortedTop5",
          "datasetType" : "RDD[(String, List[(String, Int)])]",
          "inputDataset" : false,
          "outputDataset" : true
        }
      ],
      "transformations" : [
        {
          "id" : 32,
          "name" : "groupByKey",
          "inputTypes" : [
            "RDD[(String, (String, Int))]"
          ],
          "outputTypes" : [
            "RDD[(String, Iterable[(String, Int)])]"
          ],
          "loadTransformation" : false
        },
        {
          "id" : 33,
          "name" : "map",
          "inputTypes" : [
            "RDD[(String, Iterable[(String, Int)])]"
          ],
          "outputTypes" : [
            "RDD[(String, List[(String, Int)])]"
          ],
          "loadTransformation" : false
        }
      ],
      "edges" : [
        {
          "id" : 64,
          "datasetId" : 42,
          "transformationId" : 32,
          "direction" : "DatasetToTransformation"
        },
        {
          "id" : 65,
          "datasetId" : 43,
          "transformationId" : 32,
          "direction" : "TransformationToDataset"
        },
        {
          "id" : 66,
          "datasetId" : 43,
          "transformationId" : 33,
          "direction" : "DatasetToTransformation"
        },
        {
          "id" : 67,
          "datasetId" : 44,
          "transformationId" : 33,
          "direction" : "TransformationToDataset"
        }
      ],
      "mutants" : [
        {
          "id" : 189,
          "originalProgramId" : 8,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def tagBestSummarizeGenre(genresTagsCountSorted: RDD[(String, (String, Int))]) = {\n  val genresTagsCountSortedGrouped: RDD[(String, Iterable[(String, Int)])] = genresTagsCountSorted.groupByKey()\n  val genresTagsCountSortedTop5: RDD[(String, List[(String, Int)])] = genresTagsCountSortedGrouped.map { (inputParameter: (String, Iterable[(String, Int)])) => {\n    val originalFunction = ((l: (String, Iterable[(String, Int)])) => (l._1, l._2.toList.sortBy(_._2).reverse.take(5)))(_)\n    val originalValue = originalFunction(inputParameter)\n    (\"\", originalValue._2)\n  } }\n  genresTagsCountSortedTop5\n}",
          "originalCode" : "def tagBestSummarizeGenre(genresTagsCountSorted: RDD[(String, (String, Int))]) = {\n    val genresTagsCountSortedGrouped: RDD[(String, Iterable[(String, Int)])] = genresTagsCountSorted.groupByKey()\n    val genresTagsCountSortedTop5: RDD[(String, List[(String, Int)])] = genresTagsCountSortedGrouped.map((l: (String, Iterable[(String, Int)])) => (l._1, l._2.toList.sortBy(_._2).reverse.take(5)))\n    genresTagsCountSortedTop5\n  }",
          "status" : "Killed"
        },
        {
          "id" : 190,
          "originalProgramId" : 8,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def tagBestSummarizeGenre(genresTagsCountSorted: RDD[(String, (String, Int))]) = {\n  val genresTagsCountSortedGrouped: RDD[(String, Iterable[(String, Int)])] = genresTagsCountSorted.groupByKey()\n  val genresTagsCountSortedTop5: RDD[(String, List[(String, Int)])] = genresTagsCountSortedGrouped.map { (inputParameter: (String, Iterable[(String, Int)])) => {\n    val originalFunction = ((l: (String, Iterable[(String, Int)])) => (l._1, l._2.toList.sortBy(_._2).reverse.take(5)))(_)\n    val originalValue = originalFunction(inputParameter)\n    (originalValue._1, List[(String, Int)](originalValue._2.head))\n  } }\n  genresTagsCountSortedTop5\n}",
          "originalCode" : "def tagBestSummarizeGenre(genresTagsCountSorted: RDD[(String, (String, Int))]) = {\n    val genresTagsCountSortedGrouped: RDD[(String, Iterable[(String, Int)])] = genresTagsCountSorted.groupByKey()\n    val genresTagsCountSortedTop5: RDD[(String, List[(String, Int)])] = genresTagsCountSortedGrouped.map((l: (String, Iterable[(String, Int)])) => (l._1, l._2.toList.sortBy(_._2).reverse.take(5)))\n    genresTagsCountSortedTop5\n  }",
          "status" : "Killed"
        },
        {
          "id" : 191,
          "originalProgramId" : 8,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def tagBestSummarizeGenre(genresTagsCountSorted: RDD[(String, (String, Int))]) = {\n  val genresTagsCountSortedGrouped: RDD[(String, Iterable[(String, Int)])] = genresTagsCountSorted.groupByKey()\n  val genresTagsCountSortedTop5: RDD[(String, List[(String, Int)])] = genresTagsCountSortedGrouped.map { (inputParameter: (String, Iterable[(String, Int)])) => {\n    val originalFunction = ((l: (String, Iterable[(String, Int)])) => (l._1, l._2.toList.sortBy(_._2).reverse.take(5)))(_)\n    val originalValue = originalFunction(inputParameter)\n    (originalValue._1, originalValue._2.tail)\n  } }\n  genresTagsCountSortedTop5\n}",
          "originalCode" : "def tagBestSummarizeGenre(genresTagsCountSorted: RDD[(String, (String, Int))]) = {\n    val genresTagsCountSortedGrouped: RDD[(String, Iterable[(String, Int)])] = genresTagsCountSorted.groupByKey()\n    val genresTagsCountSortedTop5: RDD[(String, List[(String, Int)])] = genresTagsCountSortedGrouped.map((l: (String, Iterable[(String, Int)])) => (l._1, l._2.toList.sortBy(_._2).reverse.take(5)))\n    genresTagsCountSortedTop5\n  }",
          "status" : "Killed"
        },
        {
          "id" : 192,
          "originalProgramId" : 8,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def tagBestSummarizeGenre(genresTagsCountSorted: RDD[(String, (String, Int))]) = {\n  val genresTagsCountSortedGrouped: RDD[(String, Iterable[(String, Int)])] = genresTagsCountSorted.groupByKey()\n  val genresTagsCountSortedTop5: RDD[(String, List[(String, Int)])] = genresTagsCountSortedGrouped.map { (inputParameter: (String, Iterable[(String, Int)])) => {\n    val originalFunction = ((l: (String, Iterable[(String, Int)])) => (l._1, l._2.toList.sortBy(_._2).reverse.take(5)))(_)\n    val originalValue = originalFunction(inputParameter)\n    (originalValue._1, originalValue._2.reverse)\n  } }\n  genresTagsCountSortedTop5\n}",
          "originalCode" : "def tagBestSummarizeGenre(genresTagsCountSorted: RDD[(String, (String, Int))]) = {\n    val genresTagsCountSortedGrouped: RDD[(String, Iterable[(String, Int)])] = genresTagsCountSorted.groupByKey()\n    val genresTagsCountSortedTop5: RDD[(String, List[(String, Int)])] = genresTagsCountSortedGrouped.map((l: (String, Iterable[(String, Int)])) => (l._1, l._2.toList.sortBy(_._2).reverse.take(5)))\n    genresTagsCountSortedTop5\n  }",
          "status" : "Killed"
        },
        {
          "id" : 193,
          "originalProgramId" : 8,
          "mutationOperator" : "MTR",
          "mutationOperatorDescription" : "Mapping Transformation Replacement",
          "mutantCode" : "def tagBestSummarizeGenre(genresTagsCountSorted: RDD[(String, (String, Int))]) = {\n  val genresTagsCountSortedGrouped: RDD[(String, Iterable[(String, Int)])] = genresTagsCountSorted.groupByKey()\n  val genresTagsCountSortedTop5: RDD[(String, List[(String, Int)])] = genresTagsCountSortedGrouped.map { (inputParameter: (String, Iterable[(String, Int)])) => {\n    val originalFunction = ((l: (String, Iterable[(String, Int)])) => (l._1, l._2.toList.sortBy(_._2).reverse.take(5)))(_)\n    val originalValue = originalFunction(inputParameter)\n    (originalValue._1, List[(String, Int)]())\n  } }\n  genresTagsCountSortedTop5\n}",
          "originalCode" : "def tagBestSummarizeGenre(genresTagsCountSorted: RDD[(String, (String, Int))]) = {\n    val genresTagsCountSortedGrouped: RDD[(String, Iterable[(String, Int)])] = genresTagsCountSorted.groupByKey()\n    val genresTagsCountSortedTop5: RDD[(String, List[(String, Int)])] = genresTagsCountSortedGrouped.map((l: (String, Iterable[(String, Int)])) => (l._1, l._2.toList.sortBy(_._2).reverse.take(5)))\n    genresTagsCountSortedTop5\n  }",
          "status" : "Killed"
        },
        {
          "id" : 194,
          "originalProgramId" : 8,
          "mutationOperator" : "DTI",
          "mutationOperatorDescription" : "Distinct Transformation Insertion",
          "mutantCode" : "def tagBestSummarizeGenre(genresTagsCountSorted: RDD[(String, (String, Int))]) = {\n  val genresTagsCountSortedGrouped: RDD[(String, Iterable[(String, Int)])] = genresTagsCountSorted.groupByKey().distinct()\n  val genresTagsCountSortedTop5: RDD[(String, List[(String, Int)])] = genresTagsCountSortedGrouped.map { (l: (String, Iterable[(String, Int)])) => (l._1, l._2.toList.sortBy(_._2).reverse.take(5)) }\n  genresTagsCountSortedTop5\n}",
          "originalCode" : "def tagBestSummarizeGenre(genresTagsCountSorted: RDD[(String, (String, Int))]) = {\n    val genresTagsCountSortedGrouped: RDD[(String, Iterable[(String, Int)])] = genresTagsCountSorted.groupByKey()\n    val genresTagsCountSortedTop5: RDD[(String, List[(String, Int)])] = genresTagsCountSortedGrouped.map((l: (String, Iterable[(String, Int)])) => (l._1, l._2.toList.sortBy(_._2).reverse.take(5)))\n    genresTagsCountSortedTop5\n  }",
          "status" : "Equivalent"
        },
        {
          "id" : 195,
          "originalProgramId" : 8,
          "mutationOperator" : "DTI",
          "mutationOperatorDescription" : "Distinct Transformation Insertion",
          "mutantCode" : "def tagBestSummarizeGenre(genresTagsCountSorted: RDD[(String, (String, Int))]) = {\n  val genresTagsCountSortedGrouped: RDD[(String, Iterable[(String, Int)])] = genresTagsCountSorted.groupByKey()\n  val genresTagsCountSortedTop5: RDD[(String, List[(String, Int)])] = genresTagsCountSortedGrouped.map { (l: (String, Iterable[(String, Int)])) => (l._1, l._2.toList.sortBy(_._2).reverse.take(5)) }.distinct()\n  genresTagsCountSortedTop5\n}",
          "originalCode" : "def tagBestSummarizeGenre(genresTagsCountSorted: RDD[(String, (String, Int))]) = {\n    val genresTagsCountSortedGrouped: RDD[(String, Iterable[(String, Int)])] = genresTagsCountSorted.groupByKey()\n    val genresTagsCountSortedTop5: RDD[(String, List[(String, Int)])] = genresTagsCountSortedGrouped.map((l: (String, Iterable[(String, Int)])) => (l._1, l._2.toList.sortBy(_._2).reverse.take(5)))\n    genresTagsCountSortedTop5\n  }",
          "status" : "Equivalent"
        }
      ],
      "removedMutants" : [
      ],
      "mutationOperatorsMetrics" : {
        "totalMutantsPerOperator" : {
          "FTD" : 0,
          "JTR" : 0,
          "UTR" : 0,
          "MTR" : 5,
          "UTD" : 0,
          "OTD" : 0,
          "BTR" : 0,
          "STR" : 0,
          "BTS" : 0,
          "ATR" : 0,
          "OTI" : 0,
          "DTI" : 2,
          "DTD" : 0,
          "NFTP" : 0,
          "UTS" : 0
        },
        "totalKilledMutantsPerOperator" : {
          "FTD" : 0,
          "JTR" : 0,
          "UTR" : 0,
          "MTR" : 5,
          "UTD" : 0,
          "OTD" : 0,
          "BTR" : 0,
          "STR" : 0,
          "BTS" : 0,
          "ATR" : 0,
          "OTI" : 0,
          "DTI" : 0,
          "DTD" : 0,
          "NFTP" : 0,
          "UTS" : 0
        },
        "totalLivedMutantsPerOperator" : {
          "FTD" : 0,
          "JTR" : 0,
          "UTR" : 0,
          "MTR" : 0,
          "UTD" : 0,
          "OTD" : 0,
          "BTR" : 0,
          "STR" : 0,
          "BTS" : 0,
          "ATR" : 0,
          "OTI" : 0,
          "DTI" : 0,
          "DTD" : 0,
          "NFTP" : 0,
          "UTS" : 0
        },
        "totalEquivalentMutantsPerOperator" : {
          "FTD" : 0,
          "JTR" : 0,
          "UTR" : 0,
          "MTR" : 0,
          "UTD" : 0,
          "OTD" : 0,
          "BTR" : 0,
          "STR" : 0,
          "BTS" : 0,
          "ATR" : 0,
          "OTI" : 0,
          "DTI" : 2,
          "DTD" : 0,
          "NFTP" : 0,
          "UTS" : 0
        },
        "totalErrorMutantsPerOperator" : {
          "FTD" : 0,
          "JTR" : 0,
          "UTR" : 0,
          "MTR" : 0,
          "UTD" : 0,
          "OTD" : 0,
          "BTR" : 0,
          "STR" : 0,
          "BTS" : 0,
          "ATR" : 0,
          "OTI" : 0,
          "DTI" : 0,
          "DTD" : 0,
          "NFTP" : 0,
          "UTS" : 0
        },
        "totalRemovedMutantsPerOperator" : {
          "FTD" : 0,
          "JTR" : 0,
          "UTR" : 0,
          "MTR" : 0,
          "UTD" : 0,
          "OTD" : 0,
          "BTR" : 0,
          "STR" : 0,
          "BTS" : 0,
          "ATR" : 0,
          "OTI" : 0,
          "DTI" : 0,
          "DTD" : 0,
          "NFTP" : 0,
          "UTS" : 0
        },
        "descriptionPerOperator" : {
          "FTD" : "Filter Transformation Deletion",
          "JTR" : "Join Transformation Replacement",
          "UTR" : "Unary Transformation Replacement",
          "MTR" : "Mapping Transformation Replacement",
          "UTD" : "Unary Transformation Deletion",
          "OTD" : "Order Transformation Deletion",
          "BTR" : "Binary Transformation Replacement",
          "STR" : "Set Transformation Replacement",
          "BTS" : "Binary Transformation Swap",
          "ATR" : "Aggregation Transformation Replacement",
          "OTI" : "Order Transformation Inversion",
          "DTI" : "Distinct Transformation Insertion",
          "DTD" : "Distinct Transformation Deletion",
          "NFTP" : "Negation of Filter Transformation Predicate",
          "UTS" : "Unary Transformation Swap"
        }
      },
      "totalDatasets" : 3,
      "totalTransformations" : 2,
      "totalMutants" : 7,
      "totalKilledMutants" : 5,
      "totalLivedMutants" : 0,
      "totalEquivalentMutants" : 2,
      "totalErrorMutants" : 0,
      "totalRemovedMutants" : 0,
      "mutationScore" : 1.0
    }
  ],
  "mutants" : [
    {
      "id" : 1,
      "originalProgramId" : 1,
      "mutationOperator" : "MTR",
      "mutationOperatorDescription" : "Mapping Transformation Replacement",
      "mutantCode" : "def parseRDDs(ratingsCSV: RDD[String], moviesCSV: RDD[String], tagsCSV: RDD[String]): (RDD[Rating], RDD[Movie], RDD[Tag]) = {\n  val ratings: RDD[Rating] = ratingsCSV.flatMap { (inputParameter: String) => {\n    val originalFunction = parseRatings(_)\n    val originalValue = originalFunction(inputParameter)\n    originalValue.headOption\n  } }\n  val movies: RDD[Movie] = moviesCSV.flatMap(parseMovies)\n  val tags: RDD[Tag] = tagsCSV.flatMap(parseTags)\n  (ratings, movies, tags)\n}",
      "originalCode" : "def parseRDDs(ratingsCSV: RDD[String], moviesCSV: RDD[String], tagsCSV: RDD[String]): (RDD[Rating], RDD[Movie], RDD[Tag]) = {\n    val ratings: RDD[Rating] = ratingsCSV.flatMap(parseRatings)\n    val movies: RDD[Movie] = moviesCSV.flatMap(parseMovies)\n    val tags: RDD[Tag] = tagsCSV.flatMap(parseTags)\n    (ratings, movies, tags)\n  }",
      "status" : "Equivalent"
    },
    {
      "id" : 2,
      "originalProgramId" : 1,
      "mutationOperator" : "MTR",
      "mutationOperatorDescription" : "Mapping Transformation Replacement",
      "mutantCode" : "def parseRDDs(ratingsCSV: RDD[String], moviesCSV: RDD[String], tagsCSV: RDD[String]): (RDD[Rating], RDD[Movie], RDD[Tag]) = {\n  val ratings: RDD[Rating] = ratingsCSV.flatMap { (inputParameter: String) => {\n    val originalFunction = parseRatings(_)\n    val originalValue = originalFunction(inputParameter)\n    originalValue.toList.tail\n  } }\n  val movies: RDD[Movie] = moviesCSV.flatMap(parseMovies)\n  val tags: RDD[Tag] = tagsCSV.flatMap(parseTags)\n  (ratings, movies, tags)\n}",
      "originalCode" : "def parseRDDs(ratingsCSV: RDD[String], moviesCSV: RDD[String], tagsCSV: RDD[String]): (RDD[Rating], RDD[Movie], RDD[Tag]) = {\n    val ratings: RDD[Rating] = ratingsCSV.flatMap(parseRatings)\n    val movies: RDD[Movie] = moviesCSV.flatMap(parseMovies)\n    val tags: RDD[Tag] = tagsCSV.flatMap(parseTags)\n    (ratings, movies, tags)\n  }",
      "status" : "Killed"
    },
    {
      "id" : 3,
      "originalProgramId" : 1,
      "mutationOperator" : "MTR",
      "mutationOperatorDescription" : "Mapping Transformation Replacement",
      "mutantCode" : "def parseRDDs(ratingsCSV: RDD[String], moviesCSV: RDD[String], tagsCSV: RDD[String]): (RDD[Rating], RDD[Movie], RDD[Tag]) = {\n  val ratings: RDD[Rating] = ratingsCSV.flatMap { (inputParameter: String) => {\n    val originalFunction = parseRatings(_)\n    val originalValue = originalFunction(inputParameter)\n    originalValue.toList.reverse\n  } }\n  val movies: RDD[Movie] = moviesCSV.flatMap(parseMovies)\n  val tags: RDD[Tag] = tagsCSV.flatMap(parseTags)\n  (ratings, movies, tags)\n}",
      "originalCode" : "def parseRDDs(ratingsCSV: RDD[String], moviesCSV: RDD[String], tagsCSV: RDD[String]): (RDD[Rating], RDD[Movie], RDD[Tag]) = {\n    val ratings: RDD[Rating] = ratingsCSV.flatMap(parseRatings)\n    val movies: RDD[Movie] = moviesCSV.flatMap(parseMovies)\n    val tags: RDD[Tag] = tagsCSV.flatMap(parseTags)\n    (ratings, movies, tags)\n  }",
      "status" : "Equivalent"
    },
    {
      "id" : 4,
      "originalProgramId" : 1,
      "mutationOperator" : "MTR",
      "mutationOperatorDescription" : "Mapping Transformation Replacement",
      "mutantCode" : "def parseRDDs(ratingsCSV: RDD[String], moviesCSV: RDD[String], tagsCSV: RDD[String]): (RDD[Rating], RDD[Movie], RDD[Tag]) = {\n  val ratings: RDD[Rating] = ratingsCSV.flatMap { (inputParameter: String) => {\n    val originalFunction = parseRatings(_)\n    val originalValue = originalFunction(inputParameter)\n    List[Rating]()\n  } }\n  val movies: RDD[Movie] = moviesCSV.flatMap(parseMovies)\n  val tags: RDD[Tag] = tagsCSV.flatMap(parseTags)\n  (ratings, movies, tags)\n}",
      "originalCode" : "def parseRDDs(ratingsCSV: RDD[String], moviesCSV: RDD[String], tagsCSV: RDD[String]): (RDD[Rating], RDD[Movie], RDD[Tag]) = {\n    val ratings: RDD[Rating] = ratingsCSV.flatMap(parseRatings)\n    val movies: RDD[Movie] = moviesCSV.flatMap(parseMovies)\n    val tags: RDD[Tag] = tagsCSV.flatMap(parseTags)\n    (ratings, movies, tags)\n  }",
      "status" : "Killed"
    },
    {
      "id" : 5,
      "originalProgramId" : 1,
      "mutationOperator" : "MTR",
      "mutationOperatorDescription" : "Mapping Transformation Replacement",
      "mutantCode" : "def parseRDDs(ratingsCSV: RDD[String], moviesCSV: RDD[String], tagsCSV: RDD[String]): (RDD[Rating], RDD[Movie], RDD[Tag]) = {\n  val ratings: RDD[Rating] = ratingsCSV.flatMap(parseRatings)\n  val movies: RDD[Movie] = moviesCSV.flatMap { (inputParameter: String) => {\n    val originalFunction = parseMovies(_)\n    val originalValue = originalFunction(inputParameter)\n    originalValue.headOption\n  } }\n  val tags: RDD[Tag] = tagsCSV.flatMap(parseTags)\n  (ratings, movies, tags)\n}",
      "originalCode" : "def parseRDDs(ratingsCSV: RDD[String], moviesCSV: RDD[String], tagsCSV: RDD[String]): (RDD[Rating], RDD[Movie], RDD[Tag]) = {\n    val ratings: RDD[Rating] = ratingsCSV.flatMap(parseRatings)\n    val movies: RDD[Movie] = moviesCSV.flatMap(parseMovies)\n    val tags: RDD[Tag] = tagsCSV.flatMap(parseTags)\n    (ratings, movies, tags)\n  }",
      "status" : "Equivalent"
    },
    {
      "id" : 6,
      "originalProgramId" : 1,
      "mutationOperator" : "MTR",
      "mutationOperatorDescription" : "Mapping Transformation Replacement",
      "mutantCode" : "def parseRDDs(ratingsCSV: RDD[String], moviesCSV: RDD[String], tagsCSV: RDD[String]): (RDD[Rating], RDD[Movie], RDD[Tag]) = {\n  val ratings: RDD[Rating] = ratingsCSV.flatMap(parseRatings)\n  val movies: RDD[Movie] = moviesCSV.flatMap { (inputParameter: String) => {\n    val originalFunction = parseMovies(_)\n    val originalValue = originalFunction(inputParameter)\n    originalValue.toList.tail\n  } }\n  val tags: RDD[Tag] = tagsCSV.flatMap(parseTags)\n  (ratings, movies, tags)\n}",
      "originalCode" : "def parseRDDs(ratingsCSV: RDD[String], moviesCSV: RDD[String], tagsCSV: RDD[String]): (RDD[Rating], RDD[Movie], RDD[Tag]) = {\n    val ratings: RDD[Rating] = ratingsCSV.flatMap(parseRatings)\n    val movies: RDD[Movie] = moviesCSV.flatMap(parseMovies)\n    val tags: RDD[Tag] = tagsCSV.flatMap(parseTags)\n    (ratings, movies, tags)\n  }",
      "status" : "Killed"
    },
    {
      "id" : 7,
      "originalProgramId" : 1,
      "mutationOperator" : "MTR",
      "mutationOperatorDescription" : "Mapping Transformation Replacement",
      "mutantCode" : "def parseRDDs(ratingsCSV: RDD[String], moviesCSV: RDD[String], tagsCSV: RDD[String]): (RDD[Rating], RDD[Movie], RDD[Tag]) = {\n  val ratings: RDD[Rating] = ratingsCSV.flatMap(parseRatings)\n  val movies: RDD[Movie] = moviesCSV.flatMap { (inputParameter: String) => {\n    val originalFunction = parseMovies(_)\n    val originalValue = originalFunction(inputParameter)\n    originalValue.toList.reverse\n  } }\n  val tags: RDD[Tag] = tagsCSV.flatMap(parseTags)\n  (ratings, movies, tags)\n}",
      "originalCode" : "def parseRDDs(ratingsCSV: RDD[String], moviesCSV: RDD[String], tagsCSV: RDD[String]): (RDD[Rating], RDD[Movie], RDD[Tag]) = {\n    val ratings: RDD[Rating] = ratingsCSV.flatMap(parseRatings)\n    val movies: RDD[Movie] = moviesCSV.flatMap(parseMovies)\n    val tags: RDD[Tag] = tagsCSV.flatMap(parseTags)\n    (ratings, movies, tags)\n  }",
      "status" : "Equivalent"
    },
    {
      "id" : 8,
      "originalProgramId" : 1,
      "mutationOperator" : "MTR",
      "mutationOperatorDescription" : "Mapping Transformation Replacement",
      "mutantCode" : "def parseRDDs(ratingsCSV: RDD[String], moviesCSV: RDD[String], tagsCSV: RDD[String]): (RDD[Rating], RDD[Movie], RDD[Tag]) = {\n  val ratings: RDD[Rating] = ratingsCSV.flatMap(parseRatings)\n  val movies: RDD[Movie] = moviesCSV.flatMap { (inputParameter: String) => {\n    val originalFunction = parseMovies(_)\n    val originalValue = originalFunction(inputParameter)\n    List[Movie]()\n  } }\n  val tags: RDD[Tag] = tagsCSV.flatMap(parseTags)\n  (ratings, movies, tags)\n}",
      "originalCode" : "def parseRDDs(ratingsCSV: RDD[String], moviesCSV: RDD[String], tagsCSV: RDD[String]): (RDD[Rating], RDD[Movie], RDD[Tag]) = {\n    val ratings: RDD[Rating] = ratingsCSV.flatMap(parseRatings)\n    val movies: RDD[Movie] = moviesCSV.flatMap(parseMovies)\n    val tags: RDD[Tag] = tagsCSV.flatMap(parseTags)\n    (ratings, movies, tags)\n  }",
      "status" : "Killed"
    },
    {
      "id" : 9,
      "originalProgramId" : 1,
      "mutationOperator" : "MTR",
      "mutationOperatorDescription" : "Mapping Transformation Replacement",
      "mutantCode" : "def parseRDDs(ratingsCSV: RDD[String], moviesCSV: RDD[String], tagsCSV: RDD[String]): (RDD[Rating], RDD[Movie], RDD[Tag]) = {\n  val ratings: RDD[Rating] = ratingsCSV.flatMap(parseRatings)\n  val movies: RDD[Movie] = moviesCSV.flatMap(parseMovies)\n  val tags: RDD[Tag] = tagsCSV.flatMap { (inputParameter: String) => {\n    val originalFunction = parseTags(_)\n    val originalValue = originalFunction(inputParameter)\n    originalValue.headOption\n  } }\n  (ratings, movies, tags)\n}",
      "originalCode" : "def parseRDDs(ratingsCSV: RDD[String], moviesCSV: RDD[String], tagsCSV: RDD[String]): (RDD[Rating], RDD[Movie], RDD[Tag]) = {\n    val ratings: RDD[Rating] = ratingsCSV.flatMap(parseRatings)\n    val movies: RDD[Movie] = moviesCSV.flatMap(parseMovies)\n    val tags: RDD[Tag] = tagsCSV.flatMap(parseTags)\n    (ratings, movies, tags)\n  }",
      "status" : "Equivalent"
    },
    {
      "id" : 10,
      "originalProgramId" : 1,
      "mutationOperator" : "MTR",
      "mutationOperatorDescription" : "Mapping Transformation Replacement",
      "mutantCode" : "def parseRDDs(ratingsCSV: RDD[String], moviesCSV: RDD[String], tagsCSV: RDD[String]): (RDD[Rating], RDD[Movie], RDD[Tag]) = {\n  val ratings: RDD[Rating] = ratingsCSV.flatMap(parseRatings)\n  val movies: RDD[Movie] = moviesCSV.flatMap(parseMovies)\n  val tags: RDD[Tag] = tagsCSV.flatMap { (inputParameter: String) => {\n    val originalFunction = parseTags(_)\n    val originalValue = originalFunction(inputParameter)\n    originalValue.toList.tail\n  } }\n  (ratings, movies, tags)\n}",
      "originalCode" : "def parseRDDs(ratingsCSV: RDD[String], moviesCSV: RDD[String], tagsCSV: RDD[String]): (RDD[Rating], RDD[Movie], RDD[Tag]) = {\n    val ratings: RDD[Rating] = ratingsCSV.flatMap(parseRatings)\n    val movies: RDD[Movie] = moviesCSV.flatMap(parseMovies)\n    val tags: RDD[Tag] = tagsCSV.flatMap(parseTags)\n    (ratings, movies, tags)\n  }",
      "status" : "Killed"
    },
    {
      "id" : 11,
      "originalProgramId" : 1,
      "mutationOperator" : "MTR",
      "mutationOperatorDescription" : "Mapping Transformation Replacement",
      "mutantCode" : "def parseRDDs(ratingsCSV: RDD[String], moviesCSV: RDD[String], tagsCSV: RDD[String]): (RDD[Rating], RDD[Movie], RDD[Tag]) = {\n  val ratings: RDD[Rating] = ratingsCSV.flatMap(parseRatings)\n  val movies: RDD[Movie] = moviesCSV.flatMap(parseMovies)\n  val tags: RDD[Tag] = tagsCSV.flatMap { (inputParameter: String) => {\n    val originalFunction = parseTags(_)\n    val originalValue = originalFunction(inputParameter)\n    originalValue.toList.reverse\n  } }\n  (ratings, movies, tags)\n}",
      "originalCode" : "def parseRDDs(ratingsCSV: RDD[String], moviesCSV: RDD[String], tagsCSV: RDD[String]): (RDD[Rating], RDD[Movie], RDD[Tag]) = {\n    val ratings: RDD[Rating] = ratingsCSV.flatMap(parseRatings)\n    val movies: RDD[Movie] = moviesCSV.flatMap(parseMovies)\n    val tags: RDD[Tag] = tagsCSV.flatMap(parseTags)\n    (ratings, movies, tags)\n  }",
      "status" : "Equivalent"
    },
    {
      "id" : 12,
      "originalProgramId" : 1,
      "mutationOperator" : "MTR",
      "mutationOperatorDescription" : "Mapping Transformation Replacement",
      "mutantCode" : "def parseRDDs(ratingsCSV: RDD[String], moviesCSV: RDD[String], tagsCSV: RDD[String]): (RDD[Rating], RDD[Movie], RDD[Tag]) = {\n  val ratings: RDD[Rating] = ratingsCSV.flatMap(parseRatings)\n  val movies: RDD[Movie] = moviesCSV.flatMap(parseMovies)\n  val tags: RDD[Tag] = tagsCSV.flatMap { (inputParameter: String) => {\n    val originalFunction = parseTags(_)\n    val originalValue = originalFunction(inputParameter)\n    List[Tag]()\n  } }\n  (ratings, movies, tags)\n}",
      "originalCode" : "def parseRDDs(ratingsCSV: RDD[String], moviesCSV: RDD[String], tagsCSV: RDD[String]): (RDD[Rating], RDD[Movie], RDD[Tag]) = {\n    val ratings: RDD[Rating] = ratingsCSV.flatMap(parseRatings)\n    val movies: RDD[Movie] = moviesCSV.flatMap(parseMovies)\n    val tags: RDD[Tag] = tagsCSV.flatMap(parseTags)\n    (ratings, movies, tags)\n  }",
      "status" : "Killed"
    },
    {
      "id" : 13,
      "originalProgramId" : 1,
      "mutationOperator" : "DTI",
      "mutationOperatorDescription" : "Distinct Transformation Insertion",
      "mutantCode" : "def parseRDDs(ratingsCSV: RDD[String], moviesCSV: RDD[String], tagsCSV: RDD[String]): (RDD[Rating], RDD[Movie], RDD[Tag]) = {\n  val ratings: RDD[Rating] = ratingsCSV.flatMap(parseRatings).distinct()\n  val movies: RDD[Movie] = moviesCSV.flatMap(parseMovies)\n  val tags: RDD[Tag] = tagsCSV.flatMap(parseTags)\n  (ratings, movies, tags)\n}",
      "originalCode" : "def parseRDDs(ratingsCSV: RDD[String], moviesCSV: RDD[String], tagsCSV: RDD[String]): (RDD[Rating], RDD[Movie], RDD[Tag]) = {\n    val ratings: RDD[Rating] = ratingsCSV.flatMap(parseRatings)\n    val movies: RDD[Movie] = moviesCSV.flatMap(parseMovies)\n    val tags: RDD[Tag] = tagsCSV.flatMap(parseTags)\n    (ratings, movies, tags)\n  }",
      "status" : "Lived"
    },
    {
      "id" : 14,
      "originalProgramId" : 1,
      "mutationOperator" : "DTI",
      "mutationOperatorDescription" : "Distinct Transformation Insertion",
      "mutantCode" : "def parseRDDs(ratingsCSV: RDD[String], moviesCSV: RDD[String], tagsCSV: RDD[String]): (RDD[Rating], RDD[Movie], RDD[Tag]) = {\n  val ratings: RDD[Rating] = ratingsCSV.flatMap(parseRatings)\n  val movies: RDD[Movie] = moviesCSV.flatMap(parseMovies).distinct()\n  val tags: RDD[Tag] = tagsCSV.flatMap(parseTags)\n  (ratings, movies, tags)\n}",
      "originalCode" : "def parseRDDs(ratingsCSV: RDD[String], moviesCSV: RDD[String], tagsCSV: RDD[String]): (RDD[Rating], RDD[Movie], RDD[Tag]) = {\n    val ratings: RDD[Rating] = ratingsCSV.flatMap(parseRatings)\n    val movies: RDD[Movie] = moviesCSV.flatMap(parseMovies)\n    val tags: RDD[Tag] = tagsCSV.flatMap(parseTags)\n    (ratings, movies, tags)\n  }",
      "status" : "Lived"
    },
    {
      "id" : 15,
      "originalProgramId" : 1,
      "mutationOperator" : "DTI",
      "mutationOperatorDescription" : "Distinct Transformation Insertion",
      "mutantCode" : "def parseRDDs(ratingsCSV: RDD[String], moviesCSV: RDD[String], tagsCSV: RDD[String]): (RDD[Rating], RDD[Movie], RDD[Tag]) = {\n  val ratings: RDD[Rating] = ratingsCSV.flatMap(parseRatings)\n  val movies: RDD[Movie] = moviesCSV.flatMap(parseMovies)\n  val tags: RDD[Tag] = tagsCSV.flatMap(parseTags).distinct()\n  (ratings, movies, tags)\n}",
      "originalCode" : "def parseRDDs(ratingsCSV: RDD[String], moviesCSV: RDD[String], tagsCSV: RDD[String]): (RDD[Rating], RDD[Movie], RDD[Tag]) = {\n    val ratings: RDD[Rating] = ratingsCSV.flatMap(parseRatings)\n    val movies: RDD[Movie] = moviesCSV.flatMap(parseMovies)\n    val tags: RDD[Tag] = tagsCSV.flatMap(parseTags)\n    (ratings, movies, tags)\n  }",
      "status" : "Lived"
    },
    {
      "id" : 16,
      "originalProgramId" : 2,
      "mutationOperator" : "UTS",
      "mutationOperatorDescription" : "Unary Transformation Swap",
      "mutantCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n  val yearTuple: RDD[(Int, Int)] = movies.map { (m: Movie) => (m.year, 1) }\n  val moviesPerYear: RDD[(Int, Int)] = yearTuple.map { (t: (Int, Int)) => (t._2, t._1) }\n  val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.reduceByKey { (a: Int, b: Int) => a + b }\n  val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n  moviesPerYearInverseSorted\n}",
      "originalCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n    val yearTuple: RDD[(Int, Int)] = movies.map((m: Movie) => (m.year, 1))\n    val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey((a: Int, b: Int) => a + b)\n    val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map((t: (Int, Int)) => (t._2, t._1))\n    val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n    moviesPerYearInverseSorted\n  }",
      "status" : "Killed"
    },
    {
      "id" : 17,
      "originalProgramId" : 2,
      "mutationOperator" : "UTS",
      "mutationOperatorDescription" : "Unary Transformation Swap",
      "mutantCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n  val yearTuple: RDD[(Int, Int)] = movies.map { (m: Movie) => (m.year, 1) }\n  val moviesPerYear: RDD[(Int, Int)] = yearTuple.sortByKey(false)\n  val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map { (t: (Int, Int)) => (t._2, t._1) }\n  val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.reduceByKey { (a: Int, b: Int) => a + b }\n  moviesPerYearInverseSorted\n}",
      "originalCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n    val yearTuple: RDD[(Int, Int)] = movies.map((m: Movie) => (m.year, 1))\n    val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey((a: Int, b: Int) => a + b)\n    val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map((t: (Int, Int)) => (t._2, t._1))\n    val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n    moviesPerYearInverseSorted\n  }",
      "status" : "Killed"
    },
    {
      "id" : 18,
      "originalProgramId" : 2,
      "mutationOperator" : "UTS",
      "mutationOperatorDescription" : "Unary Transformation Swap",
      "mutantCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n  val yearTuple: RDD[(Int, Int)] = movies.map { (m: Movie) => (m.year, 1) }\n  val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey { (a: Int, b: Int) => a + b }\n  val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.sortByKey(false)\n  val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.map { (t: (Int, Int)) => (t._2, t._1) }\n  moviesPerYearInverseSorted\n}",
      "originalCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n    val yearTuple: RDD[(Int, Int)] = movies.map((m: Movie) => (m.year, 1))\n    val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey((a: Int, b: Int) => a + b)\n    val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map((t: (Int, Int)) => (t._2, t._1))\n    val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n    moviesPerYearInverseSorted\n  }",
      "status" : "Lived"
    },
    {
      "id" : 19,
      "originalProgramId" : 2,
      "mutationOperator" : "UTR",
      "mutationOperatorDescription" : "Unary Transformation Replacement",
      "mutantCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n  val yearTuple: RDD[(Int, Int)] = movies.map { (m: Movie) => (m.year, 1) }\n  val moviesPerYear: RDD[(Int, Int)] = yearTuple.map { (t: (Int, Int)) => (t._2, t._1) }\n  val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map { (t: (Int, Int)) => (t._2, t._1) }\n  val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n  moviesPerYearInverseSorted\n}",
      "originalCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n    val yearTuple: RDD[(Int, Int)] = movies.map((m: Movie) => (m.year, 1))\n    val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey((a: Int, b: Int) => a + b)\n    val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map((t: (Int, Int)) => (t._2, t._1))\n    val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n    moviesPerYearInverseSorted\n  }",
      "status" : "Killed"
    },
    {
      "id" : 20,
      "originalProgramId" : 2,
      "mutationOperator" : "UTR",
      "mutationOperatorDescription" : "Unary Transformation Replacement",
      "mutantCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n  val yearTuple: RDD[(Int, Int)] = movies.map { (m: Movie) => (m.year, 1) }\n  val moviesPerYear: RDD[(Int, Int)] = yearTuple.sortByKey(false)\n  val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map { (t: (Int, Int)) => (t._2, t._1) }\n  val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n  moviesPerYearInverseSorted\n}",
      "originalCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n    val yearTuple: RDD[(Int, Int)] = movies.map((m: Movie) => (m.year, 1))\n    val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey((a: Int, b: Int) => a + b)\n    val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map((t: (Int, Int)) => (t._2, t._1))\n    val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n    moviesPerYearInverseSorted\n  }",
      "status" : "Killed"
    },
    {
      "id" : 21,
      "originalProgramId" : 2,
      "mutationOperator" : "UTR",
      "mutationOperatorDescription" : "Unary Transformation Replacement",
      "mutantCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n  val yearTuple: RDD[(Int, Int)] = movies.map { (m: Movie) => (m.year, 1) }\n  val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey { (a: Int, b: Int) => a + b }\n  val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.reduceByKey { (a: Int, b: Int) => a + b }\n  val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n  moviesPerYearInverseSorted\n}",
      "originalCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n    val yearTuple: RDD[(Int, Int)] = movies.map((m: Movie) => (m.year, 1))\n    val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey((a: Int, b: Int) => a + b)\n    val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map((t: (Int, Int)) => (t._2, t._1))\n    val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n    moviesPerYearInverseSorted\n  }",
      "status" : "Killed"
    },
    {
      "id" : 22,
      "originalProgramId" : 2,
      "mutationOperator" : "UTR",
      "mutationOperatorDescription" : "Unary Transformation Replacement",
      "mutantCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n  val yearTuple: RDD[(Int, Int)] = movies.map { (m: Movie) => (m.year, 1) }\n  val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey { (a: Int, b: Int) => a + b }\n  val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.sortByKey(false)\n  val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n  moviesPerYearInverseSorted\n}",
      "originalCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n    val yearTuple: RDD[(Int, Int)] = movies.map((m: Movie) => (m.year, 1))\n    val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey((a: Int, b: Int) => a + b)\n    val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map((t: (Int, Int)) => (t._2, t._1))\n    val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n    moviesPerYearInverseSorted\n  }",
      "status" : "Killed"
    },
    {
      "id" : 23,
      "originalProgramId" : 2,
      "mutationOperator" : "UTR",
      "mutationOperatorDescription" : "Unary Transformation Replacement",
      "mutantCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n  val yearTuple: RDD[(Int, Int)] = movies.map { (m: Movie) => (m.year, 1) }\n  val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey { (a: Int, b: Int) => a + b }\n  val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map { (t: (Int, Int)) => (t._2, t._1) }\n  val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.reduceByKey { (a: Int, b: Int) => a + b }\n  moviesPerYearInverseSorted\n}",
      "originalCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n    val yearTuple: RDD[(Int, Int)] = movies.map((m: Movie) => (m.year, 1))\n    val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey((a: Int, b: Int) => a + b)\n    val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map((t: (Int, Int)) => (t._2, t._1))\n    val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n    moviesPerYearInverseSorted\n  }",
      "status" : "Lived"
    },
    {
      "id" : 24,
      "originalProgramId" : 2,
      "mutationOperator" : "UTR",
      "mutationOperatorDescription" : "Unary Transformation Replacement",
      "mutantCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n  val yearTuple: RDD[(Int, Int)] = movies.map { (m: Movie) => (m.year, 1) }\n  val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey { (a: Int, b: Int) => a + b }\n  val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map { (t: (Int, Int)) => (t._2, t._1) }\n  val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.map { (t: (Int, Int)) => (t._2, t._1) }\n  moviesPerYearInverseSorted\n}",
      "originalCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n    val yearTuple: RDD[(Int, Int)] = movies.map((m: Movie) => (m.year, 1))\n    val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey((a: Int, b: Int) => a + b)\n    val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map((t: (Int, Int)) => (t._2, t._1))\n    val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n    moviesPerYearInverseSorted\n  }",
      "status" : "Killed"
    },
    {
      "id" : 25,
      "originalProgramId" : 2,
      "mutationOperator" : "UTD",
      "mutationOperatorDescription" : "Unary Transformation Deletion",
      "mutantCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n  val yearTuple: RDD[(Int, Int)] = movies.map { (m: Movie) => (m.year, 1) }\n  val moviesPerYear: RDD[(Int, Int)] = yearTuple\n  val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map { (t: (Int, Int)) => (t._2, t._1) }\n  val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n  moviesPerYearInverseSorted\n}",
      "originalCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n    val yearTuple: RDD[(Int, Int)] = movies.map((m: Movie) => (m.year, 1))\n    val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey((a: Int, b: Int) => a + b)\n    val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map((t: (Int, Int)) => (t._2, t._1))\n    val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n    moviesPerYearInverseSorted\n  }",
      "status" : "Killed"
    },
    {
      "id" : 26,
      "originalProgramId" : 2,
      "mutationOperator" : "UTD",
      "mutationOperatorDescription" : "Unary Transformation Deletion",
      "mutantCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n  val yearTuple: RDD[(Int, Int)] = movies.map { (m: Movie) => (m.year, 1) }\n  val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey { (a: Int, b: Int) => a + b }\n  val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear\n  val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n  moviesPerYearInverseSorted\n}",
      "originalCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n    val yearTuple: RDD[(Int, Int)] = movies.map((m: Movie) => (m.year, 1))\n    val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey((a: Int, b: Int) => a + b)\n    val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map((t: (Int, Int)) => (t._2, t._1))\n    val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n    moviesPerYearInverseSorted\n  }",
      "status" : "Killed"
    },
    {
      "id" : 27,
      "originalProgramId" : 2,
      "mutationOperator" : "UTD",
      "mutationOperatorDescription" : "Unary Transformation Deletion",
      "mutantCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n  val yearTuple: RDD[(Int, Int)] = movies.map { (m: Movie) => (m.year, 1) }\n  val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey { (a: Int, b: Int) => a + b }\n  val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map { (t: (Int, Int)) => (t._2, t._1) }\n  val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse\n  moviesPerYearInverseSorted\n}",
      "originalCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n    val yearTuple: RDD[(Int, Int)] = movies.map((m: Movie) => (m.year, 1))\n    val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey((a: Int, b: Int) => a + b)\n    val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map((t: (Int, Int)) => (t._2, t._1))\n    val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n    moviesPerYearInverseSorted\n  }",
      "status" : "Lived"
    },
    {
      "id" : 28,
      "originalProgramId" : 2,
      "mutationOperator" : "MTR",
      "mutationOperatorDescription" : "Mapping Transformation Replacement",
      "mutantCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n  val yearTuple: RDD[(Int, Int)] = movies.map { (inputParameter: Movie) => {\n    val originalFunction = ((m: Movie) => (m.year, 1))(_)\n    val originalValue = originalFunction(inputParameter)\n    (0, originalValue._2)\n  } }\n  val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey { (a: Int, b: Int) => a + b }\n  val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map { (t: (Int, Int)) => (t._2, t._1) }\n  val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n  moviesPerYearInverseSorted\n}",
      "originalCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n    val yearTuple: RDD[(Int, Int)] = movies.map((m: Movie) => (m.year, 1))\n    val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey((a: Int, b: Int) => a + b)\n    val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map((t: (Int, Int)) => (t._2, t._1))\n    val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n    moviesPerYearInverseSorted\n  }",
      "status" : "Killed"
    },
    {
      "id" : 29,
      "originalProgramId" : 2,
      "mutationOperator" : "MTR",
      "mutationOperatorDescription" : "Mapping Transformation Replacement",
      "mutantCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n  val yearTuple: RDD[(Int, Int)] = movies.map { (inputParameter: Movie) => {\n    val originalFunction = ((m: Movie) => (m.year, 1))(_)\n    val originalValue = originalFunction(inputParameter)\n    (1, originalValue._2)\n  } }\n  val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey { (a: Int, b: Int) => a + b }\n  val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map { (t: (Int, Int)) => (t._2, t._1) }\n  val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n  moviesPerYearInverseSorted\n}",
      "originalCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n    val yearTuple: RDD[(Int, Int)] = movies.map((m: Movie) => (m.year, 1))\n    val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey((a: Int, b: Int) => a + b)\n    val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map((t: (Int, Int)) => (t._2, t._1))\n    val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n    moviesPerYearInverseSorted\n  }",
      "status" : "Killed"
    },
    {
      "id" : 30,
      "originalProgramId" : 2,
      "mutationOperator" : "MTR",
      "mutationOperatorDescription" : "Mapping Transformation Replacement",
      "mutantCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n  val yearTuple: RDD[(Int, Int)] = movies.map { (inputParameter: Movie) => {\n    val originalFunction = ((m: Movie) => (m.year, 1))(_)\n    val originalValue = originalFunction(inputParameter)\n    (Int.MaxValue, originalValue._2)\n  } }\n  val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey { (a: Int, b: Int) => a + b }\n  val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map { (t: (Int, Int)) => (t._2, t._1) }\n  val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n  moviesPerYearInverseSorted\n}",
      "originalCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n    val yearTuple: RDD[(Int, Int)] = movies.map((m: Movie) => (m.year, 1))\n    val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey((a: Int, b: Int) => a + b)\n    val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map((t: (Int, Int)) => (t._2, t._1))\n    val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n    moviesPerYearInverseSorted\n  }",
      "status" : "Killed"
    },
    {
      "id" : 31,
      "originalProgramId" : 2,
      "mutationOperator" : "MTR",
      "mutationOperatorDescription" : "Mapping Transformation Replacement",
      "mutantCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n  val yearTuple: RDD[(Int, Int)] = movies.map { (inputParameter: Movie) => {\n    val originalFunction = ((m: Movie) => (m.year, 1))(_)\n    val originalValue = originalFunction(inputParameter)\n    (Int.MinValue, originalValue._2)\n  } }\n  val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey { (a: Int, b: Int) => a + b }\n  val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map { (t: (Int, Int)) => (t._2, t._1) }\n  val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n  moviesPerYearInverseSorted\n}",
      "originalCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n    val yearTuple: RDD[(Int, Int)] = movies.map((m: Movie) => (m.year, 1))\n    val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey((a: Int, b: Int) => a + b)\n    val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map((t: (Int, Int)) => (t._2, t._1))\n    val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n    moviesPerYearInverseSorted\n  }",
      "status" : "Killed"
    },
    {
      "id" : 32,
      "originalProgramId" : 2,
      "mutationOperator" : "MTR",
      "mutationOperatorDescription" : "Mapping Transformation Replacement",
      "mutantCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n  val yearTuple: RDD[(Int, Int)] = movies.map { (inputParameter: Movie) => {\n    val originalFunction = ((m: Movie) => (m.year, 1))(_)\n    val originalValue = originalFunction(inputParameter)\n    (-originalValue._1, originalValue._2)\n  } }\n  val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey { (a: Int, b: Int) => a + b }\n  val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map { (t: (Int, Int)) => (t._2, t._1) }\n  val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n  moviesPerYearInverseSorted\n}",
      "originalCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n    val yearTuple: RDD[(Int, Int)] = movies.map((m: Movie) => (m.year, 1))\n    val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey((a: Int, b: Int) => a + b)\n    val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map((t: (Int, Int)) => (t._2, t._1))\n    val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n    moviesPerYearInverseSorted\n  }",
      "status" : "Killed"
    },
    {
      "id" : 33,
      "originalProgramId" : 2,
      "mutationOperator" : "MTR",
      "mutationOperatorDescription" : "Mapping Transformation Replacement",
      "mutantCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n  val yearTuple: RDD[(Int, Int)] = movies.map { (inputParameter: Movie) => {\n    val originalFunction = ((m: Movie) => (m.year, 1))(_)\n    val originalValue = originalFunction(inputParameter)\n    (originalValue._1, 0)\n  } }\n  val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey { (a: Int, b: Int) => a + b }\n  val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map { (t: (Int, Int)) => (t._2, t._1) }\n  val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n  moviesPerYearInverseSorted\n}",
      "originalCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n    val yearTuple: RDD[(Int, Int)] = movies.map((m: Movie) => (m.year, 1))\n    val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey((a: Int, b: Int) => a + b)\n    val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map((t: (Int, Int)) => (t._2, t._1))\n    val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n    moviesPerYearInverseSorted\n  }",
      "status" : "Killed"
    },
    {
      "id" : 34,
      "originalProgramId" : 2,
      "mutationOperator" : "MTR",
      "mutationOperatorDescription" : "Mapping Transformation Replacement",
      "mutantCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n  val yearTuple: RDD[(Int, Int)] = movies.map { (inputParameter: Movie) => {\n    val originalFunction = ((m: Movie) => (m.year, 1))(_)\n    val originalValue = originalFunction(inputParameter)\n    (originalValue._1, 1)\n  } }\n  val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey { (a: Int, b: Int) => a + b }\n  val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map { (t: (Int, Int)) => (t._2, t._1) }\n  val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n  moviesPerYearInverseSorted\n}",
      "originalCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n    val yearTuple: RDD[(Int, Int)] = movies.map((m: Movie) => (m.year, 1))\n    val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey((a: Int, b: Int) => a + b)\n    val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map((t: (Int, Int)) => (t._2, t._1))\n    val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n    moviesPerYearInverseSorted\n  }",
      "status" : "Equivalent"
    },
    {
      "id" : 35,
      "originalProgramId" : 2,
      "mutationOperator" : "MTR",
      "mutationOperatorDescription" : "Mapping Transformation Replacement",
      "mutantCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n  val yearTuple: RDD[(Int, Int)] = movies.map { (inputParameter: Movie) => {\n    val originalFunction = ((m: Movie) => (m.year, 1))(_)\n    val originalValue = originalFunction(inputParameter)\n    (originalValue._1, Int.MaxValue)\n  } }\n  val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey { (a: Int, b: Int) => a + b }\n  val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map { (t: (Int, Int)) => (t._2, t._1) }\n  val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n  moviesPerYearInverseSorted\n}",
      "originalCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n    val yearTuple: RDD[(Int, Int)] = movies.map((m: Movie) => (m.year, 1))\n    val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey((a: Int, b: Int) => a + b)\n    val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map((t: (Int, Int)) => (t._2, t._1))\n    val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n    moviesPerYearInverseSorted\n  }",
      "status" : "Killed"
    },
    {
      "id" : 36,
      "originalProgramId" : 2,
      "mutationOperator" : "MTR",
      "mutationOperatorDescription" : "Mapping Transformation Replacement",
      "mutantCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n  val yearTuple: RDD[(Int, Int)] = movies.map { (inputParameter: Movie) => {\n    val originalFunction = ((m: Movie) => (m.year, 1))(_)\n    val originalValue = originalFunction(inputParameter)\n    (originalValue._1, Int.MinValue)\n  } }\n  val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey { (a: Int, b: Int) => a + b }\n  val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map { (t: (Int, Int)) => (t._2, t._1) }\n  val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n  moviesPerYearInverseSorted\n}",
      "originalCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n    val yearTuple: RDD[(Int, Int)] = movies.map((m: Movie) => (m.year, 1))\n    val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey((a: Int, b: Int) => a + b)\n    val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map((t: (Int, Int)) => (t._2, t._1))\n    val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n    moviesPerYearInverseSorted\n  }",
      "status" : "Killed"
    },
    {
      "id" : 37,
      "originalProgramId" : 2,
      "mutationOperator" : "MTR",
      "mutationOperatorDescription" : "Mapping Transformation Replacement",
      "mutantCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n  val yearTuple: RDD[(Int, Int)] = movies.map { (inputParameter: Movie) => {\n    val originalFunction = ((m: Movie) => (m.year, 1))(_)\n    val originalValue = originalFunction(inputParameter)\n    (originalValue._1, -originalValue._2)\n  } }\n  val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey { (a: Int, b: Int) => a + b }\n  val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map { (t: (Int, Int)) => (t._2, t._1) }\n  val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n  moviesPerYearInverseSorted\n}",
      "originalCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n    val yearTuple: RDD[(Int, Int)] = movies.map((m: Movie) => (m.year, 1))\n    val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey((a: Int, b: Int) => a + b)\n    val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map((t: (Int, Int)) => (t._2, t._1))\n    val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n    moviesPerYearInverseSorted\n  }",
      "status" : "Killed"
    },
    {
      "id" : 38,
      "originalProgramId" : 2,
      "mutationOperator" : "MTR",
      "mutationOperatorDescription" : "Mapping Transformation Replacement",
      "mutantCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n  val yearTuple: RDD[(Int, Int)] = movies.map { (m: Movie) => (m.year, 1) }\n  val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey { (a: Int, b: Int) => a + b }\n  val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map { (inputParameter: (Int, Int)) => {\n    val originalFunction = ((t: (Int, Int)) => (t._2, t._1))(_)\n    val originalValue = originalFunction(inputParameter)\n    (0, originalValue._2)\n  } }\n  val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n  moviesPerYearInverseSorted\n}",
      "originalCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n    val yearTuple: RDD[(Int, Int)] = movies.map((m: Movie) => (m.year, 1))\n    val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey((a: Int, b: Int) => a + b)\n    val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map((t: (Int, Int)) => (t._2, t._1))\n    val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n    moviesPerYearInverseSorted\n  }",
      "status" : "Killed"
    },
    {
      "id" : 39,
      "originalProgramId" : 2,
      "mutationOperator" : "MTR",
      "mutationOperatorDescription" : "Mapping Transformation Replacement",
      "mutantCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n  val yearTuple: RDD[(Int, Int)] = movies.map { (m: Movie) => (m.year, 1) }\n  val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey { (a: Int, b: Int) => a + b }\n  val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map { (inputParameter: (Int, Int)) => {\n    val originalFunction = ((t: (Int, Int)) => (t._2, t._1))(_)\n    val originalValue = originalFunction(inputParameter)\n    (1, originalValue._2)\n  } }\n  val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n  moviesPerYearInverseSorted\n}",
      "originalCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n    val yearTuple: RDD[(Int, Int)] = movies.map((m: Movie) => (m.year, 1))\n    val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey((a: Int, b: Int) => a + b)\n    val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map((t: (Int, Int)) => (t._2, t._1))\n    val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n    moviesPerYearInverseSorted\n  }",
      "status" : "Killed"
    },
    {
      "id" : 40,
      "originalProgramId" : 2,
      "mutationOperator" : "MTR",
      "mutationOperatorDescription" : "Mapping Transformation Replacement",
      "mutantCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n  val yearTuple: RDD[(Int, Int)] = movies.map { (m: Movie) => (m.year, 1) }\n  val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey { (a: Int, b: Int) => a + b }\n  val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map { (inputParameter: (Int, Int)) => {\n    val originalFunction = ((t: (Int, Int)) => (t._2, t._1))(_)\n    val originalValue = originalFunction(inputParameter)\n    (Int.MaxValue, originalValue._2)\n  } }\n  val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n  moviesPerYearInverseSorted\n}",
      "originalCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n    val yearTuple: RDD[(Int, Int)] = movies.map((m: Movie) => (m.year, 1))\n    val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey((a: Int, b: Int) => a + b)\n    val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map((t: (Int, Int)) => (t._2, t._1))\n    val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n    moviesPerYearInverseSorted\n  }",
      "status" : "Killed"
    },
    {
      "id" : 41,
      "originalProgramId" : 2,
      "mutationOperator" : "MTR",
      "mutationOperatorDescription" : "Mapping Transformation Replacement",
      "mutantCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n  val yearTuple: RDD[(Int, Int)] = movies.map { (m: Movie) => (m.year, 1) }\n  val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey { (a: Int, b: Int) => a + b }\n  val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map { (inputParameter: (Int, Int)) => {\n    val originalFunction = ((t: (Int, Int)) => (t._2, t._1))(_)\n    val originalValue = originalFunction(inputParameter)\n    (Int.MinValue, originalValue._2)\n  } }\n  val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n  moviesPerYearInverseSorted\n}",
      "originalCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n    val yearTuple: RDD[(Int, Int)] = movies.map((m: Movie) => (m.year, 1))\n    val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey((a: Int, b: Int) => a + b)\n    val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map((t: (Int, Int)) => (t._2, t._1))\n    val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n    moviesPerYearInverseSorted\n  }",
      "status" : "Killed"
    },
    {
      "id" : 42,
      "originalProgramId" : 2,
      "mutationOperator" : "MTR",
      "mutationOperatorDescription" : "Mapping Transformation Replacement",
      "mutantCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n  val yearTuple: RDD[(Int, Int)] = movies.map { (m: Movie) => (m.year, 1) }\n  val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey { (a: Int, b: Int) => a + b }\n  val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map { (inputParameter: (Int, Int)) => {\n    val originalFunction = ((t: (Int, Int)) => (t._2, t._1))(_)\n    val originalValue = originalFunction(inputParameter)\n    (-originalValue._1, originalValue._2)\n  } }\n  val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n  moviesPerYearInverseSorted\n}",
      "originalCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n    val yearTuple: RDD[(Int, Int)] = movies.map((m: Movie) => (m.year, 1))\n    val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey((a: Int, b: Int) => a + b)\n    val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map((t: (Int, Int)) => (t._2, t._1))\n    val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n    moviesPerYearInverseSorted\n  }",
      "status" : "Killed"
    },
    {
      "id" : 43,
      "originalProgramId" : 2,
      "mutationOperator" : "MTR",
      "mutationOperatorDescription" : "Mapping Transformation Replacement",
      "mutantCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n  val yearTuple: RDD[(Int, Int)] = movies.map { (m: Movie) => (m.year, 1) }\n  val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey { (a: Int, b: Int) => a + b }\n  val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map { (inputParameter: (Int, Int)) => {\n    val originalFunction = ((t: (Int, Int)) => (t._2, t._1))(_)\n    val originalValue = originalFunction(inputParameter)\n    (originalValue._1, 0)\n  } }\n  val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n  moviesPerYearInverseSorted\n}",
      "originalCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n    val yearTuple: RDD[(Int, Int)] = movies.map((m: Movie) => (m.year, 1))\n    val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey((a: Int, b: Int) => a + b)\n    val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map((t: (Int, Int)) => (t._2, t._1))\n    val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n    moviesPerYearInverseSorted\n  }",
      "status" : "Killed"
    },
    {
      "id" : 44,
      "originalProgramId" : 2,
      "mutationOperator" : "MTR",
      "mutationOperatorDescription" : "Mapping Transformation Replacement",
      "mutantCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n  val yearTuple: RDD[(Int, Int)] = movies.map { (m: Movie) => (m.year, 1) }\n  val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey { (a: Int, b: Int) => a + b }\n  val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map { (inputParameter: (Int, Int)) => {\n    val originalFunction = ((t: (Int, Int)) => (t._2, t._1))(_)\n    val originalValue = originalFunction(inputParameter)\n    (originalValue._1, 1)\n  } }\n  val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n  moviesPerYearInverseSorted\n}",
      "originalCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n    val yearTuple: RDD[(Int, Int)] = movies.map((m: Movie) => (m.year, 1))\n    val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey((a: Int, b: Int) => a + b)\n    val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map((t: (Int, Int)) => (t._2, t._1))\n    val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n    moviesPerYearInverseSorted\n  }",
      "status" : "Killed"
    },
    {
      "id" : 45,
      "originalProgramId" : 2,
      "mutationOperator" : "MTR",
      "mutationOperatorDescription" : "Mapping Transformation Replacement",
      "mutantCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n  val yearTuple: RDD[(Int, Int)] = movies.map { (m: Movie) => (m.year, 1) }\n  val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey { (a: Int, b: Int) => a + b }\n  val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map { (inputParameter: (Int, Int)) => {\n    val originalFunction = ((t: (Int, Int)) => (t._2, t._1))(_)\n    val originalValue = originalFunction(inputParameter)\n    (originalValue._1, Int.MaxValue)\n  } }\n  val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n  moviesPerYearInverseSorted\n}",
      "originalCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n    val yearTuple: RDD[(Int, Int)] = movies.map((m: Movie) => (m.year, 1))\n    val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey((a: Int, b: Int) => a + b)\n    val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map((t: (Int, Int)) => (t._2, t._1))\n    val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n    moviesPerYearInverseSorted\n  }",
      "status" : "Killed"
    },
    {
      "id" : 46,
      "originalProgramId" : 2,
      "mutationOperator" : "MTR",
      "mutationOperatorDescription" : "Mapping Transformation Replacement",
      "mutantCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n  val yearTuple: RDD[(Int, Int)] = movies.map { (m: Movie) => (m.year, 1) }\n  val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey { (a: Int, b: Int) => a + b }\n  val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map { (inputParameter: (Int, Int)) => {\n    val originalFunction = ((t: (Int, Int)) => (t._2, t._1))(_)\n    val originalValue = originalFunction(inputParameter)\n    (originalValue._1, Int.MinValue)\n  } }\n  val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n  moviesPerYearInverseSorted\n}",
      "originalCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n    val yearTuple: RDD[(Int, Int)] = movies.map((m: Movie) => (m.year, 1))\n    val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey((a: Int, b: Int) => a + b)\n    val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map((t: (Int, Int)) => (t._2, t._1))\n    val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n    moviesPerYearInverseSorted\n  }",
      "status" : "Killed"
    },
    {
      "id" : 47,
      "originalProgramId" : 2,
      "mutationOperator" : "MTR",
      "mutationOperatorDescription" : "Mapping Transformation Replacement",
      "mutantCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n  val yearTuple: RDD[(Int, Int)] = movies.map { (m: Movie) => (m.year, 1) }\n  val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey { (a: Int, b: Int) => a + b }\n  val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map { (inputParameter: (Int, Int)) => {\n    val originalFunction = ((t: (Int, Int)) => (t._2, t._1))(_)\n    val originalValue = originalFunction(inputParameter)\n    (originalValue._1, -originalValue._2)\n  } }\n  val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n  moviesPerYearInverseSorted\n}",
      "originalCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n    val yearTuple: RDD[(Int, Int)] = movies.map((m: Movie) => (m.year, 1))\n    val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey((a: Int, b: Int) => a + b)\n    val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map((t: (Int, Int)) => (t._2, t._1))\n    val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n    moviesPerYearInverseSorted\n  }",
      "status" : "Killed"
    },
    {
      "id" : 48,
      "originalProgramId" : 2,
      "mutationOperator" : "DTI",
      "mutationOperatorDescription" : "Distinct Transformation Insertion",
      "mutantCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n  val yearTuple: RDD[(Int, Int)] = movies.map { (m: Movie) => (m.year, 1) }.distinct()\n  val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey { (a: Int, b: Int) => a + b }\n  val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map { (t: (Int, Int)) => (t._2, t._1) }\n  val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n  moviesPerYearInverseSorted\n}",
      "originalCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n    val yearTuple: RDD[(Int, Int)] = movies.map((m: Movie) => (m.year, 1))\n    val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey((a: Int, b: Int) => a + b)\n    val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map((t: (Int, Int)) => (t._2, t._1))\n    val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n    moviesPerYearInverseSorted\n  }",
      "status" : "Killed"
    },
    {
      "id" : 49,
      "originalProgramId" : 2,
      "mutationOperator" : "DTI",
      "mutationOperatorDescription" : "Distinct Transformation Insertion",
      "mutantCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n  val yearTuple: RDD[(Int, Int)] = movies.map { (m: Movie) => (m.year, 1) }\n  val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey { (a: Int, b: Int) => a + b }.distinct()\n  val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map { (t: (Int, Int)) => (t._2, t._1) }\n  val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n  moviesPerYearInverseSorted\n}",
      "originalCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n    val yearTuple: RDD[(Int, Int)] = movies.map((m: Movie) => (m.year, 1))\n    val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey((a: Int, b: Int) => a + b)\n    val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map((t: (Int, Int)) => (t._2, t._1))\n    val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n    moviesPerYearInverseSorted\n  }",
      "status" : "Equivalent"
    },
    {
      "id" : 50,
      "originalProgramId" : 2,
      "mutationOperator" : "DTI",
      "mutationOperatorDescription" : "Distinct Transformation Insertion",
      "mutantCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n  val yearTuple: RDD[(Int, Int)] = movies.map { (m: Movie) => (m.year, 1) }\n  val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey { (a: Int, b: Int) => a + b }\n  val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map { (t: (Int, Int)) => (t._2, t._1) }.distinct()\n  val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n  moviesPerYearInverseSorted\n}",
      "originalCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n    val yearTuple: RDD[(Int, Int)] = movies.map((m: Movie) => (m.year, 1))\n    val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey((a: Int, b: Int) => a + b)\n    val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map((t: (Int, Int)) => (t._2, t._1))\n    val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n    moviesPerYearInverseSorted\n  }",
      "status" : "Equivalent"
    },
    {
      "id" : 51,
      "originalProgramId" : 2,
      "mutationOperator" : "DTI",
      "mutationOperatorDescription" : "Distinct Transformation Insertion",
      "mutantCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n  val yearTuple: RDD[(Int, Int)] = movies.map { (m: Movie) => (m.year, 1) }\n  val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey { (a: Int, b: Int) => a + b }\n  val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map { (t: (Int, Int)) => (t._2, t._1) }\n  val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false).distinct()\n  moviesPerYearInverseSorted\n}",
      "originalCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n    val yearTuple: RDD[(Int, Int)] = movies.map((m: Movie) => (m.year, 1))\n    val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey((a: Int, b: Int) => a + b)\n    val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map((t: (Int, Int)) => (t._2, t._1))\n    val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n    moviesPerYearInverseSorted\n  }",
      "status" : "Lived"
    },
    {
      "id" : 52,
      "originalProgramId" : 2,
      "mutationOperator" : "ATR",
      "mutationOperatorDescription" : "Aggregation Transformation Replacement",
      "mutantCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n  val yearTuple: RDD[(Int, Int)] = movies.map { (m: Movie) => (m.year, 1) }\n  val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey { (firstParameter: Int, secondParameter: Int) => firstParameter }\n  val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map { (t: (Int, Int)) => (t._2, t._1) }\n  val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n  moviesPerYearInverseSorted\n}",
      "originalCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n    val yearTuple: RDD[(Int, Int)] = movies.map((m: Movie) => (m.year, 1))\n    val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey((a: Int, b: Int) => a + b)\n    val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map((t: (Int, Int)) => (t._2, t._1))\n    val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n    moviesPerYearInverseSorted\n  }",
      "status" : "Killed"
    },
    {
      "id" : 53,
      "originalProgramId" : 2,
      "mutationOperator" : "ATR",
      "mutationOperatorDescription" : "Aggregation Transformation Replacement",
      "mutantCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n  val yearTuple: RDD[(Int, Int)] = movies.map { (m: Movie) => (m.year, 1) }\n  val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey { (firstParameter: Int, secondParameter: Int) => secondParameter }\n  val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map { (t: (Int, Int)) => (t._2, t._1) }\n  val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n  moviesPerYearInverseSorted\n}",
      "originalCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n    val yearTuple: RDD[(Int, Int)] = movies.map((m: Movie) => (m.year, 1))\n    val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey((a: Int, b: Int) => a + b)\n    val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map((t: (Int, Int)) => (t._2, t._1))\n    val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n    moviesPerYearInverseSorted\n  }",
      "status" : "Killed"
    },
    {
      "id" : 54,
      "originalProgramId" : 2,
      "mutationOperator" : "ATR",
      "mutationOperatorDescription" : "Aggregation Transformation Replacement",
      "mutantCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n  val yearTuple: RDD[(Int, Int)] = movies.map { (m: Movie) => (m.year, 1) }\n  val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey { (firstParameter: Int, secondParameter: Int) => {\n    val originalFunction = ((a: Int, b: Int) => a + b)(_, _)\n    originalFunction(firstParameter, firstParameter)\n  } }\n  val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map { (t: (Int, Int)) => (t._2, t._1) }\n  val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n  moviesPerYearInverseSorted\n}",
      "originalCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n    val yearTuple: RDD[(Int, Int)] = movies.map((m: Movie) => (m.year, 1))\n    val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey((a: Int, b: Int) => a + b)\n    val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map((t: (Int, Int)) => (t._2, t._1))\n    val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n    moviesPerYearInverseSorted\n  }",
      "status" : "Lived"
    },
    {
      "id" : 55,
      "originalProgramId" : 2,
      "mutationOperator" : "ATR",
      "mutationOperatorDescription" : "Aggregation Transformation Replacement",
      "mutantCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n  val yearTuple: RDD[(Int, Int)] = movies.map { (m: Movie) => (m.year, 1) }\n  val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey { (firstParameter: Int, secondParameter: Int) => {\n    val originalFunction = ((a: Int, b: Int) => a + b)(_, _)\n    originalFunction(secondParameter, secondParameter)\n  } }\n  val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map { (t: (Int, Int)) => (t._2, t._1) }\n  val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n  moviesPerYearInverseSorted\n}",
      "originalCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n    val yearTuple: RDD[(Int, Int)] = movies.map((m: Movie) => (m.year, 1))\n    val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey((a: Int, b: Int) => a + b)\n    val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map((t: (Int, Int)) => (t._2, t._1))\n    val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n    moviesPerYearInverseSorted\n  }",
      "status" : "Lived"
    },
    {
      "id" : 56,
      "originalProgramId" : 2,
      "mutationOperator" : "ATR",
      "mutationOperatorDescription" : "Aggregation Transformation Replacement",
      "mutantCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n  val yearTuple: RDD[(Int, Int)] = movies.map { (m: Movie) => (m.year, 1) }\n  val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey { (firstParameter: Int, secondParameter: Int) => {\n    val originalFunction = ((a: Int, b: Int) => a + b)(_, _)\n    originalFunction(secondParameter, firstParameter)\n  } }\n  val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map { (t: (Int, Int)) => (t._2, t._1) }\n  val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n  moviesPerYearInverseSorted\n}",
      "originalCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n    val yearTuple: RDD[(Int, Int)] = movies.map((m: Movie) => (m.year, 1))\n    val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey((a: Int, b: Int) => a + b)\n    val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map((t: (Int, Int)) => (t._2, t._1))\n    val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n    moviesPerYearInverseSorted\n  }",
      "status" : "Equivalent"
    },
    {
      "id" : 57,
      "originalProgramId" : 2,
      "mutationOperator" : "OTD",
      "mutationOperatorDescription" : "Order Transformation Deletion",
      "mutantCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n  val yearTuple: RDD[(Int, Int)] = movies.map { (m: Movie) => (m.year, 1) }\n  val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey { (a: Int, b: Int) => a + b }\n  val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map { (t: (Int, Int)) => (t._2, t._1) }\n  val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse\n  moviesPerYearInverseSorted\n}",
      "originalCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n    val yearTuple: RDD[(Int, Int)] = movies.map((m: Movie) => (m.year, 1))\n    val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey((a: Int, b: Int) => a + b)\n    val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map((t: (Int, Int)) => (t._2, t._1))\n    val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n    moviesPerYearInverseSorted\n  }",
      "status" : "Lived"
    },
    {
      "id" : 58,
      "originalProgramId" : 2,
      "mutationOperator" : "OTI",
      "mutationOperatorDescription" : "Order Transformation Inversion",
      "mutantCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n  val yearTuple: RDD[(Int, Int)] = movies.map { (m: Movie) => (m.year, 1) }\n  val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey { (a: Int, b: Int) => a + b }\n  val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map { (t: (Int, Int)) => (t._2, t._1) }\n  val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(true)\n  moviesPerYearInverseSorted\n}",
      "originalCode" : "def moviesPerYearCount(movies: RDD[Movie]) = {\n    val yearTuple: RDD[(Int, Int)] = movies.map((m: Movie) => (m.year, 1))\n    val moviesPerYear: RDD[(Int, Int)] = yearTuple.reduceByKey((a: Int, b: Int) => a + b)\n    val moviesPerYearInverse: RDD[(Int, Int)] = moviesPerYear.map((t: (Int, Int)) => (t._2, t._1))\n    val moviesPerYearInverseSorted: RDD[(Int, Int)] = moviesPerYearInverse.sortByKey(false)\n    moviesPerYearInverseSorted\n  }",
      "status" : "Lived"
    },
    {
      "id" : 59,
      "originalProgramId" : 3,
      "mutationOperator" : "UTD",
      "mutationOperatorDescription" : "Unary Transformation Deletion",
      "mutantCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n  val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap { (m: Movie) => m.genres.map(g => ((m.year, g), 1)) }\n  val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple\n  val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map { (g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey { (m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2 }\n  popularGenresByYear\n}",
      "originalCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n    val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap((m: Movie) => m.genres.map(g => ((m.year, g), 1)))\n    val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey((x: Int, y: Int) => x + y)\n    val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map((g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey((m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2)\n    popularGenresByYear\n  }",
      "status" : "Killed"
    },
    {
      "id" : 60,
      "originalProgramId" : 3,
      "mutationOperator" : "UTD",
      "mutationOperatorDescription" : "Unary Transformation Deletion",
      "mutantCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n  val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap { (m: Movie) => m.genres.map(g => ((m.year, g), 1)) }\n  val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey { (x: Int, y: Int) => x + y }\n  val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map { (g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple\n  popularGenresByYear\n}",
      "originalCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n    val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap((m: Movie) => m.genres.map(g => ((m.year, g), 1)))\n    val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey((x: Int, y: Int) => x + y)\n    val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map((g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey((m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2)\n    popularGenresByYear\n  }",
      "status" : "Killed"
    },
    {
      "id" : 61,
      "originalProgramId" : 3,
      "mutationOperator" : "MTR",
      "mutationOperatorDescription" : "Mapping Transformation Replacement",
      "mutantCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n  val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap { (inputParameter: Movie) => {\n    val originalFunction = ((m: Movie) => m.genres.map(g => ((m.year, g), 1)))(_)\n    val originalValue = originalFunction(inputParameter)\n    originalValue.headOption\n  } }\n  val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey { (x: Int, y: Int) => x + y }\n  val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map { (g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey { (m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2 }\n  popularGenresByYear\n}",
      "originalCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n    val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap((m: Movie) => m.genres.map(g => ((m.year, g), 1)))\n    val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey((x: Int, y: Int) => x + y)\n    val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map((g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey((m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2)\n    popularGenresByYear\n  }",
      "status" : "Lived"
    },
    {
      "id" : 62,
      "originalProgramId" : 3,
      "mutationOperator" : "MTR",
      "mutationOperatorDescription" : "Mapping Transformation Replacement",
      "mutantCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n  val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap { (inputParameter: Movie) => {\n    val originalFunction = ((m: Movie) => m.genres.map(g => ((m.year, g), 1)))(_)\n    val originalValue = originalFunction(inputParameter)\n    originalValue.toList.tail\n  } }\n  val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey { (x: Int, y: Int) => x + y }\n  val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map { (g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey { (m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2 }\n  popularGenresByYear\n}",
      "originalCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n    val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap((m: Movie) => m.genres.map(g => ((m.year, g), 1)))\n    val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey((x: Int, y: Int) => x + y)\n    val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map((g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey((m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2)\n    popularGenresByYear\n  }",
      "status" : "Killed"
    },
    {
      "id" : 63,
      "originalProgramId" : 3,
      "mutationOperator" : "MTR",
      "mutationOperatorDescription" : "Mapping Transformation Replacement",
      "mutantCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n  val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap { (inputParameter: Movie) => {\n    val originalFunction = ((m: Movie) => m.genres.map(g => ((m.year, g), 1)))(_)\n    val originalValue = originalFunction(inputParameter)\n    originalValue.toList.reverse\n  } }\n  val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey { (x: Int, y: Int) => x + y }\n  val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map { (g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey { (m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2 }\n  popularGenresByYear\n}",
      "originalCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n    val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap((m: Movie) => m.genres.map(g => ((m.year, g), 1)))\n    val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey((x: Int, y: Int) => x + y)\n    val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map((g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey((m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2)\n    popularGenresByYear\n  }",
      "status" : "Equivalent"
    },
    {
      "id" : 64,
      "originalProgramId" : 3,
      "mutationOperator" : "MTR",
      "mutationOperatorDescription" : "Mapping Transformation Replacement",
      "mutantCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n  val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap { (inputParameter: Movie) => {\n    val originalFunction = ((m: Movie) => m.genres.map(g => ((m.year, g), 1)))(_)\n    val originalValue = originalFunction(inputParameter)\n    List[((Int, String), Int)]()\n  } }\n  val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey { (x: Int, y: Int) => x + y }\n  val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map { (g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey { (m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2 }\n  popularGenresByYear\n}",
      "originalCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n    val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap((m: Movie) => m.genres.map(g => ((m.year, g), 1)))\n    val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey((x: Int, y: Int) => x + y)\n    val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map((g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey((m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2)\n    popularGenresByYear\n  }",
      "status" : "Killed"
    },
    {
      "id" : 65,
      "originalProgramId" : 3,
      "mutationOperator" : "MTR",
      "mutationOperatorDescription" : "Mapping Transformation Replacement",
      "mutantCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n  val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap { (m: Movie) => m.genres.map(g => ((m.year, g), 1)) }\n  val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey { (x: Int, y: Int) => x + y }\n  val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map { (inputParameter: ((Int, String), Int)) => {\n    val originalFunction = ((g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)))(_)\n    val originalValue = originalFunction(inputParameter)\n    (0, originalValue._2)\n  } }\n  val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey { (m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2 }\n  popularGenresByYear\n}",
      "originalCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n    val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap((m: Movie) => m.genres.map(g => ((m.year, g), 1)))\n    val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey((x: Int, y: Int) => x + y)\n    val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map((g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey((m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2)\n    popularGenresByYear\n  }",
      "status" : "Killed"
    },
    {
      "id" : 66,
      "originalProgramId" : 3,
      "mutationOperator" : "MTR",
      "mutationOperatorDescription" : "Mapping Transformation Replacement",
      "mutantCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n  val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap { (m: Movie) => m.genres.map(g => ((m.year, g), 1)) }\n  val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey { (x: Int, y: Int) => x + y }\n  val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map { (inputParameter: ((Int, String), Int)) => {\n    val originalFunction = ((g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)))(_)\n    val originalValue = originalFunction(inputParameter)\n    (1, originalValue._2)\n  } }\n  val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey { (m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2 }\n  popularGenresByYear\n}",
      "originalCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n    val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap((m: Movie) => m.genres.map(g => ((m.year, g), 1)))\n    val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey((x: Int, y: Int) => x + y)\n    val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map((g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey((m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2)\n    popularGenresByYear\n  }",
      "status" : "Killed"
    },
    {
      "id" : 67,
      "originalProgramId" : 3,
      "mutationOperator" : "MTR",
      "mutationOperatorDescription" : "Mapping Transformation Replacement",
      "mutantCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n  val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap { (m: Movie) => m.genres.map(g => ((m.year, g), 1)) }\n  val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey { (x: Int, y: Int) => x + y }\n  val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map { (inputParameter: ((Int, String), Int)) => {\n    val originalFunction = ((g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)))(_)\n    val originalValue = originalFunction(inputParameter)\n    (Int.MaxValue, originalValue._2)\n  } }\n  val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey { (m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2 }\n  popularGenresByYear\n}",
      "originalCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n    val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap((m: Movie) => m.genres.map(g => ((m.year, g), 1)))\n    val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey((x: Int, y: Int) => x + y)\n    val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map((g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey((m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2)\n    popularGenresByYear\n  }",
      "status" : "Killed"
    },
    {
      "id" : 68,
      "originalProgramId" : 3,
      "mutationOperator" : "MTR",
      "mutationOperatorDescription" : "Mapping Transformation Replacement",
      "mutantCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n  val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap { (m: Movie) => m.genres.map(g => ((m.year, g), 1)) }\n  val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey { (x: Int, y: Int) => x + y }\n  val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map { (inputParameter: ((Int, String), Int)) => {\n    val originalFunction = ((g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)))(_)\n    val originalValue = originalFunction(inputParameter)\n    (Int.MinValue, originalValue._2)\n  } }\n  val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey { (m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2 }\n  popularGenresByYear\n}",
      "originalCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n    val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap((m: Movie) => m.genres.map(g => ((m.year, g), 1)))\n    val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey((x: Int, y: Int) => x + y)\n    val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map((g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey((m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2)\n    popularGenresByYear\n  }",
      "status" : "Killed"
    },
    {
      "id" : 69,
      "originalProgramId" : 3,
      "mutationOperator" : "MTR",
      "mutationOperatorDescription" : "Mapping Transformation Replacement",
      "mutantCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n  val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap { (m: Movie) => m.genres.map(g => ((m.year, g), 1)) }\n  val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey { (x: Int, y: Int) => x + y }\n  val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map { (inputParameter: ((Int, String), Int)) => {\n    val originalFunction = ((g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)))(_)\n    val originalValue = originalFunction(inputParameter)\n    (-originalValue._1, originalValue._2)\n  } }\n  val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey { (m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2 }\n  popularGenresByYear\n}",
      "originalCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n    val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap((m: Movie) => m.genres.map(g => ((m.year, g), 1)))\n    val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey((x: Int, y: Int) => x + y)\n    val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map((g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey((m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2)\n    popularGenresByYear\n  }",
      "status" : "Killed"
    },
    {
      "id" : 70,
      "originalProgramId" : 3,
      "mutationOperator" : "MTR",
      "mutationOperatorDescription" : "Mapping Transformation Replacement",
      "mutantCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n  val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap { (m: Movie) => m.genres.map(g => ((m.year, g), 1)) }\n  val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey { (x: Int, y: Int) => x + y }\n  val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map { (inputParameter: ((Int, String), Int)) => {\n    val originalFunction = ((g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)))(_)\n    val originalValue = originalFunction(inputParameter)\n    (originalValue._1, (\"\", originalValue._2._2))\n  } }\n  val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey { (m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2 }\n  popularGenresByYear\n}",
      "originalCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n    val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap((m: Movie) => m.genres.map(g => ((m.year, g), 1)))\n    val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey((x: Int, y: Int) => x + y)\n    val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map((g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey((m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2)\n    popularGenresByYear\n  }",
      "status" : "Killed"
    },
    {
      "id" : 71,
      "originalProgramId" : 3,
      "mutationOperator" : "MTR",
      "mutationOperatorDescription" : "Mapping Transformation Replacement",
      "mutantCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n  val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap { (m: Movie) => m.genres.map(g => ((m.year, g), 1)) }\n  val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey { (x: Int, y: Int) => x + y }\n  val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map { (inputParameter: ((Int, String), Int)) => {\n    val originalFunction = ((g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)))(_)\n    val originalValue = originalFunction(inputParameter)\n    (originalValue._1, (originalValue._2._1, 0))\n  } }\n  val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey { (m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2 }\n  popularGenresByYear\n}",
      "originalCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n    val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap((m: Movie) => m.genres.map(g => ((m.year, g), 1)))\n    val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey((x: Int, y: Int) => x + y)\n    val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map((g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey((m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2)\n    popularGenresByYear\n  }",
      "status" : "Killed"
    },
    {
      "id" : 72,
      "originalProgramId" : 3,
      "mutationOperator" : "MTR",
      "mutationOperatorDescription" : "Mapping Transformation Replacement",
      "mutantCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n  val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap { (m: Movie) => m.genres.map(g => ((m.year, g), 1)) }\n  val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey { (x: Int, y: Int) => x + y }\n  val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map { (inputParameter: ((Int, String), Int)) => {\n    val originalFunction = ((g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)))(_)\n    val originalValue = originalFunction(inputParameter)\n    (originalValue._1, (originalValue._2._1, 1))\n  } }\n  val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey { (m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2 }\n  popularGenresByYear\n}",
      "originalCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n    val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap((m: Movie) => m.genres.map(g => ((m.year, g), 1)))\n    val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey((x: Int, y: Int) => x + y)\n    val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map((g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey((m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2)\n    popularGenresByYear\n  }",
      "status" : "Killed"
    },
    {
      "id" : 73,
      "originalProgramId" : 3,
      "mutationOperator" : "MTR",
      "mutationOperatorDescription" : "Mapping Transformation Replacement",
      "mutantCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n  val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap { (m: Movie) => m.genres.map(g => ((m.year, g), 1)) }\n  val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey { (x: Int, y: Int) => x + y }\n  val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map { (inputParameter: ((Int, String), Int)) => {\n    val originalFunction = ((g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)))(_)\n    val originalValue = originalFunction(inputParameter)\n    (originalValue._1, (originalValue._2._1, Int.MaxValue))\n  } }\n  val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey { (m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2 }\n  popularGenresByYear\n}",
      "originalCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n    val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap((m: Movie) => m.genres.map(g => ((m.year, g), 1)))\n    val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey((x: Int, y: Int) => x + y)\n    val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map((g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey((m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2)\n    popularGenresByYear\n  }",
      "status" : "Killed"
    },
    {
      "id" : 74,
      "originalProgramId" : 3,
      "mutationOperator" : "MTR",
      "mutationOperatorDescription" : "Mapping Transformation Replacement",
      "mutantCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n  val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap { (m: Movie) => m.genres.map(g => ((m.year, g), 1)) }\n  val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey { (x: Int, y: Int) => x + y }\n  val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map { (inputParameter: ((Int, String), Int)) => {\n    val originalFunction = ((g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)))(_)\n    val originalValue = originalFunction(inputParameter)\n    (originalValue._1, (originalValue._2._1, Int.MinValue))\n  } }\n  val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey { (m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2 }\n  popularGenresByYear\n}",
      "originalCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n    val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap((m: Movie) => m.genres.map(g => ((m.year, g), 1)))\n    val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey((x: Int, y: Int) => x + y)\n    val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map((g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey((m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2)\n    popularGenresByYear\n  }",
      "status" : "Killed"
    },
    {
      "id" : 75,
      "originalProgramId" : 3,
      "mutationOperator" : "MTR",
      "mutationOperatorDescription" : "Mapping Transformation Replacement",
      "mutantCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n  val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap { (m: Movie) => m.genres.map(g => ((m.year, g), 1)) }\n  val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey { (x: Int, y: Int) => x + y }\n  val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map { (inputParameter: ((Int, String), Int)) => {\n    val originalFunction = ((g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)))(_)\n    val originalValue = originalFunction(inputParameter)\n    (originalValue._1, (originalValue._2._1, -originalValue._2._2))\n  } }\n  val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey { (m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2 }\n  popularGenresByYear\n}",
      "originalCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n    val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap((m: Movie) => m.genres.map(g => ((m.year, g), 1)))\n    val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey((x: Int, y: Int) => x + y)\n    val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map((g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey((m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2)\n    popularGenresByYear\n  }",
      "status" : "Killed"
    },
    {
      "id" : 76,
      "originalProgramId" : 3,
      "mutationOperator" : "DTI",
      "mutationOperatorDescription" : "Distinct Transformation Insertion",
      "mutantCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n  val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap { (m: Movie) => m.genres.map(g => ((m.year, g), 1)) }.distinct()\n  val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey { (x: Int, y: Int) => x + y }\n  val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map { (g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey { (m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2 }\n  popularGenresByYear\n}",
      "originalCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n    val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap((m: Movie) => m.genres.map(g => ((m.year, g), 1)))\n    val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey((x: Int, y: Int) => x + y)\n    val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map((g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey((m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2)\n    popularGenresByYear\n  }",
      "status" : "Killed"
    },
    {
      "id" : 77,
      "originalProgramId" : 3,
      "mutationOperator" : "DTI",
      "mutationOperatorDescription" : "Distinct Transformation Insertion",
      "mutantCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n  val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap { (m: Movie) => m.genres.map(g => ((m.year, g), 1)) }\n  val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey { (x: Int, y: Int) => x + y }.distinct()\n  val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map { (g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey { (m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2 }\n  popularGenresByYear\n}",
      "originalCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n    val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap((m: Movie) => m.genres.map(g => ((m.year, g), 1)))\n    val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey((x: Int, y: Int) => x + y)\n    val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map((g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey((m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2)\n    popularGenresByYear\n  }",
      "status" : "Lived"
    },
    {
      "id" : 78,
      "originalProgramId" : 3,
      "mutationOperator" : "DTI",
      "mutationOperatorDescription" : "Distinct Transformation Insertion",
      "mutantCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n  val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap { (m: Movie) => m.genres.map(g => ((m.year, g), 1)) }\n  val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey { (x: Int, y: Int) => x + y }\n  val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map { (g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)) }.distinct()\n  val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey { (m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2 }\n  popularGenresByYear\n}",
      "originalCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n    val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap((m: Movie) => m.genres.map(g => ((m.year, g), 1)))\n    val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey((x: Int, y: Int) => x + y)\n    val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map((g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey((m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2)\n    popularGenresByYear\n  }",
      "status" : "Lived"
    },
    {
      "id" : 79,
      "originalProgramId" : 3,
      "mutationOperator" : "DTI",
      "mutationOperatorDescription" : "Distinct Transformation Insertion",
      "mutantCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n  val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap { (m: Movie) => m.genres.map(g => ((m.year, g), 1)) }\n  val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey { (x: Int, y: Int) => x + y }\n  val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map { (g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey { (m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2 }.distinct()\n  popularGenresByYear\n}",
      "originalCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n    val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap((m: Movie) => m.genres.map(g => ((m.year, g), 1)))\n    val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey((x: Int, y: Int) => x + y)\n    val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map((g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey((m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2)\n    popularGenresByYear\n  }",
      "status" : "Equivalent"
    },
    {
      "id" : 80,
      "originalProgramId" : 3,
      "mutationOperator" : "ATR",
      "mutationOperatorDescription" : "Aggregation Transformation Replacement",
      "mutantCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n  val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap { (m: Movie) => m.genres.map(g => ((m.year, g), 1)) }\n  val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey { (firstParameter: Int, secondParameter: Int) => firstParameter }\n  val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map { (g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey { (m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2 }\n  popularGenresByYear\n}",
      "originalCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n    val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap((m: Movie) => m.genres.map(g => ((m.year, g), 1)))\n    val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey((x: Int, y: Int) => x + y)\n    val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map((g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey((m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2)\n    popularGenresByYear\n  }",
      "status" : "Killed"
    },
    {
      "id" : 81,
      "originalProgramId" : 3,
      "mutationOperator" : "ATR",
      "mutationOperatorDescription" : "Aggregation Transformation Replacement",
      "mutantCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n  val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap { (m: Movie) => m.genres.map(g => ((m.year, g), 1)) }\n  val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey { (firstParameter: Int, secondParameter: Int) => secondParameter }\n  val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map { (g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey { (m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2 }\n  popularGenresByYear\n}",
      "originalCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n    val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap((m: Movie) => m.genres.map(g => ((m.year, g), 1)))\n    val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey((x: Int, y: Int) => x + y)\n    val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map((g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey((m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2)\n    popularGenresByYear\n  }",
      "status" : "Killed"
    },
    {
      "id" : 82,
      "originalProgramId" : 3,
      "mutationOperator" : "ATR",
      "mutationOperatorDescription" : "Aggregation Transformation Replacement",
      "mutantCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n  val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap { (m: Movie) => m.genres.map(g => ((m.year, g), 1)) }\n  val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey { (firstParameter: Int, secondParameter: Int) => {\n    val originalFunction = ((x: Int, y: Int) => x + y)(_, _)\n    originalFunction(firstParameter, firstParameter)\n  } }\n  val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map { (g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey { (m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2 }\n  popularGenresByYear\n}",
      "originalCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n    val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap((m: Movie) => m.genres.map(g => ((m.year, g), 1)))\n    val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey((x: Int, y: Int) => x + y)\n    val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map((g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey((m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2)\n    popularGenresByYear\n  }",
      "status" : "Killed"
    },
    {
      "id" : 83,
      "originalProgramId" : 3,
      "mutationOperator" : "ATR",
      "mutationOperatorDescription" : "Aggregation Transformation Replacement",
      "mutantCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n  val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap { (m: Movie) => m.genres.map(g => ((m.year, g), 1)) }\n  val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey { (firstParameter: Int, secondParameter: Int) => {\n    val originalFunction = ((x: Int, y: Int) => x + y)(_, _)\n    originalFunction(secondParameter, secondParameter)\n  } }\n  val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map { (g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey { (m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2 }\n  popularGenresByYear\n}",
      "originalCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n    val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap((m: Movie) => m.genres.map(g => ((m.year, g), 1)))\n    val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey((x: Int, y: Int) => x + y)\n    val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map((g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey((m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2)\n    popularGenresByYear\n  }",
      "status" : "Killed"
    },
    {
      "id" : 84,
      "originalProgramId" : 3,
      "mutationOperator" : "ATR",
      "mutationOperatorDescription" : "Aggregation Transformation Replacement",
      "mutantCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n  val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap { (m: Movie) => m.genres.map(g => ((m.year, g), 1)) }\n  val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey { (firstParameter: Int, secondParameter: Int) => {\n    val originalFunction = ((x: Int, y: Int) => x + y)(_, _)\n    originalFunction(secondParameter, firstParameter)\n  } }\n  val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map { (g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey { (m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2 }\n  popularGenresByYear\n}",
      "originalCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n    val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap((m: Movie) => m.genres.map(g => ((m.year, g), 1)))\n    val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey((x: Int, y: Int) => x + y)\n    val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map((g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey((m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2)\n    popularGenresByYear\n  }",
      "status" : "Equivalent"
    },
    {
      "id" : 85,
      "originalProgramId" : 3,
      "mutationOperator" : "ATR",
      "mutationOperatorDescription" : "Aggregation Transformation Replacement",
      "mutantCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n  val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap { (m: Movie) => m.genres.map(g => ((m.year, g), 1)) }\n  val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey { (x: Int, y: Int) => x + y }\n  val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map { (g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey { (firstParameter: (String, Int), secondParameter: (String, Int)) => firstParameter }\n  popularGenresByYear\n}",
      "originalCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n    val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap((m: Movie) => m.genres.map(g => ((m.year, g), 1)))\n    val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey((x: Int, y: Int) => x + y)\n    val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map((g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey((m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2)\n    popularGenresByYear\n  }",
      "status" : "Killed"
    },
    {
      "id" : 86,
      "originalProgramId" : 3,
      "mutationOperator" : "ATR",
      "mutationOperatorDescription" : "Aggregation Transformation Replacement",
      "mutantCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n  val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap { (m: Movie) => m.genres.map(g => ((m.year, g), 1)) }\n  val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey { (x: Int, y: Int) => x + y }\n  val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map { (g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey { (firstParameter: (String, Int), secondParameter: (String, Int)) => secondParameter }\n  popularGenresByYear\n}",
      "originalCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n    val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap((m: Movie) => m.genres.map(g => ((m.year, g), 1)))\n    val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey((x: Int, y: Int) => x + y)\n    val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map((g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey((m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2)\n    popularGenresByYear\n  }",
      "status" : "Killed"
    },
    {
      "id" : 87,
      "originalProgramId" : 3,
      "mutationOperator" : "ATR",
      "mutationOperatorDescription" : "Aggregation Transformation Replacement",
      "mutantCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n  val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap { (m: Movie) => m.genres.map(g => ((m.year, g), 1)) }\n  val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey { (x: Int, y: Int) => x + y }\n  val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map { (g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey { (firstParameter: (String, Int), secondParameter: (String, Int)) => {\n    val originalFunction = ((m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2)(_, _)\n    originalFunction(firstParameter, firstParameter)\n  } }\n  popularGenresByYear\n}",
      "originalCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n    val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap((m: Movie) => m.genres.map(g => ((m.year, g), 1)))\n    val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey((x: Int, y: Int) => x + y)\n    val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map((g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey((m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2)\n    popularGenresByYear\n  }",
      "status" : "Killed"
    },
    {
      "id" : 88,
      "originalProgramId" : 3,
      "mutationOperator" : "ATR",
      "mutationOperatorDescription" : "Aggregation Transformation Replacement",
      "mutantCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n  val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap { (m: Movie) => m.genres.map(g => ((m.year, g), 1)) }\n  val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey { (x: Int, y: Int) => x + y }\n  val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map { (g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey { (firstParameter: (String, Int), secondParameter: (String, Int)) => {\n    val originalFunction = ((m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2)(_, _)\n    originalFunction(secondParameter, secondParameter)\n  } }\n  popularGenresByYear\n}",
      "originalCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n    val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap((m: Movie) => m.genres.map(g => ((m.year, g), 1)))\n    val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey((x: Int, y: Int) => x + y)\n    val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map((g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey((m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2)\n    popularGenresByYear\n  }",
      "status" : "Killed"
    },
    {
      "id" : 89,
      "originalProgramId" : 3,
      "mutationOperator" : "ATR",
      "mutationOperatorDescription" : "Aggregation Transformation Replacement",
      "mutantCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n  val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap { (m: Movie) => m.genres.map(g => ((m.year, g), 1)) }\n  val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey { (x: Int, y: Int) => x + y }\n  val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map { (g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey { (firstParameter: (String, Int), secondParameter: (String, Int)) => {\n    val originalFunction = ((m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2)(_, _)\n    originalFunction(secondParameter, firstParameter)\n  } }\n  popularGenresByYear\n}",
      "originalCode" : "def mostPopularGenresByYear(movies: RDD[Movie]) = {\n    val yearGenreTuple: RDD[((Int, String), Int)] = movies.flatMap((m: Movie) => m.genres.map(g => ((m.year, g), 1)))\n    val yearGenreCount: RDD[((Int, String), Int)] = yearGenreTuple.reduceByKey((x: Int, y: Int) => x + y)\n    val yearGenreCountTuple: RDD[(Int, (String, Int))] = yearGenreCount.map((g: ((Int, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val popularGenresByYear: RDD[(Int, (String, Int))] = yearGenreCountTuple.reduceByKey((m1: (String, Int), m2: (String, Int)) => if (m1._2 > m2._2) m1 else m2)\n    popularGenresByYear\n  }",
      "status" : "Killed"
    },
    {
      "id" : 90,
      "originalProgramId" : 4,
      "mutationOperator" : "MTR",
      "mutationOperatorDescription" : "Mapping Transformation Replacement",
      "mutantCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (inputParameter: Movie) => {\n    val originalFunction = ((m: Movie) => (m.movieId, m))(_)\n    val originalValue = originalFunction(inputParameter)\n    (0, originalValue._2)\n  } }\n  val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map { (r: Rating) => (r.movieId, r) }\n  val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n  val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map { (tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating) }\n  val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n  val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map { (x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)) }\n  ratingsStats\n}",
      "originalCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map((r: Rating) => (r.movieId, r))\n    val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n    val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map((tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating))\n    val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n    val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map((x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)))\n    ratingsStats\n  }",
      "status" : "Killed"
    },
    {
      "id" : 91,
      "originalProgramId" : 4,
      "mutationOperator" : "MTR",
      "mutationOperatorDescription" : "Mapping Transformation Replacement",
      "mutantCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (inputParameter: Movie) => {\n    val originalFunction = ((m: Movie) => (m.movieId, m))(_)\n    val originalValue = originalFunction(inputParameter)\n    (1, originalValue._2)\n  } }\n  val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map { (r: Rating) => (r.movieId, r) }\n  val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n  val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map { (tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating) }\n  val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n  val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map { (x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)) }\n  ratingsStats\n}",
      "originalCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map((r: Rating) => (r.movieId, r))\n    val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n    val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map((tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating))\n    val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n    val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map((x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)))\n    ratingsStats\n  }",
      "status" : "Killed"
    },
    {
      "id" : 92,
      "originalProgramId" : 4,
      "mutationOperator" : "MTR",
      "mutationOperatorDescription" : "Mapping Transformation Replacement",
      "mutantCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (inputParameter: Movie) => {\n    val originalFunction = ((m: Movie) => (m.movieId, m))(_)\n    val originalValue = originalFunction(inputParameter)\n    (Int.MaxValue, originalValue._2)\n  } }\n  val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map { (r: Rating) => (r.movieId, r) }\n  val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n  val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map { (tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating) }\n  val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n  val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map { (x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)) }\n  ratingsStats\n}",
      "originalCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map((r: Rating) => (r.movieId, r))\n    val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n    val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map((tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating))\n    val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n    val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map((x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)))\n    ratingsStats\n  }",
      "status" : "Killed"
    },
    {
      "id" : 93,
      "originalProgramId" : 4,
      "mutationOperator" : "MTR",
      "mutationOperatorDescription" : "Mapping Transformation Replacement",
      "mutantCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (inputParameter: Movie) => {\n    val originalFunction = ((m: Movie) => (m.movieId, m))(_)\n    val originalValue = originalFunction(inputParameter)\n    (Int.MinValue, originalValue._2)\n  } }\n  val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map { (r: Rating) => (r.movieId, r) }\n  val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n  val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map { (tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating) }\n  val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n  val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map { (x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)) }\n  ratingsStats\n}",
      "originalCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map((r: Rating) => (r.movieId, r))\n    val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n    val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map((tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating))\n    val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n    val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map((x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)))\n    ratingsStats\n  }",
      "status" : "Killed"
    },
    {
      "id" : 94,
      "originalProgramId" : 4,
      "mutationOperator" : "MTR",
      "mutationOperatorDescription" : "Mapping Transformation Replacement",
      "mutantCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (inputParameter: Movie) => {\n    val originalFunction = ((m: Movie) => (m.movieId, m))(_)\n    val originalValue = originalFunction(inputParameter)\n    (-originalValue._1, originalValue._2)\n  } }\n  val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map { (r: Rating) => (r.movieId, r) }\n  val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n  val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map { (tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating) }\n  val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n  val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map { (x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)) }\n  ratingsStats\n}",
      "originalCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map((r: Rating) => (r.movieId, r))\n    val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n    val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map((tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating))\n    val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n    val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map((x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)))\n    ratingsStats\n  }",
      "status" : "Killed"
    },
    {
      "id" : 95,
      "originalProgramId" : 4,
      "mutationOperator" : "MTR",
      "mutationOperatorDescription" : "Mapping Transformation Replacement",
      "mutantCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (inputParameter: Movie) => {\n    val originalFunction = ((m: Movie) => (m.movieId, m))(_)\n    val originalValue = originalFunction(inputParameter)\n    (originalValue._1, null.asInstanceOf[Movie])\n  } }\n  val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map { (r: Rating) => (r.movieId, r) }\n  val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n  val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map { (tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating) }\n  val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n  val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map { (x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)) }\n  ratingsStats\n}",
      "originalCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map((r: Rating) => (r.movieId, r))\n    val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n    val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map((tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating))\n    val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n    val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map((x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)))\n    ratingsStats\n  }",
      "status" : "Killed"
    },
    {
      "id" : 96,
      "originalProgramId" : 4,
      "mutationOperator" : "MTR",
      "mutationOperatorDescription" : "Mapping Transformation Replacement",
      "mutantCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map { (inputParameter: Rating) => {\n    val originalFunction = ((r: Rating) => (r.movieId, r))(_)\n    val originalValue = originalFunction(inputParameter)\n    (0, originalValue._2)\n  } }\n  val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n  val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map { (tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating) }\n  val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n  val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map { (x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)) }\n  ratingsStats\n}",
      "originalCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map((r: Rating) => (r.movieId, r))\n    val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n    val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map((tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating))\n    val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n    val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map((x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)))\n    ratingsStats\n  }",
      "status" : "Killed"
    },
    {
      "id" : 97,
      "originalProgramId" : 4,
      "mutationOperator" : "MTR",
      "mutationOperatorDescription" : "Mapping Transformation Replacement",
      "mutantCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map { (inputParameter: Rating) => {\n    val originalFunction = ((r: Rating) => (r.movieId, r))(_)\n    val originalValue = originalFunction(inputParameter)\n    (1, originalValue._2)\n  } }\n  val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n  val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map { (tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating) }\n  val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n  val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map { (x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)) }\n  ratingsStats\n}",
      "originalCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map((r: Rating) => (r.movieId, r))\n    val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n    val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map((tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating))\n    val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n    val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map((x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)))\n    ratingsStats\n  }",
      "status" : "Killed"
    },
    {
      "id" : 98,
      "originalProgramId" : 4,
      "mutationOperator" : "MTR",
      "mutationOperatorDescription" : "Mapping Transformation Replacement",
      "mutantCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map { (inputParameter: Rating) => {\n    val originalFunction = ((r: Rating) => (r.movieId, r))(_)\n    val originalValue = originalFunction(inputParameter)\n    (Int.MaxValue, originalValue._2)\n  } }\n  val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n  val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map { (tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating) }\n  val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n  val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map { (x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)) }\n  ratingsStats\n}",
      "originalCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map((r: Rating) => (r.movieId, r))\n    val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n    val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map((tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating))\n    val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n    val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map((x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)))\n    ratingsStats\n  }",
      "status" : "Killed"
    },
    {
      "id" : 99,
      "originalProgramId" : 4,
      "mutationOperator" : "MTR",
      "mutationOperatorDescription" : "Mapping Transformation Replacement",
      "mutantCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map { (inputParameter: Rating) => {\n    val originalFunction = ((r: Rating) => (r.movieId, r))(_)\n    val originalValue = originalFunction(inputParameter)\n    (Int.MinValue, originalValue._2)\n  } }\n  val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n  val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map { (tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating) }\n  val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n  val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map { (x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)) }\n  ratingsStats\n}",
      "originalCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map((r: Rating) => (r.movieId, r))\n    val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n    val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map((tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating))\n    val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n    val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map((x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)))\n    ratingsStats\n  }",
      "status" : "Killed"
    },
    {
      "id" : 100,
      "originalProgramId" : 4,
      "mutationOperator" : "MTR",
      "mutationOperatorDescription" : "Mapping Transformation Replacement",
      "mutantCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map { (inputParameter: Rating) => {\n    val originalFunction = ((r: Rating) => (r.movieId, r))(_)\n    val originalValue = originalFunction(inputParameter)\n    (-originalValue._1, originalValue._2)\n  } }\n  val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n  val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map { (tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating) }\n  val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n  val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map { (x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)) }\n  ratingsStats\n}",
      "originalCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map((r: Rating) => (r.movieId, r))\n    val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n    val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map((tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating))\n    val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n    val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map((x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)))\n    ratingsStats\n  }",
      "status" : "Killed"
    },
    {
      "id" : 101,
      "originalProgramId" : 4,
      "mutationOperator" : "MTR",
      "mutationOperatorDescription" : "Mapping Transformation Replacement",
      "mutantCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map { (inputParameter: Rating) => {\n    val originalFunction = ((r: Rating) => (r.movieId, r))(_)\n    val originalValue = originalFunction(inputParameter)\n    (originalValue._1, null.asInstanceOf[Rating])\n  } }\n  val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n  val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map { (tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating) }\n  val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n  val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map { (x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)) }\n  ratingsStats\n}",
      "originalCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map((r: Rating) => (r.movieId, r))\n    val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n    val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map((tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating))\n    val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n    val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map((x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)))\n    ratingsStats\n  }",
      "status" : "Killed"
    },
    {
      "id" : 102,
      "originalProgramId" : 4,
      "mutationOperator" : "MTR",
      "mutationOperatorDescription" : "Mapping Transformation Replacement",
      "mutantCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map { (r: Rating) => (r.movieId, r) }\n  val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n  val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map { (inputParameter: (Int, (Movie, Rating))) => {\n    val originalFunction = ((tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating))(_)\n    val originalValue = originalFunction(inputParameter)\n    (originalValue._1, 0d)\n  } }\n  val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n  val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map { (x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)) }\n  ratingsStats\n}",
      "originalCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map((r: Rating) => (r.movieId, r))\n    val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n    val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map((tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating))\n    val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n    val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map((x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)))\n    ratingsStats\n  }",
      "status" : "Killed"
    },
    {
      "id" : 103,
      "originalProgramId" : 4,
      "mutationOperator" : "MTR",
      "mutationOperatorDescription" : "Mapping Transformation Replacement",
      "mutantCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map { (r: Rating) => (r.movieId, r) }\n  val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n  val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map { (inputParameter: (Int, (Movie, Rating))) => {\n    val originalFunction = ((tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating))(_)\n    val originalValue = originalFunction(inputParameter)\n    (originalValue._1, 1d)\n  } }\n  val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n  val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map { (x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)) }\n  ratingsStats\n}",
      "originalCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map((r: Rating) => (r.movieId, r))\n    val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n    val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map((tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating))\n    val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n    val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map((x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)))\n    ratingsStats\n  }",
      "status" : "Killed"
    },
    {
      "id" : 104,
      "originalProgramId" : 4,
      "mutationOperator" : "MTR",
      "mutationOperatorDescription" : "Mapping Transformation Replacement",
      "mutantCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map { (r: Rating) => (r.movieId, r) }\n  val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n  val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map { (inputParameter: (Int, (Movie, Rating))) => {\n    val originalFunction = ((tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating))(_)\n    val originalValue = originalFunction(inputParameter)\n    (originalValue._1, Double.MaxValue)\n  } }\n  val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n  val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map { (x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)) }\n  ratingsStats\n}",
      "originalCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map((r: Rating) => (r.movieId, r))\n    val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n    val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map((tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating))\n    val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n    val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map((x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)))\n    ratingsStats\n  }",
      "status" : "Killed"
    },
    {
      "id" : 105,
      "originalProgramId" : 4,
      "mutationOperator" : "MTR",
      "mutationOperatorDescription" : "Mapping Transformation Replacement",
      "mutantCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map { (r: Rating) => (r.movieId, r) }\n  val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n  val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map { (inputParameter: (Int, (Movie, Rating))) => {\n    val originalFunction = ((tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating))(_)\n    val originalValue = originalFunction(inputParameter)\n    (originalValue._1, Double.MinValue)\n  } }\n  val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n  val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map { (x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)) }\n  ratingsStats\n}",
      "originalCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map((r: Rating) => (r.movieId, r))\n    val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n    val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map((tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating))\n    val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n    val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map((x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)))\n    ratingsStats\n  }",
      "status" : "Killed"
    },
    {
      "id" : 106,
      "originalProgramId" : 4,
      "mutationOperator" : "MTR",
      "mutationOperatorDescription" : "Mapping Transformation Replacement",
      "mutantCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map { (r: Rating) => (r.movieId, r) }\n  val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n  val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map { (inputParameter: (Int, (Movie, Rating))) => {\n    val originalFunction = ((tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating))(_)\n    val originalValue = originalFunction(inputParameter)\n    (originalValue._1, -originalValue._2)\n  } }\n  val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n  val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map { (x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)) }\n  ratingsStats\n}",
      "originalCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map((r: Rating) => (r.movieId, r))\n    val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n    val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map((tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating))\n    val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n    val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map((x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)))\n    ratingsStats\n  }",
      "status" : "Killed"
    },
    {
      "id" : 107,
      "originalProgramId" : 4,
      "mutationOperator" : "DTI",
      "mutationOperatorDescription" : "Distinct Transformation Insertion",
      "mutantCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }.distinct()\n  val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map { (r: Rating) => (r.movieId, r) }\n  val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n  val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map { (tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating) }\n  val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n  val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map { (x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)) }\n  ratingsStats\n}",
      "originalCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map((r: Rating) => (r.movieId, r))\n    val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n    val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map((tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating))\n    val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n    val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map((x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)))\n    ratingsStats\n  }",
      "status" : "Lived"
    },
    {
      "id" : 108,
      "originalProgramId" : 4,
      "mutationOperator" : "DTI",
      "mutationOperatorDescription" : "Distinct Transformation Insertion",
      "mutantCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map { (r: Rating) => (r.movieId, r) }.distinct()\n  val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n  val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map { (tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating) }\n  val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n  val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map { (x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)) }\n  ratingsStats\n}",
      "originalCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map((r: Rating) => (r.movieId, r))\n    val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n    val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map((tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating))\n    val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n    val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map((x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)))\n    ratingsStats\n  }",
      "status" : "Lived"
    },
    {
      "id" : 109,
      "originalProgramId" : 4,
      "mutationOperator" : "DTI",
      "mutationOperatorDescription" : "Distinct Transformation Insertion",
      "mutantCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map { (r: Rating) => (r.movieId, r) }\n  val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey).distinct()\n  val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map { (tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating) }\n  val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n  val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map { (x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)) }\n  ratingsStats\n}",
      "originalCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map((r: Rating) => (r.movieId, r))\n    val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n    val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map((tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating))\n    val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n    val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map((x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)))\n    ratingsStats\n  }",
      "status" : "Lived"
    },
    {
      "id" : 110,
      "originalProgramId" : 4,
      "mutationOperator" : "DTI",
      "mutationOperatorDescription" : "Distinct Transformation Insertion",
      "mutantCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map { (r: Rating) => (r.movieId, r) }\n  val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n  val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map { (tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating) }.distinct()\n  val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n  val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map { (x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)) }\n  ratingsStats\n}",
      "originalCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map((r: Rating) => (r.movieId, r))\n    val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n    val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map((tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating))\n    val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n    val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map((x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)))\n    ratingsStats\n  }",
      "status" : "Killed"
    },
    {
      "id" : 111,
      "originalProgramId" : 4,
      "mutationOperator" : "DTI",
      "mutationOperatorDescription" : "Distinct Transformation Insertion",
      "mutantCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map { (r: Rating) => (r.movieId, r) }\n  val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n  val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map { (tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating) }\n  val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey().distinct()\n  val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map { (x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)) }\n  ratingsStats\n}",
      "originalCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map((r: Rating) => (r.movieId, r))\n    val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n    val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map((tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating))\n    val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n    val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map((x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)))\n    ratingsStats\n  }",
      "status" : "Equivalent"
    },
    {
      "id" : 112,
      "originalProgramId" : 4,
      "mutationOperator" : "DTI",
      "mutationOperatorDescription" : "Distinct Transformation Insertion",
      "mutantCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map { (r: Rating) => (r.movieId, r) }\n  val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n  val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map { (tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating) }\n  val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n  val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map { (x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)) }.distinct()\n  ratingsStats\n}",
      "originalCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map((r: Rating) => (r.movieId, r))\n    val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n    val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map((tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating))\n    val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n    val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map((x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)))\n    ratingsStats\n  }",
      "status" : "Equivalent"
    },
    {
      "id" : 113,
      "originalProgramId" : 4,
      "mutationOperator" : "JTR",
      "mutationOperatorDescription" : "Join Transformation Replacement",
      "mutantCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map { (r: Rating) => (r.movieId, r) }\n  val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.leftOuterJoin(ratingsMovieIdKey).map(tuple => (tuple._1, (tuple._2._1, tuple._2._2.getOrElse(null.asInstanceOf[Rating]))))\n  val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map { (tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating) }\n  val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n  val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map { (x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)) }\n  ratingsStats\n}",
      "originalCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map((r: Rating) => (r.movieId, r))\n    val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n    val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map((tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating))\n    val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n    val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map((x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)))\n    ratingsStats\n  }",
      "status" : "Lived"
    },
    {
      "id" : 114,
      "originalProgramId" : 4,
      "mutationOperator" : "JTR",
      "mutationOperatorDescription" : "Join Transformation Replacement",
      "mutantCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map { (r: Rating) => (r.movieId, r) }\n  val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.rightOuterJoin(ratingsMovieIdKey).map(tuple => (tuple._1, (tuple._2._1.getOrElse(null.asInstanceOf[Movie]), tuple._2._2)))\n  val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map { (tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating) }\n  val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n  val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map { (x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)) }\n  ratingsStats\n}",
      "originalCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map((r: Rating) => (r.movieId, r))\n    val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n    val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map((tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating))\n    val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n    val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map((x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)))\n    ratingsStats\n  }",
      "status" : "Lived"
    },
    {
      "id" : 115,
      "originalProgramId" : 4,
      "mutationOperator" : "JTR",
      "mutationOperatorDescription" : "Join Transformation Replacement",
      "mutantCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map { (r: Rating) => (r.movieId, r) }\n  val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.fullOuterJoin(ratingsMovieIdKey).map(tuple => (tuple._1, (tuple._2._1.getOrElse(null.asInstanceOf[Movie]), tuple._2._2.getOrElse(null.asInstanceOf[Rating]))))\n  val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map { (tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating) }\n  val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n  val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map { (x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)) }\n  ratingsStats\n}",
      "originalCode" : "def ratingsStatistics(movies: RDD[Movie], ratings: RDD[Rating]): RDD[((Int, String, Int), (Int, Double, Double, Double))] = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val ratingsMovieIdKey: RDD[(Int, Rating)] = ratings.map((r: Rating) => (r.movieId, r))\n    val joinMoviesRatings: RDD[(Int, (Movie, Rating))] = moviesIdKey.join(ratingsMovieIdKey)\n    val moviesInfoCounts: RDD[((Int, String, Int), Double)] = joinMoviesRatings.map((tuple: (Int, (Movie, Rating))) => ((tuple._1, tuple._2._1.title, tuple._2._1.year), tuple._2._2.rating))\n    val groupByMoviesInfo: RDD[((Int, String, Int), Iterable[Double])] = moviesInfoCounts.groupByKey()\n    val ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))] = groupByMoviesInfo.map((x: ((Int, String, Int), Iterable[Double])) => (x._1, (x._2.size, x._2.sum / x._2.size, x._2.min, x._2.max)))\n    ratingsStats\n  }",
      "status" : "Lived"
    },
    {
      "id" : 116,
      "originalProgramId" : 5,
      "mutationOperator" : "MTR",
      "mutationOperatorDescription" : "Mapping Transformation Replacement",
      "mutantCode" : "def meanOfMeansOfRatingsOfAllMovies(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))]) = {\n  val meanOfRatingsAllMovies: RDD[(Double, Int)] = ratingsStats.map { (inputParameter: (Tuple3[Int, String, Int], Tuple4[Int, Double, Double, Double])) => {\n    val originalFunction = ((m: ((Int, String, Int), (Int, Double, Double, Double))) => (m._2._2, 1))(_)\n    val originalValue = originalFunction(inputParameter)\n    (0d, originalValue._2)\n  } }\n  val sumMeanOfRatingsAllMovies: (Double, Int) = meanOfRatingsAllMovies.reduce { (m1: (Double, Int), m2: (Double, Int)) => (m1._1 + m2._1, m1._2 + m2._2) }\n  sumMeanOfRatingsAllMovies._1 / sumMeanOfRatingsAllMovies._2\n}",
      "originalCode" : "def meanOfMeansOfRatingsOfAllMovies(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))]) = {\n    val meanOfRatingsAllMovies: RDD[(Double, Int)] = ratingsStats.map((m: ((Int, String, Int), (Int, Double, Double, Double))) => (m._2._2, 1))\n    val sumMeanOfRatingsAllMovies: (Double, Int) = meanOfRatingsAllMovies.reduce((m1: (Double, Int), m2: (Double, Int)) => (m1._1 + m2._1, m1._2 + m2._2))\n    sumMeanOfRatingsAllMovies._1 / sumMeanOfRatingsAllMovies._2\n  }",
      "status" : "Killed"
    },
    {
      "id" : 117,
      "originalProgramId" : 5,
      "mutationOperator" : "MTR",
      "mutationOperatorDescription" : "Mapping Transformation Replacement",
      "mutantCode" : "def meanOfMeansOfRatingsOfAllMovies(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))]) = {\n  val meanOfRatingsAllMovies: RDD[(Double, Int)] = ratingsStats.map { (inputParameter: (Tuple3[Int, String, Int], Tuple4[Int, Double, Double, Double])) => {\n    val originalFunction = ((m: ((Int, String, Int), (Int, Double, Double, Double))) => (m._2._2, 1))(_)\n    val originalValue = originalFunction(inputParameter)\n    (1d, originalValue._2)\n  } }\n  val sumMeanOfRatingsAllMovies: (Double, Int) = meanOfRatingsAllMovies.reduce { (m1: (Double, Int), m2: (Double, Int)) => (m1._1 + m2._1, m1._2 + m2._2) }\n  sumMeanOfRatingsAllMovies._1 / sumMeanOfRatingsAllMovies._2\n}",
      "originalCode" : "def meanOfMeansOfRatingsOfAllMovies(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))]) = {\n    val meanOfRatingsAllMovies: RDD[(Double, Int)] = ratingsStats.map((m: ((Int, String, Int), (Int, Double, Double, Double))) => (m._2._2, 1))\n    val sumMeanOfRatingsAllMovies: (Double, Int) = meanOfRatingsAllMovies.reduce((m1: (Double, Int), m2: (Double, Int)) => (m1._1 + m2._1, m1._2 + m2._2))\n    sumMeanOfRatingsAllMovies._1 / sumMeanOfRatingsAllMovies._2\n  }",
      "status" : "Killed"
    },
    {
      "id" : 118,
      "originalProgramId" : 5,
      "mutationOperator" : "MTR",
      "mutationOperatorDescription" : "Mapping Transformation Replacement",
      "mutantCode" : "def meanOfMeansOfRatingsOfAllMovies(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))]) = {\n  val meanOfRatingsAllMovies: RDD[(Double, Int)] = ratingsStats.map { (inputParameter: (Tuple3[Int, String, Int], Tuple4[Int, Double, Double, Double])) => {\n    val originalFunction = ((m: ((Int, String, Int), (Int, Double, Double, Double))) => (m._2._2, 1))(_)\n    val originalValue = originalFunction(inputParameter)\n    (Double.MaxValue, originalValue._2)\n  } }\n  val sumMeanOfRatingsAllMovies: (Double, Int) = meanOfRatingsAllMovies.reduce { (m1: (Double, Int), m2: (Double, Int)) => (m1._1 + m2._1, m1._2 + m2._2) }\n  sumMeanOfRatingsAllMovies._1 / sumMeanOfRatingsAllMovies._2\n}",
      "originalCode" : "def meanOfMeansOfRatingsOfAllMovies(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))]) = {\n    val meanOfRatingsAllMovies: RDD[(Double, Int)] = ratingsStats.map((m: ((Int, String, Int), (Int, Double, Double, Double))) => (m._2._2, 1))\n    val sumMeanOfRatingsAllMovies: (Double, Int) = meanOfRatingsAllMovies.reduce((m1: (Double, Int), m2: (Double, Int)) => (m1._1 + m2._1, m1._2 + m2._2))\n    sumMeanOfRatingsAllMovies._1 / sumMeanOfRatingsAllMovies._2\n  }",
      "status" : "Killed"
    },
    {
      "id" : 119,
      "originalProgramId" : 5,
      "mutationOperator" : "MTR",
      "mutationOperatorDescription" : "Mapping Transformation Replacement",
      "mutantCode" : "def meanOfMeansOfRatingsOfAllMovies(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))]) = {\n  val meanOfRatingsAllMovies: RDD[(Double, Int)] = ratingsStats.map { (inputParameter: (Tuple3[Int, String, Int], Tuple4[Int, Double, Double, Double])) => {\n    val originalFunction = ((m: ((Int, String, Int), (Int, Double, Double, Double))) => (m._2._2, 1))(_)\n    val originalValue = originalFunction(inputParameter)\n    (Double.MinValue, originalValue._2)\n  } }\n  val sumMeanOfRatingsAllMovies: (Double, Int) = meanOfRatingsAllMovies.reduce { (m1: (Double, Int), m2: (Double, Int)) => (m1._1 + m2._1, m1._2 + m2._2) }\n  sumMeanOfRatingsAllMovies._1 / sumMeanOfRatingsAllMovies._2\n}",
      "originalCode" : "def meanOfMeansOfRatingsOfAllMovies(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))]) = {\n    val meanOfRatingsAllMovies: RDD[(Double, Int)] = ratingsStats.map((m: ((Int, String, Int), (Int, Double, Double, Double))) => (m._2._2, 1))\n    val sumMeanOfRatingsAllMovies: (Double, Int) = meanOfRatingsAllMovies.reduce((m1: (Double, Int), m2: (Double, Int)) => (m1._1 + m2._1, m1._2 + m2._2))\n    sumMeanOfRatingsAllMovies._1 / sumMeanOfRatingsAllMovies._2\n  }",
      "status" : "Killed"
    },
    {
      "id" : 120,
      "originalProgramId" : 5,
      "mutationOperator" : "MTR",
      "mutationOperatorDescription" : "Mapping Transformation Replacement",
      "mutantCode" : "def meanOfMeansOfRatingsOfAllMovies(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))]) = {\n  val meanOfRatingsAllMovies: RDD[(Double, Int)] = ratingsStats.map { (inputParameter: (Tuple3[Int, String, Int], Tuple4[Int, Double, Double, Double])) => {\n    val originalFunction = ((m: ((Int, String, Int), (Int, Double, Double, Double))) => (m._2._2, 1))(_)\n    val originalValue = originalFunction(inputParameter)\n    (-originalValue._1, originalValue._2)\n  } }\n  val sumMeanOfRatingsAllMovies: (Double, Int) = meanOfRatingsAllMovies.reduce { (m1: (Double, Int), m2: (Double, Int)) => (m1._1 + m2._1, m1._2 + m2._2) }\n  sumMeanOfRatingsAllMovies._1 / sumMeanOfRatingsAllMovies._2\n}",
      "originalCode" : "def meanOfMeansOfRatingsOfAllMovies(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))]) = {\n    val meanOfRatingsAllMovies: RDD[(Double, Int)] = ratingsStats.map((m: ((Int, String, Int), (Int, Double, Double, Double))) => (m._2._2, 1))\n    val sumMeanOfRatingsAllMovies: (Double, Int) = meanOfRatingsAllMovies.reduce((m1: (Double, Int), m2: (Double, Int)) => (m1._1 + m2._1, m1._2 + m2._2))\n    sumMeanOfRatingsAllMovies._1 / sumMeanOfRatingsAllMovies._2\n  }",
      "status" : "Killed"
    },
    {
      "id" : 121,
      "originalProgramId" : 5,
      "mutationOperator" : "MTR",
      "mutationOperatorDescription" : "Mapping Transformation Replacement",
      "mutantCode" : "def meanOfMeansOfRatingsOfAllMovies(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))]) = {\n  val meanOfRatingsAllMovies: RDD[(Double, Int)] = ratingsStats.map { (inputParameter: (Tuple3[Int, String, Int], Tuple4[Int, Double, Double, Double])) => {\n    val originalFunction = ((m: ((Int, String, Int), (Int, Double, Double, Double))) => (m._2._2, 1))(_)\n    val originalValue = originalFunction(inputParameter)\n    (originalValue._1, 0)\n  } }\n  val sumMeanOfRatingsAllMovies: (Double, Int) = meanOfRatingsAllMovies.reduce { (m1: (Double, Int), m2: (Double, Int)) => (m1._1 + m2._1, m1._2 + m2._2) }\n  sumMeanOfRatingsAllMovies._1 / sumMeanOfRatingsAllMovies._2\n}",
      "originalCode" : "def meanOfMeansOfRatingsOfAllMovies(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))]) = {\n    val meanOfRatingsAllMovies: RDD[(Double, Int)] = ratingsStats.map((m: ((Int, String, Int), (Int, Double, Double, Double))) => (m._2._2, 1))\n    val sumMeanOfRatingsAllMovies: (Double, Int) = meanOfRatingsAllMovies.reduce((m1: (Double, Int), m2: (Double, Int)) => (m1._1 + m2._1, m1._2 + m2._2))\n    sumMeanOfRatingsAllMovies._1 / sumMeanOfRatingsAllMovies._2\n  }",
      "status" : "Killed"
    },
    {
      "id" : 122,
      "originalProgramId" : 5,
      "mutationOperator" : "MTR",
      "mutationOperatorDescription" : "Mapping Transformation Replacement",
      "mutantCode" : "def meanOfMeansOfRatingsOfAllMovies(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))]) = {\n  val meanOfRatingsAllMovies: RDD[(Double, Int)] = ratingsStats.map { (inputParameter: (Tuple3[Int, String, Int], Tuple4[Int, Double, Double, Double])) => {\n    val originalFunction = ((m: ((Int, String, Int), (Int, Double, Double, Double))) => (m._2._2, 1))(_)\n    val originalValue = originalFunction(inputParameter)\n    (originalValue._1, 1)\n  } }\n  val sumMeanOfRatingsAllMovies: (Double, Int) = meanOfRatingsAllMovies.reduce { (m1: (Double, Int), m2: (Double, Int)) => (m1._1 + m2._1, m1._2 + m2._2) }\n  sumMeanOfRatingsAllMovies._1 / sumMeanOfRatingsAllMovies._2\n}",
      "originalCode" : "def meanOfMeansOfRatingsOfAllMovies(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))]) = {\n    val meanOfRatingsAllMovies: RDD[(Double, Int)] = ratingsStats.map((m: ((Int, String, Int), (Int, Double, Double, Double))) => (m._2._2, 1))\n    val sumMeanOfRatingsAllMovies: (Double, Int) = meanOfRatingsAllMovies.reduce((m1: (Double, Int), m2: (Double, Int)) => (m1._1 + m2._1, m1._2 + m2._2))\n    sumMeanOfRatingsAllMovies._1 / sumMeanOfRatingsAllMovies._2\n  }",
      "status" : "Equivalent"
    },
    {
      "id" : 123,
      "originalProgramId" : 5,
      "mutationOperator" : "MTR",
      "mutationOperatorDescription" : "Mapping Transformation Replacement",
      "mutantCode" : "def meanOfMeansOfRatingsOfAllMovies(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))]) = {\n  val meanOfRatingsAllMovies: RDD[(Double, Int)] = ratingsStats.map { (inputParameter: (Tuple3[Int, String, Int], Tuple4[Int, Double, Double, Double])) => {\n    val originalFunction = ((m: ((Int, String, Int), (Int, Double, Double, Double))) => (m._2._2, 1))(_)\n    val originalValue = originalFunction(inputParameter)\n    (originalValue._1, Int.MaxValue)\n  } }\n  val sumMeanOfRatingsAllMovies: (Double, Int) = meanOfRatingsAllMovies.reduce { (m1: (Double, Int), m2: (Double, Int)) => (m1._1 + m2._1, m1._2 + m2._2) }\n  sumMeanOfRatingsAllMovies._1 / sumMeanOfRatingsAllMovies._2\n}",
      "originalCode" : "def meanOfMeansOfRatingsOfAllMovies(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))]) = {\n    val meanOfRatingsAllMovies: RDD[(Double, Int)] = ratingsStats.map((m: ((Int, String, Int), (Int, Double, Double, Double))) => (m._2._2, 1))\n    val sumMeanOfRatingsAllMovies: (Double, Int) = meanOfRatingsAllMovies.reduce((m1: (Double, Int), m2: (Double, Int)) => (m1._1 + m2._1, m1._2 + m2._2))\n    sumMeanOfRatingsAllMovies._1 / sumMeanOfRatingsAllMovies._2\n  }",
      "status" : "Killed"
    },
    {
      "id" : 124,
      "originalProgramId" : 5,
      "mutationOperator" : "MTR",
      "mutationOperatorDescription" : "Mapping Transformation Replacement",
      "mutantCode" : "def meanOfMeansOfRatingsOfAllMovies(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))]) = {\n  val meanOfRatingsAllMovies: RDD[(Double, Int)] = ratingsStats.map { (inputParameter: (Tuple3[Int, String, Int], Tuple4[Int, Double, Double, Double])) => {\n    val originalFunction = ((m: ((Int, String, Int), (Int, Double, Double, Double))) => (m._2._2, 1))(_)\n    val originalValue = originalFunction(inputParameter)\n    (originalValue._1, Int.MinValue)\n  } }\n  val sumMeanOfRatingsAllMovies: (Double, Int) = meanOfRatingsAllMovies.reduce { (m1: (Double, Int), m2: (Double, Int)) => (m1._1 + m2._1, m1._2 + m2._2) }\n  sumMeanOfRatingsAllMovies._1 / sumMeanOfRatingsAllMovies._2\n}",
      "originalCode" : "def meanOfMeansOfRatingsOfAllMovies(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))]) = {\n    val meanOfRatingsAllMovies: RDD[(Double, Int)] = ratingsStats.map((m: ((Int, String, Int), (Int, Double, Double, Double))) => (m._2._2, 1))\n    val sumMeanOfRatingsAllMovies: (Double, Int) = meanOfRatingsAllMovies.reduce((m1: (Double, Int), m2: (Double, Int)) => (m1._1 + m2._1, m1._2 + m2._2))\n    sumMeanOfRatingsAllMovies._1 / sumMeanOfRatingsAllMovies._2\n  }",
      "status" : "Killed"
    },
    {
      "id" : 125,
      "originalProgramId" : 5,
      "mutationOperator" : "MTR",
      "mutationOperatorDescription" : "Mapping Transformation Replacement",
      "mutantCode" : "def meanOfMeansOfRatingsOfAllMovies(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))]) = {\n  val meanOfRatingsAllMovies: RDD[(Double, Int)] = ratingsStats.map { (inputParameter: (Tuple3[Int, String, Int], Tuple4[Int, Double, Double, Double])) => {\n    val originalFunction = ((m: ((Int, String, Int), (Int, Double, Double, Double))) => (m._2._2, 1))(_)\n    val originalValue = originalFunction(inputParameter)\n    (originalValue._1, -originalValue._2)\n  } }\n  val sumMeanOfRatingsAllMovies: (Double, Int) = meanOfRatingsAllMovies.reduce { (m1: (Double, Int), m2: (Double, Int)) => (m1._1 + m2._1, m1._2 + m2._2) }\n  sumMeanOfRatingsAllMovies._1 / sumMeanOfRatingsAllMovies._2\n}",
      "originalCode" : "def meanOfMeansOfRatingsOfAllMovies(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))]) = {\n    val meanOfRatingsAllMovies: RDD[(Double, Int)] = ratingsStats.map((m: ((Int, String, Int), (Int, Double, Double, Double))) => (m._2._2, 1))\n    val sumMeanOfRatingsAllMovies: (Double, Int) = meanOfRatingsAllMovies.reduce((m1: (Double, Int), m2: (Double, Int)) => (m1._1 + m2._1, m1._2 + m2._2))\n    sumMeanOfRatingsAllMovies._1 / sumMeanOfRatingsAllMovies._2\n  }",
      "status" : "Killed"
    },
    {
      "id" : 126,
      "originalProgramId" : 5,
      "mutationOperator" : "DTI",
      "mutationOperatorDescription" : "Distinct Transformation Insertion",
      "mutantCode" : "def meanOfMeansOfRatingsOfAllMovies(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))]) = {\n  val meanOfRatingsAllMovies: RDD[(Double, Int)] = ratingsStats.map { (m: ((Int, String, Int), (Int, Double, Double, Double))) => (m._2._2, 1) }.distinct()\n  val sumMeanOfRatingsAllMovies: (Double, Int) = meanOfRatingsAllMovies.reduce { (m1: (Double, Int), m2: (Double, Int)) => (m1._1 + m2._1, m1._2 + m2._2) }\n  sumMeanOfRatingsAllMovies._1 / sumMeanOfRatingsAllMovies._2\n}",
      "originalCode" : "def meanOfMeansOfRatingsOfAllMovies(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))]) = {\n    val meanOfRatingsAllMovies: RDD[(Double, Int)] = ratingsStats.map((m: ((Int, String, Int), (Int, Double, Double, Double))) => (m._2._2, 1))\n    val sumMeanOfRatingsAllMovies: (Double, Int) = meanOfRatingsAllMovies.reduce((m1: (Double, Int), m2: (Double, Int)) => (m1._1 + m2._1, m1._2 + m2._2))\n    sumMeanOfRatingsAllMovies._1 / sumMeanOfRatingsAllMovies._2\n  }",
      "status" : "Lived"
    },
    {
      "id" : 127,
      "originalProgramId" : 6,
      "mutationOperator" : "UTD",
      "mutationOperatorDescription" : "Unary Transformation Deletion",
      "mutantCode" : "def bestMoviesDecade(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))], minimumVotesRequired: Double, meanOfMeansRatingsOfAllMovies: Double) = {\n  val ratingsStatisticsWithWR: RDD[((Int, String, Int), (Int, Double, Double, Double, Double))] = ratingsStats.map { (s: ((Int, String, Int), (Int, Double, Double, Double))) => (s._1, (s._2._1, s._2._2, s._2._3, s._2._4, weighted_rating(s._2._2, s._2._1.toDouble, minimumVotesRequired, meanOfMeansRatingsOfAllMovies))) }\n  val ratingsStatisticsWithWRDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = ratingsStatisticsWithWR.map { (m: ((Int, String, Int), (Int, Double, Double, Double, Double))) => (m._1._3 / 10 * 10, (m._1._2, m._2)) }\n  val groupByDecade: RDD[(Int, Iterable[(String, (Int, Double, Double, Double, Double))])] = ratingsStatisticsWithWRDecade.groupByKey()\n  val bestMoviesDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = groupByDecade.map { (j: (Int, Iterable[(String, (Int, Double, Double, Double, Double))])) => (j._1, j._2.reduce((j1, j2) => if (j1._2._5 > j2._2._5) j1 else j2)) }\n  val bestMoviesDecadeSorted: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = bestMoviesDecade\n  bestMoviesDecadeSorted\n}",
      "originalCode" : "def bestMoviesDecade(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))], minimumVotesRequired: Double, meanOfMeansRatingsOfAllMovies: Double) = {\n    val ratingsStatisticsWithWR: RDD[((Int, String, Int), (Int, Double, Double, Double, Double))] = ratingsStats.map((s: ((Int, String, Int), (Int, Double, Double, Double))) => (s._1, (s._2._1, s._2._2, s._2._3, s._2._4, weighted_rating(s._2._2, s._2._1.toDouble, minimumVotesRequired, meanOfMeansRatingsOfAllMovies))))\n    val ratingsStatisticsWithWRDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = ratingsStatisticsWithWR.map((m: (((Int, String, Int), (Int, Double, Double, Double, Double)))) => (m._1._3 / 10 * 10, (m._1._2, m._2)))\n    val groupByDecade: RDD[(Int, Iterable[(String, (Int, Double, Double, Double, Double))])] = ratingsStatisticsWithWRDecade.groupByKey()\n    val bestMoviesDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = groupByDecade.map((j: (Int, Iterable[(String, (Int, Double, Double, Double, Double))])) => (j._1, j._2.reduce((j1, j2) => if (j1._2._5 > j2._2._5) j1 else j2)))\n    val bestMoviesDecadeSorted: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = bestMoviesDecade.sortByKey(true)\n    bestMoviesDecadeSorted\n  }",
      "status" : "Lived"
    },
    {
      "id" : 128,
      "originalProgramId" : 6,
      "mutationOperator" : "MTR",
      "mutationOperatorDescription" : "Mapping Transformation Replacement",
      "mutantCode" : "def bestMoviesDecade(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))], minimumVotesRequired: Double, meanOfMeansRatingsOfAllMovies: Double) = {\n  val ratingsStatisticsWithWR: RDD[((Int, String, Int), (Int, Double, Double, Double, Double))] = ratingsStats.map { (s: ((Int, String, Int), (Int, Double, Double, Double))) => (s._1, (s._2._1, s._2._2, s._2._3, s._2._4, weighted_rating(s._2._2, s._2._1.toDouble, minimumVotesRequired, meanOfMeansRatingsOfAllMovies))) }\n  val ratingsStatisticsWithWRDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = ratingsStatisticsWithWR.map { (inputParameter: (Tuple3[Int, String, Int], Tuple5[Int, Double, Double, Double, Double])) => {\n    val originalFunction = ((m: ((Int, String, Int), (Int, Double, Double, Double, Double))) => (m._1._3 / 10 * 10, (m._1._2, m._2)))(_)\n    val originalValue = originalFunction(inputParameter)\n    (0, originalValue._2)\n  } }\n  val groupByDecade: RDD[(Int, Iterable[(String, (Int, Double, Double, Double, Double))])] = ratingsStatisticsWithWRDecade.groupByKey()\n  val bestMoviesDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = groupByDecade.map { (j: (Int, Iterable[(String, (Int, Double, Double, Double, Double))])) => (j._1, j._2.reduce((j1, j2) => if (j1._2._5 > j2._2._5) j1 else j2)) }\n  val bestMoviesDecadeSorted: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = bestMoviesDecade.sortByKey(true)\n  bestMoviesDecadeSorted\n}",
      "originalCode" : "def bestMoviesDecade(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))], minimumVotesRequired: Double, meanOfMeansRatingsOfAllMovies: Double) = {\n    val ratingsStatisticsWithWR: RDD[((Int, String, Int), (Int, Double, Double, Double, Double))] = ratingsStats.map((s: ((Int, String, Int), (Int, Double, Double, Double))) => (s._1, (s._2._1, s._2._2, s._2._3, s._2._4, weighted_rating(s._2._2, s._2._1.toDouble, minimumVotesRequired, meanOfMeansRatingsOfAllMovies))))\n    val ratingsStatisticsWithWRDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = ratingsStatisticsWithWR.map((m: (((Int, String, Int), (Int, Double, Double, Double, Double)))) => (m._1._3 / 10 * 10, (m._1._2, m._2)))\n    val groupByDecade: RDD[(Int, Iterable[(String, (Int, Double, Double, Double, Double))])] = ratingsStatisticsWithWRDecade.groupByKey()\n    val bestMoviesDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = groupByDecade.map((j: (Int, Iterable[(String, (Int, Double, Double, Double, Double))])) => (j._1, j._2.reduce((j1, j2) => if (j1._2._5 > j2._2._5) j1 else j2)))\n    val bestMoviesDecadeSorted: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = bestMoviesDecade.sortByKey(true)\n    bestMoviesDecadeSorted\n  }",
      "status" : "Killed"
    },
    {
      "id" : 129,
      "originalProgramId" : 6,
      "mutationOperator" : "MTR",
      "mutationOperatorDescription" : "Mapping Transformation Replacement",
      "mutantCode" : "def bestMoviesDecade(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))], minimumVotesRequired: Double, meanOfMeansRatingsOfAllMovies: Double) = {\n  val ratingsStatisticsWithWR: RDD[((Int, String, Int), (Int, Double, Double, Double, Double))] = ratingsStats.map { (s: ((Int, String, Int), (Int, Double, Double, Double))) => (s._1, (s._2._1, s._2._2, s._2._3, s._2._4, weighted_rating(s._2._2, s._2._1.toDouble, minimumVotesRequired, meanOfMeansRatingsOfAllMovies))) }\n  val ratingsStatisticsWithWRDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = ratingsStatisticsWithWR.map { (inputParameter: (Tuple3[Int, String, Int], Tuple5[Int, Double, Double, Double, Double])) => {\n    val originalFunction = ((m: ((Int, String, Int), (Int, Double, Double, Double, Double))) => (m._1._3 / 10 * 10, (m._1._2, m._2)))(_)\n    val originalValue = originalFunction(inputParameter)\n    (1, originalValue._2)\n  } }\n  val groupByDecade: RDD[(Int, Iterable[(String, (Int, Double, Double, Double, Double))])] = ratingsStatisticsWithWRDecade.groupByKey()\n  val bestMoviesDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = groupByDecade.map { (j: (Int, Iterable[(String, (Int, Double, Double, Double, Double))])) => (j._1, j._2.reduce((j1, j2) => if (j1._2._5 > j2._2._5) j1 else j2)) }\n  val bestMoviesDecadeSorted: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = bestMoviesDecade.sortByKey(true)\n  bestMoviesDecadeSorted\n}",
      "originalCode" : "def bestMoviesDecade(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))], minimumVotesRequired: Double, meanOfMeansRatingsOfAllMovies: Double) = {\n    val ratingsStatisticsWithWR: RDD[((Int, String, Int), (Int, Double, Double, Double, Double))] = ratingsStats.map((s: ((Int, String, Int), (Int, Double, Double, Double))) => (s._1, (s._2._1, s._2._2, s._2._3, s._2._4, weighted_rating(s._2._2, s._2._1.toDouble, minimumVotesRequired, meanOfMeansRatingsOfAllMovies))))\n    val ratingsStatisticsWithWRDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = ratingsStatisticsWithWR.map((m: (((Int, String, Int), (Int, Double, Double, Double, Double)))) => (m._1._3 / 10 * 10, (m._1._2, m._2)))\n    val groupByDecade: RDD[(Int, Iterable[(String, (Int, Double, Double, Double, Double))])] = ratingsStatisticsWithWRDecade.groupByKey()\n    val bestMoviesDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = groupByDecade.map((j: (Int, Iterable[(String, (Int, Double, Double, Double, Double))])) => (j._1, j._2.reduce((j1, j2) => if (j1._2._5 > j2._2._5) j1 else j2)))\n    val bestMoviesDecadeSorted: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = bestMoviesDecade.sortByKey(true)\n    bestMoviesDecadeSorted\n  }",
      "status" : "Killed"
    },
    {
      "id" : 130,
      "originalProgramId" : 6,
      "mutationOperator" : "MTR",
      "mutationOperatorDescription" : "Mapping Transformation Replacement",
      "mutantCode" : "def bestMoviesDecade(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))], minimumVotesRequired: Double, meanOfMeansRatingsOfAllMovies: Double) = {\n  val ratingsStatisticsWithWR: RDD[((Int, String, Int), (Int, Double, Double, Double, Double))] = ratingsStats.map { (s: ((Int, String, Int), (Int, Double, Double, Double))) => (s._1, (s._2._1, s._2._2, s._2._3, s._2._4, weighted_rating(s._2._2, s._2._1.toDouble, minimumVotesRequired, meanOfMeansRatingsOfAllMovies))) }\n  val ratingsStatisticsWithWRDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = ratingsStatisticsWithWR.map { (inputParameter: (Tuple3[Int, String, Int], Tuple5[Int, Double, Double, Double, Double])) => {\n    val originalFunction = ((m: ((Int, String, Int), (Int, Double, Double, Double, Double))) => (m._1._3 / 10 * 10, (m._1._2, m._2)))(_)\n    val originalValue = originalFunction(inputParameter)\n    (Int.MaxValue, originalValue._2)\n  } }\n  val groupByDecade: RDD[(Int, Iterable[(String, (Int, Double, Double, Double, Double))])] = ratingsStatisticsWithWRDecade.groupByKey()\n  val bestMoviesDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = groupByDecade.map { (j: (Int, Iterable[(String, (Int, Double, Double, Double, Double))])) => (j._1, j._2.reduce((j1, j2) => if (j1._2._5 > j2._2._5) j1 else j2)) }\n  val bestMoviesDecadeSorted: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = bestMoviesDecade.sortByKey(true)\n  bestMoviesDecadeSorted\n}",
      "originalCode" : "def bestMoviesDecade(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))], minimumVotesRequired: Double, meanOfMeansRatingsOfAllMovies: Double) = {\n    val ratingsStatisticsWithWR: RDD[((Int, String, Int), (Int, Double, Double, Double, Double))] = ratingsStats.map((s: ((Int, String, Int), (Int, Double, Double, Double))) => (s._1, (s._2._1, s._2._2, s._2._3, s._2._4, weighted_rating(s._2._2, s._2._1.toDouble, minimumVotesRequired, meanOfMeansRatingsOfAllMovies))))\n    val ratingsStatisticsWithWRDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = ratingsStatisticsWithWR.map((m: (((Int, String, Int), (Int, Double, Double, Double, Double)))) => (m._1._3 / 10 * 10, (m._1._2, m._2)))\n    val groupByDecade: RDD[(Int, Iterable[(String, (Int, Double, Double, Double, Double))])] = ratingsStatisticsWithWRDecade.groupByKey()\n    val bestMoviesDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = groupByDecade.map((j: (Int, Iterable[(String, (Int, Double, Double, Double, Double))])) => (j._1, j._2.reduce((j1, j2) => if (j1._2._5 > j2._2._5) j1 else j2)))\n    val bestMoviesDecadeSorted: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = bestMoviesDecade.sortByKey(true)\n    bestMoviesDecadeSorted\n  }",
      "status" : "Killed"
    },
    {
      "id" : 131,
      "originalProgramId" : 6,
      "mutationOperator" : "MTR",
      "mutationOperatorDescription" : "Mapping Transformation Replacement",
      "mutantCode" : "def bestMoviesDecade(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))], minimumVotesRequired: Double, meanOfMeansRatingsOfAllMovies: Double) = {\n  val ratingsStatisticsWithWR: RDD[((Int, String, Int), (Int, Double, Double, Double, Double))] = ratingsStats.map { (s: ((Int, String, Int), (Int, Double, Double, Double))) => (s._1, (s._2._1, s._2._2, s._2._3, s._2._4, weighted_rating(s._2._2, s._2._1.toDouble, minimumVotesRequired, meanOfMeansRatingsOfAllMovies))) }\n  val ratingsStatisticsWithWRDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = ratingsStatisticsWithWR.map { (inputParameter: (Tuple3[Int, String, Int], Tuple5[Int, Double, Double, Double, Double])) => {\n    val originalFunction = ((m: ((Int, String, Int), (Int, Double, Double, Double, Double))) => (m._1._3 / 10 * 10, (m._1._2, m._2)))(_)\n    val originalValue = originalFunction(inputParameter)\n    (Int.MinValue, originalValue._2)\n  } }\n  val groupByDecade: RDD[(Int, Iterable[(String, (Int, Double, Double, Double, Double))])] = ratingsStatisticsWithWRDecade.groupByKey()\n  val bestMoviesDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = groupByDecade.map { (j: (Int, Iterable[(String, (Int, Double, Double, Double, Double))])) => (j._1, j._2.reduce((j1, j2) => if (j1._2._5 > j2._2._5) j1 else j2)) }\n  val bestMoviesDecadeSorted: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = bestMoviesDecade.sortByKey(true)\n  bestMoviesDecadeSorted\n}",
      "originalCode" : "def bestMoviesDecade(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))], minimumVotesRequired: Double, meanOfMeansRatingsOfAllMovies: Double) = {\n    val ratingsStatisticsWithWR: RDD[((Int, String, Int), (Int, Double, Double, Double, Double))] = ratingsStats.map((s: ((Int, String, Int), (Int, Double, Double, Double))) => (s._1, (s._2._1, s._2._2, s._2._3, s._2._4, weighted_rating(s._2._2, s._2._1.toDouble, minimumVotesRequired, meanOfMeansRatingsOfAllMovies))))\n    val ratingsStatisticsWithWRDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = ratingsStatisticsWithWR.map((m: (((Int, String, Int), (Int, Double, Double, Double, Double)))) => (m._1._3 / 10 * 10, (m._1._2, m._2)))\n    val groupByDecade: RDD[(Int, Iterable[(String, (Int, Double, Double, Double, Double))])] = ratingsStatisticsWithWRDecade.groupByKey()\n    val bestMoviesDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = groupByDecade.map((j: (Int, Iterable[(String, (Int, Double, Double, Double, Double))])) => (j._1, j._2.reduce((j1, j2) => if (j1._2._5 > j2._2._5) j1 else j2)))\n    val bestMoviesDecadeSorted: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = bestMoviesDecade.sortByKey(true)\n    bestMoviesDecadeSorted\n  }",
      "status" : "Killed"
    },
    {
      "id" : 132,
      "originalProgramId" : 6,
      "mutationOperator" : "MTR",
      "mutationOperatorDescription" : "Mapping Transformation Replacement",
      "mutantCode" : "def bestMoviesDecade(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))], minimumVotesRequired: Double, meanOfMeansRatingsOfAllMovies: Double) = {\n  val ratingsStatisticsWithWR: RDD[((Int, String, Int), (Int, Double, Double, Double, Double))] = ratingsStats.map { (s: ((Int, String, Int), (Int, Double, Double, Double))) => (s._1, (s._2._1, s._2._2, s._2._3, s._2._4, weighted_rating(s._2._2, s._2._1.toDouble, minimumVotesRequired, meanOfMeansRatingsOfAllMovies))) }\n  val ratingsStatisticsWithWRDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = ratingsStatisticsWithWR.map { (inputParameter: (Tuple3[Int, String, Int], Tuple5[Int, Double, Double, Double, Double])) => {\n    val originalFunction = ((m: ((Int, String, Int), (Int, Double, Double, Double, Double))) => (m._1._3 / 10 * 10, (m._1._2, m._2)))(_)\n    val originalValue = originalFunction(inputParameter)\n    (-originalValue._1, originalValue._2)\n  } }\n  val groupByDecade: RDD[(Int, Iterable[(String, (Int, Double, Double, Double, Double))])] = ratingsStatisticsWithWRDecade.groupByKey()\n  val bestMoviesDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = groupByDecade.map { (j: (Int, Iterable[(String, (Int, Double, Double, Double, Double))])) => (j._1, j._2.reduce((j1, j2) => if (j1._2._5 > j2._2._5) j1 else j2)) }\n  val bestMoviesDecadeSorted: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = bestMoviesDecade.sortByKey(true)\n  bestMoviesDecadeSorted\n}",
      "originalCode" : "def bestMoviesDecade(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))], minimumVotesRequired: Double, meanOfMeansRatingsOfAllMovies: Double) = {\n    val ratingsStatisticsWithWR: RDD[((Int, String, Int), (Int, Double, Double, Double, Double))] = ratingsStats.map((s: ((Int, String, Int), (Int, Double, Double, Double))) => (s._1, (s._2._1, s._2._2, s._2._3, s._2._4, weighted_rating(s._2._2, s._2._1.toDouble, minimumVotesRequired, meanOfMeansRatingsOfAllMovies))))\n    val ratingsStatisticsWithWRDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = ratingsStatisticsWithWR.map((m: (((Int, String, Int), (Int, Double, Double, Double, Double)))) => (m._1._3 / 10 * 10, (m._1._2, m._2)))\n    val groupByDecade: RDD[(Int, Iterable[(String, (Int, Double, Double, Double, Double))])] = ratingsStatisticsWithWRDecade.groupByKey()\n    val bestMoviesDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = groupByDecade.map((j: (Int, Iterable[(String, (Int, Double, Double, Double, Double))])) => (j._1, j._2.reduce((j1, j2) => if (j1._2._5 > j2._2._5) j1 else j2)))\n    val bestMoviesDecadeSorted: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = bestMoviesDecade.sortByKey(true)\n    bestMoviesDecadeSorted\n  }",
      "status" : "Killed"
    },
    {
      "id" : 133,
      "originalProgramId" : 6,
      "mutationOperator" : "MTR",
      "mutationOperatorDescription" : "Mapping Transformation Replacement",
      "mutantCode" : "def bestMoviesDecade(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))], minimumVotesRequired: Double, meanOfMeansRatingsOfAllMovies: Double) = {\n  val ratingsStatisticsWithWR: RDD[((Int, String, Int), (Int, Double, Double, Double, Double))] = ratingsStats.map { (s: ((Int, String, Int), (Int, Double, Double, Double))) => (s._1, (s._2._1, s._2._2, s._2._3, s._2._4, weighted_rating(s._2._2, s._2._1.toDouble, minimumVotesRequired, meanOfMeansRatingsOfAllMovies))) }\n  val ratingsStatisticsWithWRDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = ratingsStatisticsWithWR.map { (inputParameter: (Tuple3[Int, String, Int], Tuple5[Int, Double, Double, Double, Double])) => {\n    val originalFunction = ((m: ((Int, String, Int), (Int, Double, Double, Double, Double))) => (m._1._3 / 10 * 10, (m._1._2, m._2)))(_)\n    val originalValue = originalFunction(inputParameter)\n    (originalValue._1, (\"\", originalValue._2._2))\n  } }\n  val groupByDecade: RDD[(Int, Iterable[(String, (Int, Double, Double, Double, Double))])] = ratingsStatisticsWithWRDecade.groupByKey()\n  val bestMoviesDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = groupByDecade.map { (j: (Int, Iterable[(String, (Int, Double, Double, Double, Double))])) => (j._1, j._2.reduce((j1, j2) => if (j1._2._5 > j2._2._5) j1 else j2)) }\n  val bestMoviesDecadeSorted: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = bestMoviesDecade.sortByKey(true)\n  bestMoviesDecadeSorted\n}",
      "originalCode" : "def bestMoviesDecade(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))], minimumVotesRequired: Double, meanOfMeansRatingsOfAllMovies: Double) = {\n    val ratingsStatisticsWithWR: RDD[((Int, String, Int), (Int, Double, Double, Double, Double))] = ratingsStats.map((s: ((Int, String, Int), (Int, Double, Double, Double))) => (s._1, (s._2._1, s._2._2, s._2._3, s._2._4, weighted_rating(s._2._2, s._2._1.toDouble, minimumVotesRequired, meanOfMeansRatingsOfAllMovies))))\n    val ratingsStatisticsWithWRDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = ratingsStatisticsWithWR.map((m: (((Int, String, Int), (Int, Double, Double, Double, Double)))) => (m._1._3 / 10 * 10, (m._1._2, m._2)))\n    val groupByDecade: RDD[(Int, Iterable[(String, (Int, Double, Double, Double, Double))])] = ratingsStatisticsWithWRDecade.groupByKey()\n    val bestMoviesDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = groupByDecade.map((j: (Int, Iterable[(String, (Int, Double, Double, Double, Double))])) => (j._1, j._2.reduce((j1, j2) => if (j1._2._5 > j2._2._5) j1 else j2)))\n    val bestMoviesDecadeSorted: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = bestMoviesDecade.sortByKey(true)\n    bestMoviesDecadeSorted\n  }",
      "status" : "Killed"
    },
    {
      "id" : 134,
      "originalProgramId" : 6,
      "mutationOperator" : "MTR",
      "mutationOperatorDescription" : "Mapping Transformation Replacement",
      "mutantCode" : "def bestMoviesDecade(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))], minimumVotesRequired: Double, meanOfMeansRatingsOfAllMovies: Double) = {\n  val ratingsStatisticsWithWR: RDD[((Int, String, Int), (Int, Double, Double, Double, Double))] = ratingsStats.map { (s: ((Int, String, Int), (Int, Double, Double, Double))) => (s._1, (s._2._1, s._2._2, s._2._3, s._2._4, weighted_rating(s._2._2, s._2._1.toDouble, minimumVotesRequired, meanOfMeansRatingsOfAllMovies))) }\n  val ratingsStatisticsWithWRDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = ratingsStatisticsWithWR.map { (m: ((Int, String, Int), (Int, Double, Double, Double, Double))) => (m._1._3 / 10 * 10, (m._1._2, m._2)) }\n  val groupByDecade: RDD[(Int, Iterable[(String, (Int, Double, Double, Double, Double))])] = ratingsStatisticsWithWRDecade.groupByKey()\n  val bestMoviesDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = groupByDecade.map { (inputParameter: (Int, Iterable[(String, Tuple5[Int, Double, Double, Double, Double])])) => {\n    val originalFunction = ((j: (Int, Iterable[(String, (Int, Double, Double, Double, Double))])) => (j._1, j._2.reduce((j1, j2) => if (j1._2._5 > j2._2._5) j1 else j2)))(_)\n    val originalValue = originalFunction(inputParameter)\n    (0, originalValue._2)\n  } }\n  val bestMoviesDecadeSorted: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = bestMoviesDecade.sortByKey(true)\n  bestMoviesDecadeSorted\n}",
      "originalCode" : "def bestMoviesDecade(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))], minimumVotesRequired: Double, meanOfMeansRatingsOfAllMovies: Double) = {\n    val ratingsStatisticsWithWR: RDD[((Int, String, Int), (Int, Double, Double, Double, Double))] = ratingsStats.map((s: ((Int, String, Int), (Int, Double, Double, Double))) => (s._1, (s._2._1, s._2._2, s._2._3, s._2._4, weighted_rating(s._2._2, s._2._1.toDouble, minimumVotesRequired, meanOfMeansRatingsOfAllMovies))))\n    val ratingsStatisticsWithWRDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = ratingsStatisticsWithWR.map((m: (((Int, String, Int), (Int, Double, Double, Double, Double)))) => (m._1._3 / 10 * 10, (m._1._2, m._2)))\n    val groupByDecade: RDD[(Int, Iterable[(String, (Int, Double, Double, Double, Double))])] = ratingsStatisticsWithWRDecade.groupByKey()\n    val bestMoviesDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = groupByDecade.map((j: (Int, Iterable[(String, (Int, Double, Double, Double, Double))])) => (j._1, j._2.reduce((j1, j2) => if (j1._2._5 > j2._2._5) j1 else j2)))\n    val bestMoviesDecadeSorted: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = bestMoviesDecade.sortByKey(true)\n    bestMoviesDecadeSorted\n  }",
      "status" : "Killed"
    },
    {
      "id" : 135,
      "originalProgramId" : 6,
      "mutationOperator" : "MTR",
      "mutationOperatorDescription" : "Mapping Transformation Replacement",
      "mutantCode" : "def bestMoviesDecade(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))], minimumVotesRequired: Double, meanOfMeansRatingsOfAllMovies: Double) = {\n  val ratingsStatisticsWithWR: RDD[((Int, String, Int), (Int, Double, Double, Double, Double))] = ratingsStats.map { (s: ((Int, String, Int), (Int, Double, Double, Double))) => (s._1, (s._2._1, s._2._2, s._2._3, s._2._4, weighted_rating(s._2._2, s._2._1.toDouble, minimumVotesRequired, meanOfMeansRatingsOfAllMovies))) }\n  val ratingsStatisticsWithWRDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = ratingsStatisticsWithWR.map { (m: ((Int, String, Int), (Int, Double, Double, Double, Double))) => (m._1._3 / 10 * 10, (m._1._2, m._2)) }\n  val groupByDecade: RDD[(Int, Iterable[(String, (Int, Double, Double, Double, Double))])] = ratingsStatisticsWithWRDecade.groupByKey()\n  val bestMoviesDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = groupByDecade.map { (inputParameter: (Int, Iterable[(String, Tuple5[Int, Double, Double, Double, Double])])) => {\n    val originalFunction = ((j: (Int, Iterable[(String, (Int, Double, Double, Double, Double))])) => (j._1, j._2.reduce((j1, j2) => if (j1._2._5 > j2._2._5) j1 else j2)))(_)\n    val originalValue = originalFunction(inputParameter)\n    (1, originalValue._2)\n  } }\n  val bestMoviesDecadeSorted: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = bestMoviesDecade.sortByKey(true)\n  bestMoviesDecadeSorted\n}",
      "originalCode" : "def bestMoviesDecade(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))], minimumVotesRequired: Double, meanOfMeansRatingsOfAllMovies: Double) = {\n    val ratingsStatisticsWithWR: RDD[((Int, String, Int), (Int, Double, Double, Double, Double))] = ratingsStats.map((s: ((Int, String, Int), (Int, Double, Double, Double))) => (s._1, (s._2._1, s._2._2, s._2._3, s._2._4, weighted_rating(s._2._2, s._2._1.toDouble, minimumVotesRequired, meanOfMeansRatingsOfAllMovies))))\n    val ratingsStatisticsWithWRDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = ratingsStatisticsWithWR.map((m: (((Int, String, Int), (Int, Double, Double, Double, Double)))) => (m._1._3 / 10 * 10, (m._1._2, m._2)))\n    val groupByDecade: RDD[(Int, Iterable[(String, (Int, Double, Double, Double, Double))])] = ratingsStatisticsWithWRDecade.groupByKey()\n    val bestMoviesDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = groupByDecade.map((j: (Int, Iterable[(String, (Int, Double, Double, Double, Double))])) => (j._1, j._2.reduce((j1, j2) => if (j1._2._5 > j2._2._5) j1 else j2)))\n    val bestMoviesDecadeSorted: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = bestMoviesDecade.sortByKey(true)\n    bestMoviesDecadeSorted\n  }",
      "status" : "Killed"
    },
    {
      "id" : 136,
      "originalProgramId" : 6,
      "mutationOperator" : "MTR",
      "mutationOperatorDescription" : "Mapping Transformation Replacement",
      "mutantCode" : "def bestMoviesDecade(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))], minimumVotesRequired: Double, meanOfMeansRatingsOfAllMovies: Double) = {\n  val ratingsStatisticsWithWR: RDD[((Int, String, Int), (Int, Double, Double, Double, Double))] = ratingsStats.map { (s: ((Int, String, Int), (Int, Double, Double, Double))) => (s._1, (s._2._1, s._2._2, s._2._3, s._2._4, weighted_rating(s._2._2, s._2._1.toDouble, minimumVotesRequired, meanOfMeansRatingsOfAllMovies))) }\n  val ratingsStatisticsWithWRDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = ratingsStatisticsWithWR.map { (m: ((Int, String, Int), (Int, Double, Double, Double, Double))) => (m._1._3 / 10 * 10, (m._1._2, m._2)) }\n  val groupByDecade: RDD[(Int, Iterable[(String, (Int, Double, Double, Double, Double))])] = ratingsStatisticsWithWRDecade.groupByKey()\n  val bestMoviesDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = groupByDecade.map { (inputParameter: (Int, Iterable[(String, Tuple5[Int, Double, Double, Double, Double])])) => {\n    val originalFunction = ((j: (Int, Iterable[(String, (Int, Double, Double, Double, Double))])) => (j._1, j._2.reduce((j1, j2) => if (j1._2._5 > j2._2._5) j1 else j2)))(_)\n    val originalValue = originalFunction(inputParameter)\n    (Int.MaxValue, originalValue._2)\n  } }\n  val bestMoviesDecadeSorted: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = bestMoviesDecade.sortByKey(true)\n  bestMoviesDecadeSorted\n}",
      "originalCode" : "def bestMoviesDecade(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))], minimumVotesRequired: Double, meanOfMeansRatingsOfAllMovies: Double) = {\n    val ratingsStatisticsWithWR: RDD[((Int, String, Int), (Int, Double, Double, Double, Double))] = ratingsStats.map((s: ((Int, String, Int), (Int, Double, Double, Double))) => (s._1, (s._2._1, s._2._2, s._2._3, s._2._4, weighted_rating(s._2._2, s._2._1.toDouble, minimumVotesRequired, meanOfMeansRatingsOfAllMovies))))\n    val ratingsStatisticsWithWRDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = ratingsStatisticsWithWR.map((m: (((Int, String, Int), (Int, Double, Double, Double, Double)))) => (m._1._3 / 10 * 10, (m._1._2, m._2)))\n    val groupByDecade: RDD[(Int, Iterable[(String, (Int, Double, Double, Double, Double))])] = ratingsStatisticsWithWRDecade.groupByKey()\n    val bestMoviesDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = groupByDecade.map((j: (Int, Iterable[(String, (Int, Double, Double, Double, Double))])) => (j._1, j._2.reduce((j1, j2) => if (j1._2._5 > j2._2._5) j1 else j2)))\n    val bestMoviesDecadeSorted: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = bestMoviesDecade.sortByKey(true)\n    bestMoviesDecadeSorted\n  }",
      "status" : "Killed"
    },
    {
      "id" : 137,
      "originalProgramId" : 6,
      "mutationOperator" : "MTR",
      "mutationOperatorDescription" : "Mapping Transformation Replacement",
      "mutantCode" : "def bestMoviesDecade(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))], minimumVotesRequired: Double, meanOfMeansRatingsOfAllMovies: Double) = {\n  val ratingsStatisticsWithWR: RDD[((Int, String, Int), (Int, Double, Double, Double, Double))] = ratingsStats.map { (s: ((Int, String, Int), (Int, Double, Double, Double))) => (s._1, (s._2._1, s._2._2, s._2._3, s._2._4, weighted_rating(s._2._2, s._2._1.toDouble, minimumVotesRequired, meanOfMeansRatingsOfAllMovies))) }\n  val ratingsStatisticsWithWRDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = ratingsStatisticsWithWR.map { (m: ((Int, String, Int), (Int, Double, Double, Double, Double))) => (m._1._3 / 10 * 10, (m._1._2, m._2)) }\n  val groupByDecade: RDD[(Int, Iterable[(String, (Int, Double, Double, Double, Double))])] = ratingsStatisticsWithWRDecade.groupByKey()\n  val bestMoviesDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = groupByDecade.map { (inputParameter: (Int, Iterable[(String, Tuple5[Int, Double, Double, Double, Double])])) => {\n    val originalFunction = ((j: (Int, Iterable[(String, (Int, Double, Double, Double, Double))])) => (j._1, j._2.reduce((j1, j2) => if (j1._2._5 > j2._2._5) j1 else j2)))(_)\n    val originalValue = originalFunction(inputParameter)\n    (Int.MinValue, originalValue._2)\n  } }\n  val bestMoviesDecadeSorted: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = bestMoviesDecade.sortByKey(true)\n  bestMoviesDecadeSorted\n}",
      "originalCode" : "def bestMoviesDecade(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))], minimumVotesRequired: Double, meanOfMeansRatingsOfAllMovies: Double) = {\n    val ratingsStatisticsWithWR: RDD[((Int, String, Int), (Int, Double, Double, Double, Double))] = ratingsStats.map((s: ((Int, String, Int), (Int, Double, Double, Double))) => (s._1, (s._2._1, s._2._2, s._2._3, s._2._4, weighted_rating(s._2._2, s._2._1.toDouble, minimumVotesRequired, meanOfMeansRatingsOfAllMovies))))\n    val ratingsStatisticsWithWRDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = ratingsStatisticsWithWR.map((m: (((Int, String, Int), (Int, Double, Double, Double, Double)))) => (m._1._3 / 10 * 10, (m._1._2, m._2)))\n    val groupByDecade: RDD[(Int, Iterable[(String, (Int, Double, Double, Double, Double))])] = ratingsStatisticsWithWRDecade.groupByKey()\n    val bestMoviesDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = groupByDecade.map((j: (Int, Iterable[(String, (Int, Double, Double, Double, Double))])) => (j._1, j._2.reduce((j1, j2) => if (j1._2._5 > j2._2._5) j1 else j2)))\n    val bestMoviesDecadeSorted: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = bestMoviesDecade.sortByKey(true)\n    bestMoviesDecadeSorted\n  }",
      "status" : "Killed"
    },
    {
      "id" : 138,
      "originalProgramId" : 6,
      "mutationOperator" : "MTR",
      "mutationOperatorDescription" : "Mapping Transformation Replacement",
      "mutantCode" : "def bestMoviesDecade(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))], minimumVotesRequired: Double, meanOfMeansRatingsOfAllMovies: Double) = {\n  val ratingsStatisticsWithWR: RDD[((Int, String, Int), (Int, Double, Double, Double, Double))] = ratingsStats.map { (s: ((Int, String, Int), (Int, Double, Double, Double))) => (s._1, (s._2._1, s._2._2, s._2._3, s._2._4, weighted_rating(s._2._2, s._2._1.toDouble, minimumVotesRequired, meanOfMeansRatingsOfAllMovies))) }\n  val ratingsStatisticsWithWRDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = ratingsStatisticsWithWR.map { (m: ((Int, String, Int), (Int, Double, Double, Double, Double))) => (m._1._3 / 10 * 10, (m._1._2, m._2)) }\n  val groupByDecade: RDD[(Int, Iterable[(String, (Int, Double, Double, Double, Double))])] = ratingsStatisticsWithWRDecade.groupByKey()\n  val bestMoviesDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = groupByDecade.map { (inputParameter: (Int, Iterable[(String, Tuple5[Int, Double, Double, Double, Double])])) => {\n    val originalFunction = ((j: (Int, Iterable[(String, (Int, Double, Double, Double, Double))])) => (j._1, j._2.reduce((j1, j2) => if (j1._2._5 > j2._2._5) j1 else j2)))(_)\n    val originalValue = originalFunction(inputParameter)\n    (-originalValue._1, originalValue._2)\n  } }\n  val bestMoviesDecadeSorted: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = bestMoviesDecade.sortByKey(true)\n  bestMoviesDecadeSorted\n}",
      "originalCode" : "def bestMoviesDecade(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))], minimumVotesRequired: Double, meanOfMeansRatingsOfAllMovies: Double) = {\n    val ratingsStatisticsWithWR: RDD[((Int, String, Int), (Int, Double, Double, Double, Double))] = ratingsStats.map((s: ((Int, String, Int), (Int, Double, Double, Double))) => (s._1, (s._2._1, s._2._2, s._2._3, s._2._4, weighted_rating(s._2._2, s._2._1.toDouble, minimumVotesRequired, meanOfMeansRatingsOfAllMovies))))\n    val ratingsStatisticsWithWRDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = ratingsStatisticsWithWR.map((m: (((Int, String, Int), (Int, Double, Double, Double, Double)))) => (m._1._3 / 10 * 10, (m._1._2, m._2)))\n    val groupByDecade: RDD[(Int, Iterable[(String, (Int, Double, Double, Double, Double))])] = ratingsStatisticsWithWRDecade.groupByKey()\n    val bestMoviesDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = groupByDecade.map((j: (Int, Iterable[(String, (Int, Double, Double, Double, Double))])) => (j._1, j._2.reduce((j1, j2) => if (j1._2._5 > j2._2._5) j1 else j2)))\n    val bestMoviesDecadeSorted: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = bestMoviesDecade.sortByKey(true)\n    bestMoviesDecadeSorted\n  }",
      "status" : "Killed"
    },
    {
      "id" : 139,
      "originalProgramId" : 6,
      "mutationOperator" : "MTR",
      "mutationOperatorDescription" : "Mapping Transformation Replacement",
      "mutantCode" : "def bestMoviesDecade(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))], minimumVotesRequired: Double, meanOfMeansRatingsOfAllMovies: Double) = {\n  val ratingsStatisticsWithWR: RDD[((Int, String, Int), (Int, Double, Double, Double, Double))] = ratingsStats.map { (s: ((Int, String, Int), (Int, Double, Double, Double))) => (s._1, (s._2._1, s._2._2, s._2._3, s._2._4, weighted_rating(s._2._2, s._2._1.toDouble, minimumVotesRequired, meanOfMeansRatingsOfAllMovies))) }\n  val ratingsStatisticsWithWRDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = ratingsStatisticsWithWR.map { (m: ((Int, String, Int), (Int, Double, Double, Double, Double))) => (m._1._3 / 10 * 10, (m._1._2, m._2)) }\n  val groupByDecade: RDD[(Int, Iterable[(String, (Int, Double, Double, Double, Double))])] = ratingsStatisticsWithWRDecade.groupByKey()\n  val bestMoviesDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = groupByDecade.map { (inputParameter: (Int, Iterable[(String, Tuple5[Int, Double, Double, Double, Double])])) => {\n    val originalFunction = ((j: (Int, Iterable[(String, (Int, Double, Double, Double, Double))])) => (j._1, j._2.reduce((j1, j2) => if (j1._2._5 > j2._2._5) j1 else j2)))(_)\n    val originalValue = originalFunction(inputParameter)\n    (originalValue._1, (\"\", originalValue._2._2))\n  } }\n  val bestMoviesDecadeSorted: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = bestMoviesDecade.sortByKey(true)\n  bestMoviesDecadeSorted\n}",
      "originalCode" : "def bestMoviesDecade(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))], minimumVotesRequired: Double, meanOfMeansRatingsOfAllMovies: Double) = {\n    val ratingsStatisticsWithWR: RDD[((Int, String, Int), (Int, Double, Double, Double, Double))] = ratingsStats.map((s: ((Int, String, Int), (Int, Double, Double, Double))) => (s._1, (s._2._1, s._2._2, s._2._3, s._2._4, weighted_rating(s._2._2, s._2._1.toDouble, minimumVotesRequired, meanOfMeansRatingsOfAllMovies))))\n    val ratingsStatisticsWithWRDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = ratingsStatisticsWithWR.map((m: (((Int, String, Int), (Int, Double, Double, Double, Double)))) => (m._1._3 / 10 * 10, (m._1._2, m._2)))\n    val groupByDecade: RDD[(Int, Iterable[(String, (Int, Double, Double, Double, Double))])] = ratingsStatisticsWithWRDecade.groupByKey()\n    val bestMoviesDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = groupByDecade.map((j: (Int, Iterable[(String, (Int, Double, Double, Double, Double))])) => (j._1, j._2.reduce((j1, j2) => if (j1._2._5 > j2._2._5) j1 else j2)))\n    val bestMoviesDecadeSorted: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = bestMoviesDecade.sortByKey(true)\n    bestMoviesDecadeSorted\n  }",
      "status" : "Killed"
    },
    {
      "id" : 140,
      "originalProgramId" : 6,
      "mutationOperator" : "DTI",
      "mutationOperatorDescription" : "Distinct Transformation Insertion",
      "mutantCode" : "def bestMoviesDecade(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))], minimumVotesRequired: Double, meanOfMeansRatingsOfAllMovies: Double) = {\n  val ratingsStatisticsWithWR: RDD[((Int, String, Int), (Int, Double, Double, Double, Double))] = ratingsStats.map { (s: ((Int, String, Int), (Int, Double, Double, Double))) => (s._1, (s._2._1, s._2._2, s._2._3, s._2._4, weighted_rating(s._2._2, s._2._1.toDouble, minimumVotesRequired, meanOfMeansRatingsOfAllMovies))) }.distinct()\n  val ratingsStatisticsWithWRDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = ratingsStatisticsWithWR.map { (m: ((Int, String, Int), (Int, Double, Double, Double, Double))) => (m._1._3 / 10 * 10, (m._1._2, m._2)) }\n  val groupByDecade: RDD[(Int, Iterable[(String, (Int, Double, Double, Double, Double))])] = ratingsStatisticsWithWRDecade.groupByKey()\n  val bestMoviesDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = groupByDecade.map { (j: (Int, Iterable[(String, (Int, Double, Double, Double, Double))])) => (j._1, j._2.reduce((j1, j2) => if (j1._2._5 > j2._2._5) j1 else j2)) }\n  val bestMoviesDecadeSorted: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = bestMoviesDecade.sortByKey(true)\n  bestMoviesDecadeSorted\n}",
      "originalCode" : "def bestMoviesDecade(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))], minimumVotesRequired: Double, meanOfMeansRatingsOfAllMovies: Double) = {\n    val ratingsStatisticsWithWR: RDD[((Int, String, Int), (Int, Double, Double, Double, Double))] = ratingsStats.map((s: ((Int, String, Int), (Int, Double, Double, Double))) => (s._1, (s._2._1, s._2._2, s._2._3, s._2._4, weighted_rating(s._2._2, s._2._1.toDouble, minimumVotesRequired, meanOfMeansRatingsOfAllMovies))))\n    val ratingsStatisticsWithWRDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = ratingsStatisticsWithWR.map((m: (((Int, String, Int), (Int, Double, Double, Double, Double)))) => (m._1._3 / 10 * 10, (m._1._2, m._2)))\n    val groupByDecade: RDD[(Int, Iterable[(String, (Int, Double, Double, Double, Double))])] = ratingsStatisticsWithWRDecade.groupByKey()\n    val bestMoviesDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = groupByDecade.map((j: (Int, Iterable[(String, (Int, Double, Double, Double, Double))])) => (j._1, j._2.reduce((j1, j2) => if (j1._2._5 > j2._2._5) j1 else j2)))\n    val bestMoviesDecadeSorted: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = bestMoviesDecade.sortByKey(true)\n    bestMoviesDecadeSorted\n  }",
      "status" : "Equivalent"
    },
    {
      "id" : 141,
      "originalProgramId" : 6,
      "mutationOperator" : "DTI",
      "mutationOperatorDescription" : "Distinct Transformation Insertion",
      "mutantCode" : "def bestMoviesDecade(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))], minimumVotesRequired: Double, meanOfMeansRatingsOfAllMovies: Double) = {\n  val ratingsStatisticsWithWR: RDD[((Int, String, Int), (Int, Double, Double, Double, Double))] = ratingsStats.map { (s: ((Int, String, Int), (Int, Double, Double, Double))) => (s._1, (s._2._1, s._2._2, s._2._3, s._2._4, weighted_rating(s._2._2, s._2._1.toDouble, minimumVotesRequired, meanOfMeansRatingsOfAllMovies))) }\n  val ratingsStatisticsWithWRDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = ratingsStatisticsWithWR.map { (m: ((Int, String, Int), (Int, Double, Double, Double, Double))) => (m._1._3 / 10 * 10, (m._1._2, m._2)) }.distinct()\n  val groupByDecade: RDD[(Int, Iterable[(String, (Int, Double, Double, Double, Double))])] = ratingsStatisticsWithWRDecade.groupByKey()\n  val bestMoviesDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = groupByDecade.map { (j: (Int, Iterable[(String, (Int, Double, Double, Double, Double))])) => (j._1, j._2.reduce((j1, j2) => if (j1._2._5 > j2._2._5) j1 else j2)) }\n  val bestMoviesDecadeSorted: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = bestMoviesDecade.sortByKey(true)\n  bestMoviesDecadeSorted\n}",
      "originalCode" : "def bestMoviesDecade(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))], minimumVotesRequired: Double, meanOfMeansRatingsOfAllMovies: Double) = {\n    val ratingsStatisticsWithWR: RDD[((Int, String, Int), (Int, Double, Double, Double, Double))] = ratingsStats.map((s: ((Int, String, Int), (Int, Double, Double, Double))) => (s._1, (s._2._1, s._2._2, s._2._3, s._2._4, weighted_rating(s._2._2, s._2._1.toDouble, minimumVotesRequired, meanOfMeansRatingsOfAllMovies))))\n    val ratingsStatisticsWithWRDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = ratingsStatisticsWithWR.map((m: (((Int, String, Int), (Int, Double, Double, Double, Double)))) => (m._1._3 / 10 * 10, (m._1._2, m._2)))\n    val groupByDecade: RDD[(Int, Iterable[(String, (Int, Double, Double, Double, Double))])] = ratingsStatisticsWithWRDecade.groupByKey()\n    val bestMoviesDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = groupByDecade.map((j: (Int, Iterable[(String, (Int, Double, Double, Double, Double))])) => (j._1, j._2.reduce((j1, j2) => if (j1._2._5 > j2._2._5) j1 else j2)))\n    val bestMoviesDecadeSorted: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = bestMoviesDecade.sortByKey(true)\n    bestMoviesDecadeSorted\n  }",
      "status" : "Equivalent"
    },
    {
      "id" : 142,
      "originalProgramId" : 6,
      "mutationOperator" : "DTI",
      "mutationOperatorDescription" : "Distinct Transformation Insertion",
      "mutantCode" : "def bestMoviesDecade(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))], minimumVotesRequired: Double, meanOfMeansRatingsOfAllMovies: Double) = {\n  val ratingsStatisticsWithWR: RDD[((Int, String, Int), (Int, Double, Double, Double, Double))] = ratingsStats.map { (s: ((Int, String, Int), (Int, Double, Double, Double))) => (s._1, (s._2._1, s._2._2, s._2._3, s._2._4, weighted_rating(s._2._2, s._2._1.toDouble, minimumVotesRequired, meanOfMeansRatingsOfAllMovies))) }\n  val ratingsStatisticsWithWRDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = ratingsStatisticsWithWR.map { (m: ((Int, String, Int), (Int, Double, Double, Double, Double))) => (m._1._3 / 10 * 10, (m._1._2, m._2)) }\n  val groupByDecade: RDD[(Int, Iterable[(String, (Int, Double, Double, Double, Double))])] = ratingsStatisticsWithWRDecade.groupByKey().distinct()\n  val bestMoviesDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = groupByDecade.map { (j: (Int, Iterable[(String, (Int, Double, Double, Double, Double))])) => (j._1, j._2.reduce((j1, j2) => if (j1._2._5 > j2._2._5) j1 else j2)) }\n  val bestMoviesDecadeSorted: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = bestMoviesDecade.sortByKey(true)\n  bestMoviesDecadeSorted\n}",
      "originalCode" : "def bestMoviesDecade(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))], minimumVotesRequired: Double, meanOfMeansRatingsOfAllMovies: Double) = {\n    val ratingsStatisticsWithWR: RDD[((Int, String, Int), (Int, Double, Double, Double, Double))] = ratingsStats.map((s: ((Int, String, Int), (Int, Double, Double, Double))) => (s._1, (s._2._1, s._2._2, s._2._3, s._2._4, weighted_rating(s._2._2, s._2._1.toDouble, minimumVotesRequired, meanOfMeansRatingsOfAllMovies))))\n    val ratingsStatisticsWithWRDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = ratingsStatisticsWithWR.map((m: (((Int, String, Int), (Int, Double, Double, Double, Double)))) => (m._1._3 / 10 * 10, (m._1._2, m._2)))\n    val groupByDecade: RDD[(Int, Iterable[(String, (Int, Double, Double, Double, Double))])] = ratingsStatisticsWithWRDecade.groupByKey()\n    val bestMoviesDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = groupByDecade.map((j: (Int, Iterable[(String, (Int, Double, Double, Double, Double))])) => (j._1, j._2.reduce((j1, j2) => if (j1._2._5 > j2._2._5) j1 else j2)))\n    val bestMoviesDecadeSorted: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = bestMoviesDecade.sortByKey(true)\n    bestMoviesDecadeSorted\n  }",
      "status" : "Equivalent"
    },
    {
      "id" : 143,
      "originalProgramId" : 6,
      "mutationOperator" : "DTI",
      "mutationOperatorDescription" : "Distinct Transformation Insertion",
      "mutantCode" : "def bestMoviesDecade(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))], minimumVotesRequired: Double, meanOfMeansRatingsOfAllMovies: Double) = {\n  val ratingsStatisticsWithWR: RDD[((Int, String, Int), (Int, Double, Double, Double, Double))] = ratingsStats.map { (s: ((Int, String, Int), (Int, Double, Double, Double))) => (s._1, (s._2._1, s._2._2, s._2._3, s._2._4, weighted_rating(s._2._2, s._2._1.toDouble, minimumVotesRequired, meanOfMeansRatingsOfAllMovies))) }\n  val ratingsStatisticsWithWRDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = ratingsStatisticsWithWR.map { (m: ((Int, String, Int), (Int, Double, Double, Double, Double))) => (m._1._3 / 10 * 10, (m._1._2, m._2)) }\n  val groupByDecade: RDD[(Int, Iterable[(String, (Int, Double, Double, Double, Double))])] = ratingsStatisticsWithWRDecade.groupByKey()\n  val bestMoviesDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = groupByDecade.map { (j: (Int, Iterable[(String, (Int, Double, Double, Double, Double))])) => (j._1, j._2.reduce((j1, j2) => if (j1._2._5 > j2._2._5) j1 else j2)) }.distinct()\n  val bestMoviesDecadeSorted: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = bestMoviesDecade.sortByKey(true)\n  bestMoviesDecadeSorted\n}",
      "originalCode" : "def bestMoviesDecade(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))], minimumVotesRequired: Double, meanOfMeansRatingsOfAllMovies: Double) = {\n    val ratingsStatisticsWithWR: RDD[((Int, String, Int), (Int, Double, Double, Double, Double))] = ratingsStats.map((s: ((Int, String, Int), (Int, Double, Double, Double))) => (s._1, (s._2._1, s._2._2, s._2._3, s._2._4, weighted_rating(s._2._2, s._2._1.toDouble, minimumVotesRequired, meanOfMeansRatingsOfAllMovies))))\n    val ratingsStatisticsWithWRDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = ratingsStatisticsWithWR.map((m: (((Int, String, Int), (Int, Double, Double, Double, Double)))) => (m._1._3 / 10 * 10, (m._1._2, m._2)))\n    val groupByDecade: RDD[(Int, Iterable[(String, (Int, Double, Double, Double, Double))])] = ratingsStatisticsWithWRDecade.groupByKey()\n    val bestMoviesDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = groupByDecade.map((j: (Int, Iterable[(String, (Int, Double, Double, Double, Double))])) => (j._1, j._2.reduce((j1, j2) => if (j1._2._5 > j2._2._5) j1 else j2)))\n    val bestMoviesDecadeSorted: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = bestMoviesDecade.sortByKey(true)\n    bestMoviesDecadeSorted\n  }",
      "status" : "Equivalent"
    },
    {
      "id" : 144,
      "originalProgramId" : 6,
      "mutationOperator" : "DTI",
      "mutationOperatorDescription" : "Distinct Transformation Insertion",
      "mutantCode" : "def bestMoviesDecade(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))], minimumVotesRequired: Double, meanOfMeansRatingsOfAllMovies: Double) = {\n  val ratingsStatisticsWithWR: RDD[((Int, String, Int), (Int, Double, Double, Double, Double))] = ratingsStats.map { (s: ((Int, String, Int), (Int, Double, Double, Double))) => (s._1, (s._2._1, s._2._2, s._2._3, s._2._4, weighted_rating(s._2._2, s._2._1.toDouble, minimumVotesRequired, meanOfMeansRatingsOfAllMovies))) }\n  val ratingsStatisticsWithWRDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = ratingsStatisticsWithWR.map { (m: ((Int, String, Int), (Int, Double, Double, Double, Double))) => (m._1._3 / 10 * 10, (m._1._2, m._2)) }\n  val groupByDecade: RDD[(Int, Iterable[(String, (Int, Double, Double, Double, Double))])] = ratingsStatisticsWithWRDecade.groupByKey()\n  val bestMoviesDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = groupByDecade.map { (j: (Int, Iterable[(String, (Int, Double, Double, Double, Double))])) => (j._1, j._2.reduce((j1, j2) => if (j1._2._5 > j2._2._5) j1 else j2)) }\n  val bestMoviesDecadeSorted: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = bestMoviesDecade.sortByKey(true).distinct()\n  bestMoviesDecadeSorted\n}",
      "originalCode" : "def bestMoviesDecade(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))], minimumVotesRequired: Double, meanOfMeansRatingsOfAllMovies: Double) = {\n    val ratingsStatisticsWithWR: RDD[((Int, String, Int), (Int, Double, Double, Double, Double))] = ratingsStats.map((s: ((Int, String, Int), (Int, Double, Double, Double))) => (s._1, (s._2._1, s._2._2, s._2._3, s._2._4, weighted_rating(s._2._2, s._2._1.toDouble, minimumVotesRequired, meanOfMeansRatingsOfAllMovies))))\n    val ratingsStatisticsWithWRDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = ratingsStatisticsWithWR.map((m: (((Int, String, Int), (Int, Double, Double, Double, Double)))) => (m._1._3 / 10 * 10, (m._1._2, m._2)))\n    val groupByDecade: RDD[(Int, Iterable[(String, (Int, Double, Double, Double, Double))])] = ratingsStatisticsWithWRDecade.groupByKey()\n    val bestMoviesDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = groupByDecade.map((j: (Int, Iterable[(String, (Int, Double, Double, Double, Double))])) => (j._1, j._2.reduce((j1, j2) => if (j1._2._5 > j2._2._5) j1 else j2)))\n    val bestMoviesDecadeSorted: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = bestMoviesDecade.sortByKey(true)\n    bestMoviesDecadeSorted\n  }",
      "status" : "Lived"
    },
    {
      "id" : 145,
      "originalProgramId" : 6,
      "mutationOperator" : "OTD",
      "mutationOperatorDescription" : "Order Transformation Deletion",
      "mutantCode" : "def bestMoviesDecade(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))], minimumVotesRequired: Double, meanOfMeansRatingsOfAllMovies: Double) = {\n  val ratingsStatisticsWithWR: RDD[((Int, String, Int), (Int, Double, Double, Double, Double))] = ratingsStats.map { (s: ((Int, String, Int), (Int, Double, Double, Double))) => (s._1, (s._2._1, s._2._2, s._2._3, s._2._4, weighted_rating(s._2._2, s._2._1.toDouble, minimumVotesRequired, meanOfMeansRatingsOfAllMovies))) }\n  val ratingsStatisticsWithWRDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = ratingsStatisticsWithWR.map { (m: ((Int, String, Int), (Int, Double, Double, Double, Double))) => (m._1._3 / 10 * 10, (m._1._2, m._2)) }\n  val groupByDecade: RDD[(Int, Iterable[(String, (Int, Double, Double, Double, Double))])] = ratingsStatisticsWithWRDecade.groupByKey()\n  val bestMoviesDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = groupByDecade.map { (j: (Int, Iterable[(String, (Int, Double, Double, Double, Double))])) => (j._1, j._2.reduce((j1, j2) => if (j1._2._5 > j2._2._5) j1 else j2)) }\n  val bestMoviesDecadeSorted: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = bestMoviesDecade\n  bestMoviesDecadeSorted\n}",
      "originalCode" : "def bestMoviesDecade(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))], minimumVotesRequired: Double, meanOfMeansRatingsOfAllMovies: Double) = {\n    val ratingsStatisticsWithWR: RDD[((Int, String, Int), (Int, Double, Double, Double, Double))] = ratingsStats.map((s: ((Int, String, Int), (Int, Double, Double, Double))) => (s._1, (s._2._1, s._2._2, s._2._3, s._2._4, weighted_rating(s._2._2, s._2._1.toDouble, minimumVotesRequired, meanOfMeansRatingsOfAllMovies))))\n    val ratingsStatisticsWithWRDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = ratingsStatisticsWithWR.map((m: (((Int, String, Int), (Int, Double, Double, Double, Double)))) => (m._1._3 / 10 * 10, (m._1._2, m._2)))\n    val groupByDecade: RDD[(Int, Iterable[(String, (Int, Double, Double, Double, Double))])] = ratingsStatisticsWithWRDecade.groupByKey()\n    val bestMoviesDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = groupByDecade.map((j: (Int, Iterable[(String, (Int, Double, Double, Double, Double))])) => (j._1, j._2.reduce((j1, j2) => if (j1._2._5 > j2._2._5) j1 else j2)))\n    val bestMoviesDecadeSorted: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = bestMoviesDecade.sortByKey(true)\n    bestMoviesDecadeSorted\n  }",
      "status" : "Lived"
    },
    {
      "id" : 146,
      "originalProgramId" : 6,
      "mutationOperator" : "OTI",
      "mutationOperatorDescription" : "Order Transformation Inversion",
      "mutantCode" : "def bestMoviesDecade(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))], minimumVotesRequired: Double, meanOfMeansRatingsOfAllMovies: Double) = {\n  val ratingsStatisticsWithWR: RDD[((Int, String, Int), (Int, Double, Double, Double, Double))] = ratingsStats.map { (s: ((Int, String, Int), (Int, Double, Double, Double))) => (s._1, (s._2._1, s._2._2, s._2._3, s._2._4, weighted_rating(s._2._2, s._2._1.toDouble, minimumVotesRequired, meanOfMeansRatingsOfAllMovies))) }\n  val ratingsStatisticsWithWRDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = ratingsStatisticsWithWR.map { (m: ((Int, String, Int), (Int, Double, Double, Double, Double))) => (m._1._3 / 10 * 10, (m._1._2, m._2)) }\n  val groupByDecade: RDD[(Int, Iterable[(String, (Int, Double, Double, Double, Double))])] = ratingsStatisticsWithWRDecade.groupByKey()\n  val bestMoviesDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = groupByDecade.map { (j: (Int, Iterable[(String, (Int, Double, Double, Double, Double))])) => (j._1, j._2.reduce((j1, j2) => if (j1._2._5 > j2._2._5) j1 else j2)) }\n  val bestMoviesDecadeSorted: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = bestMoviesDecade.sortByKey(false)\n  bestMoviesDecadeSorted\n}",
      "originalCode" : "def bestMoviesDecade(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))], minimumVotesRequired: Double, meanOfMeansRatingsOfAllMovies: Double) = {\n    val ratingsStatisticsWithWR: RDD[((Int, String, Int), (Int, Double, Double, Double, Double))] = ratingsStats.map((s: ((Int, String, Int), (Int, Double, Double, Double))) => (s._1, (s._2._1, s._2._2, s._2._3, s._2._4, weighted_rating(s._2._2, s._2._1.toDouble, minimumVotesRequired, meanOfMeansRatingsOfAllMovies))))\n    val ratingsStatisticsWithWRDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = ratingsStatisticsWithWR.map((m: (((Int, String, Int), (Int, Double, Double, Double, Double)))) => (m._1._3 / 10 * 10, (m._1._2, m._2)))\n    val groupByDecade: RDD[(Int, Iterable[(String, (Int, Double, Double, Double, Double))])] = ratingsStatisticsWithWRDecade.groupByKey()\n    val bestMoviesDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = groupByDecade.map((j: (Int, Iterable[(String, (Int, Double, Double, Double, Double))])) => (j._1, j._2.reduce((j1, j2) => if (j1._2._5 > j2._2._5) j1 else j2)))\n    val bestMoviesDecadeSorted: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = bestMoviesDecade.sortByKey(true)\n    bestMoviesDecadeSorted\n  }",
      "status" : "Lived"
    },
    {
      "id" : 147,
      "originalProgramId" : 7,
      "mutationOperator" : "UTD",
      "mutationOperatorDescription" : "Unary Transformation Deletion",
      "mutantCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val tagsMovieIdKey: RDD[(Int, String)] = tags.map { (t: Tag) => (t.movieId, t.tag) }\n  val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n  val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap { (mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)) }\n  val genresTagsCounts: RDD[((String, String), Int)] = genresTags\n  val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map { (g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n  genresTagsCountSorted\n}",
      "originalCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val tagsMovieIdKey: RDD[(Int, String)] = tags.map((t: Tag) => (t.movieId, t.tag))\n    val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n    val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap((mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)))\n    val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey((w: Int, z: Int) => w + z)\n    val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n    genresTagsCountSorted\n  }",
      "status" : "Killed"
    },
    {
      "id" : 148,
      "originalProgramId" : 7,
      "mutationOperator" : "UTD",
      "mutationOperatorDescription" : "Unary Transformation Deletion",
      "mutantCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val tagsMovieIdKey: RDD[(Int, String)] = tags.map { (t: Tag) => (t.movieId, t.tag) }\n  val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n  val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap { (mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)) }\n  val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey { (w: Int, z: Int) => w + z }\n  val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map { (g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped\n  genresTagsCountSorted\n}",
      "originalCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val tagsMovieIdKey: RDD[(Int, String)] = tags.map((t: Tag) => (t.movieId, t.tag))\n    val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n    val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap((mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)))\n    val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey((w: Int, z: Int) => w + z)\n    val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n    genresTagsCountSorted\n  }",
      "status" : "Killed"
    },
    {
      "id" : 149,
      "originalProgramId" : 7,
      "mutationOperator" : "MTR",
      "mutationOperatorDescription" : "Mapping Transformation Replacement",
      "mutantCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (inputParameter: Movie) => {\n    val originalFunction = ((m: Movie) => (m.movieId, m))(_)\n    val originalValue = originalFunction(inputParameter)\n    (0, originalValue._2)\n  } }\n  val tagsMovieIdKey: RDD[(Int, String)] = tags.map { (t: Tag) => (t.movieId, t.tag) }\n  val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n  val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap { (mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)) }\n  val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey { (w: Int, z: Int) => w + z }\n  val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map { (g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n  genresTagsCountSorted\n}",
      "originalCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val tagsMovieIdKey: RDD[(Int, String)] = tags.map((t: Tag) => (t.movieId, t.tag))\n    val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n    val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap((mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)))\n    val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey((w: Int, z: Int) => w + z)\n    val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n    genresTagsCountSorted\n  }",
      "status" : "Killed"
    },
    {
      "id" : 150,
      "originalProgramId" : 7,
      "mutationOperator" : "MTR",
      "mutationOperatorDescription" : "Mapping Transformation Replacement",
      "mutantCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (inputParameter: Movie) => {\n    val originalFunction = ((m: Movie) => (m.movieId, m))(_)\n    val originalValue = originalFunction(inputParameter)\n    (1, originalValue._2)\n  } }\n  val tagsMovieIdKey: RDD[(Int, String)] = tags.map { (t: Tag) => (t.movieId, t.tag) }\n  val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n  val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap { (mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)) }\n  val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey { (w: Int, z: Int) => w + z }\n  val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map { (g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n  genresTagsCountSorted\n}",
      "originalCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val tagsMovieIdKey: RDD[(Int, String)] = tags.map((t: Tag) => (t.movieId, t.tag))\n    val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n    val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap((mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)))\n    val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey((w: Int, z: Int) => w + z)\n    val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n    genresTagsCountSorted\n  }",
      "status" : "Killed"
    },
    {
      "id" : 151,
      "originalProgramId" : 7,
      "mutationOperator" : "MTR",
      "mutationOperatorDescription" : "Mapping Transformation Replacement",
      "mutantCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (inputParameter: Movie) => {\n    val originalFunction = ((m: Movie) => (m.movieId, m))(_)\n    val originalValue = originalFunction(inputParameter)\n    (Int.MaxValue, originalValue._2)\n  } }\n  val tagsMovieIdKey: RDD[(Int, String)] = tags.map { (t: Tag) => (t.movieId, t.tag) }\n  val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n  val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap { (mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)) }\n  val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey { (w: Int, z: Int) => w + z }\n  val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map { (g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n  genresTagsCountSorted\n}",
      "originalCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val tagsMovieIdKey: RDD[(Int, String)] = tags.map((t: Tag) => (t.movieId, t.tag))\n    val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n    val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap((mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)))\n    val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey((w: Int, z: Int) => w + z)\n    val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n    genresTagsCountSorted\n  }",
      "status" : "Killed"
    },
    {
      "id" : 152,
      "originalProgramId" : 7,
      "mutationOperator" : "MTR",
      "mutationOperatorDescription" : "Mapping Transformation Replacement",
      "mutantCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (inputParameter: Movie) => {\n    val originalFunction = ((m: Movie) => (m.movieId, m))(_)\n    val originalValue = originalFunction(inputParameter)\n    (Int.MinValue, originalValue._2)\n  } }\n  val tagsMovieIdKey: RDD[(Int, String)] = tags.map { (t: Tag) => (t.movieId, t.tag) }\n  val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n  val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap { (mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)) }\n  val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey { (w: Int, z: Int) => w + z }\n  val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map { (g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n  genresTagsCountSorted\n}",
      "originalCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val tagsMovieIdKey: RDD[(Int, String)] = tags.map((t: Tag) => (t.movieId, t.tag))\n    val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n    val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap((mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)))\n    val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey((w: Int, z: Int) => w + z)\n    val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n    genresTagsCountSorted\n  }",
      "status" : "Killed"
    },
    {
      "id" : 153,
      "originalProgramId" : 7,
      "mutationOperator" : "MTR",
      "mutationOperatorDescription" : "Mapping Transformation Replacement",
      "mutantCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (inputParameter: Movie) => {\n    val originalFunction = ((m: Movie) => (m.movieId, m))(_)\n    val originalValue = originalFunction(inputParameter)\n    (-originalValue._1, originalValue._2)\n  } }\n  val tagsMovieIdKey: RDD[(Int, String)] = tags.map { (t: Tag) => (t.movieId, t.tag) }\n  val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n  val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap { (mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)) }\n  val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey { (w: Int, z: Int) => w + z }\n  val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map { (g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n  genresTagsCountSorted\n}",
      "originalCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val tagsMovieIdKey: RDD[(Int, String)] = tags.map((t: Tag) => (t.movieId, t.tag))\n    val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n    val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap((mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)))\n    val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey((w: Int, z: Int) => w + z)\n    val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n    genresTagsCountSorted\n  }",
      "status" : "Killed"
    },
    {
      "id" : 154,
      "originalProgramId" : 7,
      "mutationOperator" : "MTR",
      "mutationOperatorDescription" : "Mapping Transformation Replacement",
      "mutantCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (inputParameter: Movie) => {\n    val originalFunction = ((m: Movie) => (m.movieId, m))(_)\n    val originalValue = originalFunction(inputParameter)\n    (originalValue._1, null.asInstanceOf[Movie])\n  } }\n  val tagsMovieIdKey: RDD[(Int, String)] = tags.map { (t: Tag) => (t.movieId, t.tag) }\n  val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n  val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap { (mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)) }\n  val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey { (w: Int, z: Int) => w + z }\n  val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map { (g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n  genresTagsCountSorted\n}",
      "originalCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val tagsMovieIdKey: RDD[(Int, String)] = tags.map((t: Tag) => (t.movieId, t.tag))\n    val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n    val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap((mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)))\n    val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey((w: Int, z: Int) => w + z)\n    val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n    genresTagsCountSorted\n  }",
      "status" : "Killed"
    },
    {
      "id" : 155,
      "originalProgramId" : 7,
      "mutationOperator" : "MTR",
      "mutationOperatorDescription" : "Mapping Transformation Replacement",
      "mutantCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val tagsMovieIdKey: RDD[(Int, String)] = tags.map { (inputParameter: Tag) => {\n    val originalFunction = ((t: Tag) => (t.movieId, t.tag))(_)\n    val originalValue = originalFunction(inputParameter)\n    (0, originalValue._2)\n  } }\n  val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n  val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap { (mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)) }\n  val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey { (w: Int, z: Int) => w + z }\n  val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map { (g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n  genresTagsCountSorted\n}",
      "originalCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val tagsMovieIdKey: RDD[(Int, String)] = tags.map((t: Tag) => (t.movieId, t.tag))\n    val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n    val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap((mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)))\n    val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey((w: Int, z: Int) => w + z)\n    val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n    genresTagsCountSorted\n  }",
      "status" : "Killed"
    },
    {
      "id" : 156,
      "originalProgramId" : 7,
      "mutationOperator" : "MTR",
      "mutationOperatorDescription" : "Mapping Transformation Replacement",
      "mutantCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val tagsMovieIdKey: RDD[(Int, String)] = tags.map { (inputParameter: Tag) => {\n    val originalFunction = ((t: Tag) => (t.movieId, t.tag))(_)\n    val originalValue = originalFunction(inputParameter)\n    (1, originalValue._2)\n  } }\n  val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n  val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap { (mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)) }\n  val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey { (w: Int, z: Int) => w + z }\n  val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map { (g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n  genresTagsCountSorted\n}",
      "originalCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val tagsMovieIdKey: RDD[(Int, String)] = tags.map((t: Tag) => (t.movieId, t.tag))\n    val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n    val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap((mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)))\n    val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey((w: Int, z: Int) => w + z)\n    val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n    genresTagsCountSorted\n  }",
      "status" : "Killed"
    },
    {
      "id" : 157,
      "originalProgramId" : 7,
      "mutationOperator" : "MTR",
      "mutationOperatorDescription" : "Mapping Transformation Replacement",
      "mutantCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val tagsMovieIdKey: RDD[(Int, String)] = tags.map { (inputParameter: Tag) => {\n    val originalFunction = ((t: Tag) => (t.movieId, t.tag))(_)\n    val originalValue = originalFunction(inputParameter)\n    (Int.MaxValue, originalValue._2)\n  } }\n  val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n  val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap { (mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)) }\n  val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey { (w: Int, z: Int) => w + z }\n  val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map { (g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n  genresTagsCountSorted\n}",
      "originalCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val tagsMovieIdKey: RDD[(Int, String)] = tags.map((t: Tag) => (t.movieId, t.tag))\n    val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n    val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap((mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)))\n    val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey((w: Int, z: Int) => w + z)\n    val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n    genresTagsCountSorted\n  }",
      "status" : "Killed"
    },
    {
      "id" : 158,
      "originalProgramId" : 7,
      "mutationOperator" : "MTR",
      "mutationOperatorDescription" : "Mapping Transformation Replacement",
      "mutantCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val tagsMovieIdKey: RDD[(Int, String)] = tags.map { (inputParameter: Tag) => {\n    val originalFunction = ((t: Tag) => (t.movieId, t.tag))(_)\n    val originalValue = originalFunction(inputParameter)\n    (Int.MinValue, originalValue._2)\n  } }\n  val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n  val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap { (mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)) }\n  val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey { (w: Int, z: Int) => w + z }\n  val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map { (g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n  genresTagsCountSorted\n}",
      "originalCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val tagsMovieIdKey: RDD[(Int, String)] = tags.map((t: Tag) => (t.movieId, t.tag))\n    val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n    val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap((mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)))\n    val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey((w: Int, z: Int) => w + z)\n    val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n    genresTagsCountSorted\n  }",
      "status" : "Killed"
    },
    {
      "id" : 159,
      "originalProgramId" : 7,
      "mutationOperator" : "MTR",
      "mutationOperatorDescription" : "Mapping Transformation Replacement",
      "mutantCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val tagsMovieIdKey: RDD[(Int, String)] = tags.map { (inputParameter: Tag) => {\n    val originalFunction = ((t: Tag) => (t.movieId, t.tag))(_)\n    val originalValue = originalFunction(inputParameter)\n    (-originalValue._1, originalValue._2)\n  } }\n  val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n  val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap { (mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)) }\n  val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey { (w: Int, z: Int) => w + z }\n  val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map { (g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n  genresTagsCountSorted\n}",
      "originalCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val tagsMovieIdKey: RDD[(Int, String)] = tags.map((t: Tag) => (t.movieId, t.tag))\n    val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n    val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap((mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)))\n    val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey((w: Int, z: Int) => w + z)\n    val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n    genresTagsCountSorted\n  }",
      "status" : "Killed"
    },
    {
      "id" : 160,
      "originalProgramId" : 7,
      "mutationOperator" : "MTR",
      "mutationOperatorDescription" : "Mapping Transformation Replacement",
      "mutantCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val tagsMovieIdKey: RDD[(Int, String)] = tags.map { (inputParameter: Tag) => {\n    val originalFunction = ((t: Tag) => (t.movieId, t.tag))(_)\n    val originalValue = originalFunction(inputParameter)\n    (originalValue._1, \"\")\n  } }\n  val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n  val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap { (mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)) }\n  val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey { (w: Int, z: Int) => w + z }\n  val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map { (g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n  genresTagsCountSorted\n}",
      "originalCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val tagsMovieIdKey: RDD[(Int, String)] = tags.map((t: Tag) => (t.movieId, t.tag))\n    val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n    val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap((mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)))\n    val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey((w: Int, z: Int) => w + z)\n    val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n    genresTagsCountSorted\n  }",
      "status" : "Killed"
    },
    {
      "id" : 161,
      "originalProgramId" : 7,
      "mutationOperator" : "MTR",
      "mutationOperatorDescription" : "Mapping Transformation Replacement",
      "mutantCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val tagsMovieIdKey: RDD[(Int, String)] = tags.map { (t: Tag) => (t.movieId, t.tag) }\n  val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n  val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap { (inputParameter: (Int, (Movie, String))) => {\n    val originalFunction = ((mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)))(_)\n    val originalValue = originalFunction(inputParameter)\n    originalValue.headOption\n  } }\n  val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey { (w: Int, z: Int) => w + z }\n  val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map { (g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n  genresTagsCountSorted\n}",
      "originalCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val tagsMovieIdKey: RDD[(Int, String)] = tags.map((t: Tag) => (t.movieId, t.tag))\n    val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n    val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap((mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)))\n    val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey((w: Int, z: Int) => w + z)\n    val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n    genresTagsCountSorted\n  }",
      "status" : "Killed"
    },
    {
      "id" : 162,
      "originalProgramId" : 7,
      "mutationOperator" : "MTR",
      "mutationOperatorDescription" : "Mapping Transformation Replacement",
      "mutantCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val tagsMovieIdKey: RDD[(Int, String)] = tags.map { (t: Tag) => (t.movieId, t.tag) }\n  val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n  val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap { (inputParameter: (Int, (Movie, String))) => {\n    val originalFunction = ((mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)))(_)\n    val originalValue = originalFunction(inputParameter)\n    originalValue.toList.tail\n  } }\n  val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey { (w: Int, z: Int) => w + z }\n  val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map { (g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n  genresTagsCountSorted\n}",
      "originalCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val tagsMovieIdKey: RDD[(Int, String)] = tags.map((t: Tag) => (t.movieId, t.tag))\n    val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n    val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap((mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)))\n    val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey((w: Int, z: Int) => w + z)\n    val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n    genresTagsCountSorted\n  }",
      "status" : "Killed"
    },
    {
      "id" : 163,
      "originalProgramId" : 7,
      "mutationOperator" : "MTR",
      "mutationOperatorDescription" : "Mapping Transformation Replacement",
      "mutantCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val tagsMovieIdKey: RDD[(Int, String)] = tags.map { (t: Tag) => (t.movieId, t.tag) }\n  val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n  val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap { (inputParameter: (Int, (Movie, String))) => {\n    val originalFunction = ((mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)))(_)\n    val originalValue = originalFunction(inputParameter)\n    originalValue.toList.reverse\n  } }\n  val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey { (w: Int, z: Int) => w + z }\n  val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map { (g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n  genresTagsCountSorted\n}",
      "originalCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val tagsMovieIdKey: RDD[(Int, String)] = tags.map((t: Tag) => (t.movieId, t.tag))\n    val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n    val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap((mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)))\n    val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey((w: Int, z: Int) => w + z)\n    val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n    genresTagsCountSorted\n  }",
      "status" : "Equivalent"
    },
    {
      "id" : 164,
      "originalProgramId" : 7,
      "mutationOperator" : "MTR",
      "mutationOperatorDescription" : "Mapping Transformation Replacement",
      "mutantCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val tagsMovieIdKey: RDD[(Int, String)] = tags.map { (t: Tag) => (t.movieId, t.tag) }\n  val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n  val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap { (inputParameter: (Int, (Movie, String))) => {\n    val originalFunction = ((mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)))(_)\n    val originalValue = originalFunction(inputParameter)\n    List[((String, String), Int)]()\n  } }\n  val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey { (w: Int, z: Int) => w + z }\n  val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map { (g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n  genresTagsCountSorted\n}",
      "originalCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val tagsMovieIdKey: RDD[(Int, String)] = tags.map((t: Tag) => (t.movieId, t.tag))\n    val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n    val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap((mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)))\n    val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey((w: Int, z: Int) => w + z)\n    val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n    genresTagsCountSorted\n  }",
      "status" : "Killed"
    },
    {
      "id" : 165,
      "originalProgramId" : 7,
      "mutationOperator" : "MTR",
      "mutationOperatorDescription" : "Mapping Transformation Replacement",
      "mutantCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val tagsMovieIdKey: RDD[(Int, String)] = tags.map { (t: Tag) => (t.movieId, t.tag) }\n  val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n  val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap { (mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)) }\n  val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey { (w: Int, z: Int) => w + z }\n  val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map { (inputParameter: ((String, String), Int)) => {\n    val originalFunction = ((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))(_)\n    val originalValue = originalFunction(inputParameter)\n    (\"\", originalValue._2)\n  } }\n  val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n  genresTagsCountSorted\n}",
      "originalCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val tagsMovieIdKey: RDD[(Int, String)] = tags.map((t: Tag) => (t.movieId, t.tag))\n    val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n    val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap((mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)))\n    val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey((w: Int, z: Int) => w + z)\n    val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n    genresTagsCountSorted\n  }",
      "status" : "Killed"
    },
    {
      "id" : 166,
      "originalProgramId" : 7,
      "mutationOperator" : "MTR",
      "mutationOperatorDescription" : "Mapping Transformation Replacement",
      "mutantCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val tagsMovieIdKey: RDD[(Int, String)] = tags.map { (t: Tag) => (t.movieId, t.tag) }\n  val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n  val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap { (mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)) }\n  val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey { (w: Int, z: Int) => w + z }\n  val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map { (inputParameter: ((String, String), Int)) => {\n    val originalFunction = ((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))(_)\n    val originalValue = originalFunction(inputParameter)\n    (originalValue._1, (\"\", originalValue._2._2))\n  } }\n  val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n  genresTagsCountSorted\n}",
      "originalCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val tagsMovieIdKey: RDD[(Int, String)] = tags.map((t: Tag) => (t.movieId, t.tag))\n    val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n    val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap((mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)))\n    val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey((w: Int, z: Int) => w + z)\n    val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n    genresTagsCountSorted\n  }",
      "status" : "Killed"
    },
    {
      "id" : 167,
      "originalProgramId" : 7,
      "mutationOperator" : "MTR",
      "mutationOperatorDescription" : "Mapping Transformation Replacement",
      "mutantCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val tagsMovieIdKey: RDD[(Int, String)] = tags.map { (t: Tag) => (t.movieId, t.tag) }\n  val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n  val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap { (mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)) }\n  val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey { (w: Int, z: Int) => w + z }\n  val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map { (inputParameter: ((String, String), Int)) => {\n    val originalFunction = ((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))(_)\n    val originalValue = originalFunction(inputParameter)\n    (originalValue._1, (originalValue._2._1, 0))\n  } }\n  val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n  genresTagsCountSorted\n}",
      "originalCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val tagsMovieIdKey: RDD[(Int, String)] = tags.map((t: Tag) => (t.movieId, t.tag))\n    val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n    val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap((mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)))\n    val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey((w: Int, z: Int) => w + z)\n    val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n    genresTagsCountSorted\n  }",
      "status" : "Killed"
    },
    {
      "id" : 168,
      "originalProgramId" : 7,
      "mutationOperator" : "MTR",
      "mutationOperatorDescription" : "Mapping Transformation Replacement",
      "mutantCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val tagsMovieIdKey: RDD[(Int, String)] = tags.map { (t: Tag) => (t.movieId, t.tag) }\n  val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n  val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap { (mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)) }\n  val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey { (w: Int, z: Int) => w + z }\n  val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map { (inputParameter: ((String, String), Int)) => {\n    val originalFunction = ((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))(_)\n    val originalValue = originalFunction(inputParameter)\n    (originalValue._1, (originalValue._2._1, 1))\n  } }\n  val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n  genresTagsCountSorted\n}",
      "originalCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val tagsMovieIdKey: RDD[(Int, String)] = tags.map((t: Tag) => (t.movieId, t.tag))\n    val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n    val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap((mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)))\n    val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey((w: Int, z: Int) => w + z)\n    val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n    genresTagsCountSorted\n  }",
      "status" : "Killed"
    },
    {
      "id" : 169,
      "originalProgramId" : 7,
      "mutationOperator" : "MTR",
      "mutationOperatorDescription" : "Mapping Transformation Replacement",
      "mutantCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val tagsMovieIdKey: RDD[(Int, String)] = tags.map { (t: Tag) => (t.movieId, t.tag) }\n  val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n  val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap { (mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)) }\n  val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey { (w: Int, z: Int) => w + z }\n  val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map { (inputParameter: ((String, String), Int)) => {\n    val originalFunction = ((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))(_)\n    val originalValue = originalFunction(inputParameter)\n    (originalValue._1, (originalValue._2._1, Int.MaxValue))\n  } }\n  val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n  genresTagsCountSorted\n}",
      "originalCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val tagsMovieIdKey: RDD[(Int, String)] = tags.map((t: Tag) => (t.movieId, t.tag))\n    val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n    val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap((mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)))\n    val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey((w: Int, z: Int) => w + z)\n    val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n    genresTagsCountSorted\n  }",
      "status" : "Killed"
    },
    {
      "id" : 170,
      "originalProgramId" : 7,
      "mutationOperator" : "MTR",
      "mutationOperatorDescription" : "Mapping Transformation Replacement",
      "mutantCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val tagsMovieIdKey: RDD[(Int, String)] = tags.map { (t: Tag) => (t.movieId, t.tag) }\n  val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n  val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap { (mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)) }\n  val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey { (w: Int, z: Int) => w + z }\n  val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map { (inputParameter: ((String, String), Int)) => {\n    val originalFunction = ((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))(_)\n    val originalValue = originalFunction(inputParameter)\n    (originalValue._1, (originalValue._2._1, Int.MinValue))\n  } }\n  val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n  genresTagsCountSorted\n}",
      "originalCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val tagsMovieIdKey: RDD[(Int, String)] = tags.map((t: Tag) => (t.movieId, t.tag))\n    val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n    val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap((mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)))\n    val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey((w: Int, z: Int) => w + z)\n    val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n    genresTagsCountSorted\n  }",
      "status" : "Killed"
    },
    {
      "id" : 171,
      "originalProgramId" : 7,
      "mutationOperator" : "MTR",
      "mutationOperatorDescription" : "Mapping Transformation Replacement",
      "mutantCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val tagsMovieIdKey: RDD[(Int, String)] = tags.map { (t: Tag) => (t.movieId, t.tag) }\n  val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n  val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap { (mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)) }\n  val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey { (w: Int, z: Int) => w + z }\n  val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map { (inputParameter: ((String, String), Int)) => {\n    val originalFunction = ((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))(_)\n    val originalValue = originalFunction(inputParameter)\n    (originalValue._1, (originalValue._2._1, -originalValue._2._2))\n  } }\n  val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n  genresTagsCountSorted\n}",
      "originalCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val tagsMovieIdKey: RDD[(Int, String)] = tags.map((t: Tag) => (t.movieId, t.tag))\n    val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n    val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap((mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)))\n    val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey((w: Int, z: Int) => w + z)\n    val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n    genresTagsCountSorted\n  }",
      "status" : "Killed"
    },
    {
      "id" : 172,
      "originalProgramId" : 7,
      "mutationOperator" : "DTI",
      "mutationOperatorDescription" : "Distinct Transformation Insertion",
      "mutantCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }.distinct()\n  val tagsMovieIdKey: RDD[(Int, String)] = tags.map { (t: Tag) => (t.movieId, t.tag) }\n  val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n  val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap { (mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)) }\n  val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey { (w: Int, z: Int) => w + z }\n  val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map { (g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n  genresTagsCountSorted\n}",
      "originalCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val tagsMovieIdKey: RDD[(Int, String)] = tags.map((t: Tag) => (t.movieId, t.tag))\n    val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n    val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap((mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)))\n    val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey((w: Int, z: Int) => w + z)\n    val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n    genresTagsCountSorted\n  }",
      "status" : "Lived"
    },
    {
      "id" : 173,
      "originalProgramId" : 7,
      "mutationOperator" : "DTI",
      "mutationOperatorDescription" : "Distinct Transformation Insertion",
      "mutantCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val tagsMovieIdKey: RDD[(Int, String)] = tags.map { (t: Tag) => (t.movieId, t.tag) }.distinct()\n  val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n  val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap { (mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)) }\n  val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey { (w: Int, z: Int) => w + z }\n  val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map { (g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n  genresTagsCountSorted\n}",
      "originalCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val tagsMovieIdKey: RDD[(Int, String)] = tags.map((t: Tag) => (t.movieId, t.tag))\n    val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n    val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap((mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)))\n    val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey((w: Int, z: Int) => w + z)\n    val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n    genresTagsCountSorted\n  }",
      "status" : "Killed"
    },
    {
      "id" : 174,
      "originalProgramId" : 7,
      "mutationOperator" : "DTI",
      "mutationOperatorDescription" : "Distinct Transformation Insertion",
      "mutantCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val tagsMovieIdKey: RDD[(Int, String)] = tags.map { (t: Tag) => (t.movieId, t.tag) }\n  val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey).distinct()\n  val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap { (mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)) }\n  val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey { (w: Int, z: Int) => w + z }\n  val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map { (g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n  genresTagsCountSorted\n}",
      "originalCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val tagsMovieIdKey: RDD[(Int, String)] = tags.map((t: Tag) => (t.movieId, t.tag))\n    val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n    val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap((mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)))\n    val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey((w: Int, z: Int) => w + z)\n    val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n    genresTagsCountSorted\n  }",
      "status" : "Killed"
    },
    {
      "id" : 175,
      "originalProgramId" : 7,
      "mutationOperator" : "DTI",
      "mutationOperatorDescription" : "Distinct Transformation Insertion",
      "mutantCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val tagsMovieIdKey: RDD[(Int, String)] = tags.map { (t: Tag) => (t.movieId, t.tag) }\n  val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n  val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap { (mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)) }.distinct()\n  val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey { (w: Int, z: Int) => w + z }\n  val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map { (g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n  genresTagsCountSorted\n}",
      "originalCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val tagsMovieIdKey: RDD[(Int, String)] = tags.map((t: Tag) => (t.movieId, t.tag))\n    val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n    val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap((mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)))\n    val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey((w: Int, z: Int) => w + z)\n    val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n    genresTagsCountSorted\n  }",
      "status" : "Killed"
    },
    {
      "id" : 176,
      "originalProgramId" : 7,
      "mutationOperator" : "DTI",
      "mutationOperatorDescription" : "Distinct Transformation Insertion",
      "mutantCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val tagsMovieIdKey: RDD[(Int, String)] = tags.map { (t: Tag) => (t.movieId, t.tag) }\n  val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n  val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap { (mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)) }\n  val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey { (w: Int, z: Int) => w + z }.distinct()\n  val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map { (g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n  genresTagsCountSorted\n}",
      "originalCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val tagsMovieIdKey: RDD[(Int, String)] = tags.map((t: Tag) => (t.movieId, t.tag))\n    val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n    val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap((mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)))\n    val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey((w: Int, z: Int) => w + z)\n    val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n    genresTagsCountSorted\n  }",
      "status" : "Killed"
    },
    {
      "id" : 177,
      "originalProgramId" : 7,
      "mutationOperator" : "DTI",
      "mutationOperatorDescription" : "Distinct Transformation Insertion",
      "mutantCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val tagsMovieIdKey: RDD[(Int, String)] = tags.map { (t: Tag) => (t.movieId, t.tag) }\n  val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n  val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap { (mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)) }\n  val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey { (w: Int, z: Int) => w + z }\n  val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map { (g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)) }.distinct()\n  val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n  genresTagsCountSorted\n}",
      "originalCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val tagsMovieIdKey: RDD[(Int, String)] = tags.map((t: Tag) => (t.movieId, t.tag))\n    val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n    val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap((mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)))\n    val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey((w: Int, z: Int) => w + z)\n    val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n    genresTagsCountSorted\n  }",
      "status" : "Lived"
    },
    {
      "id" : 178,
      "originalProgramId" : 7,
      "mutationOperator" : "DTI",
      "mutationOperatorDescription" : "Distinct Transformation Insertion",
      "mutantCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val tagsMovieIdKey: RDD[(Int, String)] = tags.map { (t: Tag) => (t.movieId, t.tag) }\n  val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n  val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap { (mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)) }\n  val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey { (w: Int, z: Int) => w + z }\n  val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map { (g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true).distinct()\n  genresTagsCountSorted\n}",
      "originalCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val tagsMovieIdKey: RDD[(Int, String)] = tags.map((t: Tag) => (t.movieId, t.tag))\n    val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n    val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap((mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)))\n    val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey((w: Int, z: Int) => w + z)\n    val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n    genresTagsCountSorted\n  }",
      "status" : "Killed"
    },
    {
      "id" : 179,
      "originalProgramId" : 7,
      "mutationOperator" : "ATR",
      "mutationOperatorDescription" : "Aggregation Transformation Replacement",
      "mutantCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val tagsMovieIdKey: RDD[(Int, String)] = tags.map { (t: Tag) => (t.movieId, t.tag) }\n  val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n  val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap { (mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)) }\n  val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey { (firstParameter: Int, secondParameter: Int) => firstParameter }\n  val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map { (g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n  genresTagsCountSorted\n}",
      "originalCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val tagsMovieIdKey: RDD[(Int, String)] = tags.map((t: Tag) => (t.movieId, t.tag))\n    val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n    val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap((mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)))\n    val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey((w: Int, z: Int) => w + z)\n    val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n    genresTagsCountSorted\n  }",
      "status" : "Killed"
    },
    {
      "id" : 180,
      "originalProgramId" : 7,
      "mutationOperator" : "ATR",
      "mutationOperatorDescription" : "Aggregation Transformation Replacement",
      "mutantCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val tagsMovieIdKey: RDD[(Int, String)] = tags.map { (t: Tag) => (t.movieId, t.tag) }\n  val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n  val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap { (mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)) }\n  val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey { (firstParameter: Int, secondParameter: Int) => secondParameter }\n  val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map { (g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n  genresTagsCountSorted\n}",
      "originalCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val tagsMovieIdKey: RDD[(Int, String)] = tags.map((t: Tag) => (t.movieId, t.tag))\n    val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n    val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap((mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)))\n    val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey((w: Int, z: Int) => w + z)\n    val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n    genresTagsCountSorted\n  }",
      "status" : "Killed"
    },
    {
      "id" : 181,
      "originalProgramId" : 7,
      "mutationOperator" : "ATR",
      "mutationOperatorDescription" : "Aggregation Transformation Replacement",
      "mutantCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val tagsMovieIdKey: RDD[(Int, String)] = tags.map { (t: Tag) => (t.movieId, t.tag) }\n  val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n  val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap { (mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)) }\n  val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey { (firstParameter: Int, secondParameter: Int) => {\n    val originalFunction = ((w: Int, z: Int) => w + z)(_, _)\n    originalFunction(firstParameter, firstParameter)\n  } }\n  val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map { (g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n  genresTagsCountSorted\n}",
      "originalCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val tagsMovieIdKey: RDD[(Int, String)] = tags.map((t: Tag) => (t.movieId, t.tag))\n    val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n    val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap((mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)))\n    val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey((w: Int, z: Int) => w + z)\n    val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n    genresTagsCountSorted\n  }",
      "status" : "Lived"
    },
    {
      "id" : 182,
      "originalProgramId" : 7,
      "mutationOperator" : "ATR",
      "mutationOperatorDescription" : "Aggregation Transformation Replacement",
      "mutantCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val tagsMovieIdKey: RDD[(Int, String)] = tags.map { (t: Tag) => (t.movieId, t.tag) }\n  val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n  val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap { (mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)) }\n  val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey { (firstParameter: Int, secondParameter: Int) => {\n    val originalFunction = ((w: Int, z: Int) => w + z)(_, _)\n    originalFunction(secondParameter, secondParameter)\n  } }\n  val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map { (g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n  genresTagsCountSorted\n}",
      "originalCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val tagsMovieIdKey: RDD[(Int, String)] = tags.map((t: Tag) => (t.movieId, t.tag))\n    val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n    val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap((mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)))\n    val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey((w: Int, z: Int) => w + z)\n    val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n    genresTagsCountSorted\n  }",
      "status" : "Lived"
    },
    {
      "id" : 183,
      "originalProgramId" : 7,
      "mutationOperator" : "ATR",
      "mutationOperatorDescription" : "Aggregation Transformation Replacement",
      "mutantCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val tagsMovieIdKey: RDD[(Int, String)] = tags.map { (t: Tag) => (t.movieId, t.tag) }\n  val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n  val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap { (mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)) }\n  val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey { (firstParameter: Int, secondParameter: Int) => {\n    val originalFunction = ((w: Int, z: Int) => w + z)(_, _)\n    originalFunction(secondParameter, firstParameter)\n  } }\n  val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map { (g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n  genresTagsCountSorted\n}",
      "originalCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val tagsMovieIdKey: RDD[(Int, String)] = tags.map((t: Tag) => (t.movieId, t.tag))\n    val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n    val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap((mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)))\n    val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey((w: Int, z: Int) => w + z)\n    val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n    genresTagsCountSorted\n  }",
      "status" : "Equivalent"
    },
    {
      "id" : 184,
      "originalProgramId" : 7,
      "mutationOperator" : "JTR",
      "mutationOperatorDescription" : "Join Transformation Replacement",
      "mutantCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val tagsMovieIdKey: RDD[(Int, String)] = tags.map { (t: Tag) => (t.movieId, t.tag) }\n  val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.leftOuterJoin(tagsMovieIdKey).map(tuple => (tuple._1, (tuple._2._1, tuple._2._2.getOrElse(\"\"))))\n  val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap { (mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)) }\n  val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey { (w: Int, z: Int) => w + z }\n  val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map { (g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n  genresTagsCountSorted\n}",
      "originalCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val tagsMovieIdKey: RDD[(Int, String)] = tags.map((t: Tag) => (t.movieId, t.tag))\n    val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n    val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap((mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)))\n    val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey((w: Int, z: Int) => w + z)\n    val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n    genresTagsCountSorted\n  }",
      "status" : "Lived"
    },
    {
      "id" : 185,
      "originalProgramId" : 7,
      "mutationOperator" : "JTR",
      "mutationOperatorDescription" : "Join Transformation Replacement",
      "mutantCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val tagsMovieIdKey: RDD[(Int, String)] = tags.map { (t: Tag) => (t.movieId, t.tag) }\n  val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.rightOuterJoin(tagsMovieIdKey).map(tuple => (tuple._1, (tuple._2._1.getOrElse(null.asInstanceOf[Movie]), tuple._2._2)))\n  val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap { (mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)) }\n  val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey { (w: Int, z: Int) => w + z }\n  val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map { (g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n  genresTagsCountSorted\n}",
      "originalCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val tagsMovieIdKey: RDD[(Int, String)] = tags.map((t: Tag) => (t.movieId, t.tag))\n    val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n    val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap((mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)))\n    val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey((w: Int, z: Int) => w + z)\n    val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n    genresTagsCountSorted\n  }",
      "status" : "Lived"
    },
    {
      "id" : 186,
      "originalProgramId" : 7,
      "mutationOperator" : "JTR",
      "mutationOperatorDescription" : "Join Transformation Replacement",
      "mutantCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val tagsMovieIdKey: RDD[(Int, String)] = tags.map { (t: Tag) => (t.movieId, t.tag) }\n  val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.fullOuterJoin(tagsMovieIdKey).map(tuple => (tuple._1, (tuple._2._1.getOrElse(null.asInstanceOf[Movie]), tuple._2._2.getOrElse(\"\"))))\n  val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap { (mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)) }\n  val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey { (w: Int, z: Int) => w + z }\n  val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map { (g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n  genresTagsCountSorted\n}",
      "originalCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val tagsMovieIdKey: RDD[(Int, String)] = tags.map((t: Tag) => (t.movieId, t.tag))\n    val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n    val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap((mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)))\n    val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey((w: Int, z: Int) => w + z)\n    val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n    genresTagsCountSorted\n  }",
      "status" : "Lived"
    },
    {
      "id" : 187,
      "originalProgramId" : 7,
      "mutationOperator" : "OTD",
      "mutationOperatorDescription" : "Order Transformation Deletion",
      "mutantCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val tagsMovieIdKey: RDD[(Int, String)] = tags.map { (t: Tag) => (t.movieId, t.tag) }\n  val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n  val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap { (mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)) }\n  val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey { (w: Int, z: Int) => w + z }\n  val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map { (g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped\n  genresTagsCountSorted\n}",
      "originalCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val tagsMovieIdKey: RDD[(Int, String)] = tags.map((t: Tag) => (t.movieId, t.tag))\n    val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n    val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap((mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)))\n    val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey((w: Int, z: Int) => w + z)\n    val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n    genresTagsCountSorted\n  }",
      "status" : "Killed"
    },
    {
      "id" : 188,
      "originalProgramId" : 7,
      "mutationOperator" : "OTI",
      "mutationOperatorDescription" : "Order Transformation Inversion",
      "mutantCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val tagsMovieIdKey: RDD[(Int, String)] = tags.map { (t: Tag) => (t.movieId, t.tag) }\n  val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n  val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap { (mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)) }\n  val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey { (w: Int, z: Int) => w + z }\n  val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map { (g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)) }\n  val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(false)\n  genresTagsCountSorted\n}",
      "originalCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val tagsMovieIdKey: RDD[(Int, String)] = tags.map((t: Tag) => (t.movieId, t.tag))\n    val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n    val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap((mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)))\n    val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey((w: Int, z: Int) => w + z)\n    val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n    genresTagsCountSorted\n  }",
      "status" : "Killed"
    },
    {
      "id" : 189,
      "originalProgramId" : 8,
      "mutationOperator" : "MTR",
      "mutationOperatorDescription" : "Mapping Transformation Replacement",
      "mutantCode" : "def tagBestSummarizeGenre(genresTagsCountSorted: RDD[(String, (String, Int))]) = {\n  val genresTagsCountSortedGrouped: RDD[(String, Iterable[(String, Int)])] = genresTagsCountSorted.groupByKey()\n  val genresTagsCountSortedTop5: RDD[(String, List[(String, Int)])] = genresTagsCountSortedGrouped.map { (inputParameter: (String, Iterable[(String, Int)])) => {\n    val originalFunction = ((l: (String, Iterable[(String, Int)])) => (l._1, l._2.toList.sortBy(_._2).reverse.take(5)))(_)\n    val originalValue = originalFunction(inputParameter)\n    (\"\", originalValue._2)\n  } }\n  genresTagsCountSortedTop5\n}",
      "originalCode" : "def tagBestSummarizeGenre(genresTagsCountSorted: RDD[(String, (String, Int))]) = {\n    val genresTagsCountSortedGrouped: RDD[(String, Iterable[(String, Int)])] = genresTagsCountSorted.groupByKey()\n    val genresTagsCountSortedTop5: RDD[(String, List[(String, Int)])] = genresTagsCountSortedGrouped.map((l: (String, Iterable[(String, Int)])) => (l._1, l._2.toList.sortBy(_._2).reverse.take(5)))\n    genresTagsCountSortedTop5\n  }",
      "status" : "Killed"
    },
    {
      "id" : 190,
      "originalProgramId" : 8,
      "mutationOperator" : "MTR",
      "mutationOperatorDescription" : "Mapping Transformation Replacement",
      "mutantCode" : "def tagBestSummarizeGenre(genresTagsCountSorted: RDD[(String, (String, Int))]) = {\n  val genresTagsCountSortedGrouped: RDD[(String, Iterable[(String, Int)])] = genresTagsCountSorted.groupByKey()\n  val genresTagsCountSortedTop5: RDD[(String, List[(String, Int)])] = genresTagsCountSortedGrouped.map { (inputParameter: (String, Iterable[(String, Int)])) => {\n    val originalFunction = ((l: (String, Iterable[(String, Int)])) => (l._1, l._2.toList.sortBy(_._2).reverse.take(5)))(_)\n    val originalValue = originalFunction(inputParameter)\n    (originalValue._1, List[(String, Int)](originalValue._2.head))\n  } }\n  genresTagsCountSortedTop5\n}",
      "originalCode" : "def tagBestSummarizeGenre(genresTagsCountSorted: RDD[(String, (String, Int))]) = {\n    val genresTagsCountSortedGrouped: RDD[(String, Iterable[(String, Int)])] = genresTagsCountSorted.groupByKey()\n    val genresTagsCountSortedTop5: RDD[(String, List[(String, Int)])] = genresTagsCountSortedGrouped.map((l: (String, Iterable[(String, Int)])) => (l._1, l._2.toList.sortBy(_._2).reverse.take(5)))\n    genresTagsCountSortedTop5\n  }",
      "status" : "Killed"
    },
    {
      "id" : 191,
      "originalProgramId" : 8,
      "mutationOperator" : "MTR",
      "mutationOperatorDescription" : "Mapping Transformation Replacement",
      "mutantCode" : "def tagBestSummarizeGenre(genresTagsCountSorted: RDD[(String, (String, Int))]) = {\n  val genresTagsCountSortedGrouped: RDD[(String, Iterable[(String, Int)])] = genresTagsCountSorted.groupByKey()\n  val genresTagsCountSortedTop5: RDD[(String, List[(String, Int)])] = genresTagsCountSortedGrouped.map { (inputParameter: (String, Iterable[(String, Int)])) => {\n    val originalFunction = ((l: (String, Iterable[(String, Int)])) => (l._1, l._2.toList.sortBy(_._2).reverse.take(5)))(_)\n    val originalValue = originalFunction(inputParameter)\n    (originalValue._1, originalValue._2.tail)\n  } }\n  genresTagsCountSortedTop5\n}",
      "originalCode" : "def tagBestSummarizeGenre(genresTagsCountSorted: RDD[(String, (String, Int))]) = {\n    val genresTagsCountSortedGrouped: RDD[(String, Iterable[(String, Int)])] = genresTagsCountSorted.groupByKey()\n    val genresTagsCountSortedTop5: RDD[(String, List[(String, Int)])] = genresTagsCountSortedGrouped.map((l: (String, Iterable[(String, Int)])) => (l._1, l._2.toList.sortBy(_._2).reverse.take(5)))\n    genresTagsCountSortedTop5\n  }",
      "status" : "Killed"
    },
    {
      "id" : 192,
      "originalProgramId" : 8,
      "mutationOperator" : "MTR",
      "mutationOperatorDescription" : "Mapping Transformation Replacement",
      "mutantCode" : "def tagBestSummarizeGenre(genresTagsCountSorted: RDD[(String, (String, Int))]) = {\n  val genresTagsCountSortedGrouped: RDD[(String, Iterable[(String, Int)])] = genresTagsCountSorted.groupByKey()\n  val genresTagsCountSortedTop5: RDD[(String, List[(String, Int)])] = genresTagsCountSortedGrouped.map { (inputParameter: (String, Iterable[(String, Int)])) => {\n    val originalFunction = ((l: (String, Iterable[(String, Int)])) => (l._1, l._2.toList.sortBy(_._2).reverse.take(5)))(_)\n    val originalValue = originalFunction(inputParameter)\n    (originalValue._1, originalValue._2.reverse)\n  } }\n  genresTagsCountSortedTop5\n}",
      "originalCode" : "def tagBestSummarizeGenre(genresTagsCountSorted: RDD[(String, (String, Int))]) = {\n    val genresTagsCountSortedGrouped: RDD[(String, Iterable[(String, Int)])] = genresTagsCountSorted.groupByKey()\n    val genresTagsCountSortedTop5: RDD[(String, List[(String, Int)])] = genresTagsCountSortedGrouped.map((l: (String, Iterable[(String, Int)])) => (l._1, l._2.toList.sortBy(_._2).reverse.take(5)))\n    genresTagsCountSortedTop5\n  }",
      "status" : "Killed"
    },
    {
      "id" : 193,
      "originalProgramId" : 8,
      "mutationOperator" : "MTR",
      "mutationOperatorDescription" : "Mapping Transformation Replacement",
      "mutantCode" : "def tagBestSummarizeGenre(genresTagsCountSorted: RDD[(String, (String, Int))]) = {\n  val genresTagsCountSortedGrouped: RDD[(String, Iterable[(String, Int)])] = genresTagsCountSorted.groupByKey()\n  val genresTagsCountSortedTop5: RDD[(String, List[(String, Int)])] = genresTagsCountSortedGrouped.map { (inputParameter: (String, Iterable[(String, Int)])) => {\n    val originalFunction = ((l: (String, Iterable[(String, Int)])) => (l._1, l._2.toList.sortBy(_._2).reverse.take(5)))(_)\n    val originalValue = originalFunction(inputParameter)\n    (originalValue._1, List[(String, Int)]())\n  } }\n  genresTagsCountSortedTop5\n}",
      "originalCode" : "def tagBestSummarizeGenre(genresTagsCountSorted: RDD[(String, (String, Int))]) = {\n    val genresTagsCountSortedGrouped: RDD[(String, Iterable[(String, Int)])] = genresTagsCountSorted.groupByKey()\n    val genresTagsCountSortedTop5: RDD[(String, List[(String, Int)])] = genresTagsCountSortedGrouped.map((l: (String, Iterable[(String, Int)])) => (l._1, l._2.toList.sortBy(_._2).reverse.take(5)))\n    genresTagsCountSortedTop5\n  }",
      "status" : "Killed"
    },
    {
      "id" : 194,
      "originalProgramId" : 8,
      "mutationOperator" : "DTI",
      "mutationOperatorDescription" : "Distinct Transformation Insertion",
      "mutantCode" : "def tagBestSummarizeGenre(genresTagsCountSorted: RDD[(String, (String, Int))]) = {\n  val genresTagsCountSortedGrouped: RDD[(String, Iterable[(String, Int)])] = genresTagsCountSorted.groupByKey().distinct()\n  val genresTagsCountSortedTop5: RDD[(String, List[(String, Int)])] = genresTagsCountSortedGrouped.map { (l: (String, Iterable[(String, Int)])) => (l._1, l._2.toList.sortBy(_._2).reverse.take(5)) }\n  genresTagsCountSortedTop5\n}",
      "originalCode" : "def tagBestSummarizeGenre(genresTagsCountSorted: RDD[(String, (String, Int))]) = {\n    val genresTagsCountSortedGrouped: RDD[(String, Iterable[(String, Int)])] = genresTagsCountSorted.groupByKey()\n    val genresTagsCountSortedTop5: RDD[(String, List[(String, Int)])] = genresTagsCountSortedGrouped.map((l: (String, Iterable[(String, Int)])) => (l._1, l._2.toList.sortBy(_._2).reverse.take(5)))\n    genresTagsCountSortedTop5\n  }",
      "status" : "Equivalent"
    },
    {
      "id" : 195,
      "originalProgramId" : 8,
      "mutationOperator" : "DTI",
      "mutationOperatorDescription" : "Distinct Transformation Insertion",
      "mutantCode" : "def tagBestSummarizeGenre(genresTagsCountSorted: RDD[(String, (String, Int))]) = {\n  val genresTagsCountSortedGrouped: RDD[(String, Iterable[(String, Int)])] = genresTagsCountSorted.groupByKey()\n  val genresTagsCountSortedTop5: RDD[(String, List[(String, Int)])] = genresTagsCountSortedGrouped.map { (l: (String, Iterable[(String, Int)])) => (l._1, l._2.toList.sortBy(_._2).reverse.take(5)) }.distinct()\n  genresTagsCountSortedTop5\n}",
      "originalCode" : "def tagBestSummarizeGenre(genresTagsCountSorted: RDD[(String, (String, Int))]) = {\n    val genresTagsCountSortedGrouped: RDD[(String, Iterable[(String, Int)])] = genresTagsCountSorted.groupByKey()\n    val genresTagsCountSortedTop5: RDD[(String, List[(String, Int)])] = genresTagsCountSortedGrouped.map((l: (String, Iterable[(String, Int)])) => (l._1, l._2.toList.sortBy(_._2).reverse.take(5)))\n    genresTagsCountSortedTop5\n  }",
      "status" : "Equivalent"
    }
  ],
  "removedMutants" : [
  ],
  "mutationOperatorsMetrics" : {
    "totalMutantsPerOperator" : {
      "FTD" : 0,
      "JTR" : 6,
      "UTR" : 6,
      "MTR" : 114,
      "UTD" : 8,
      "OTD" : 3,
      "BTR" : 0,
      "STR" : 0,
      "BTS" : 0,
      "ATR" : 20,
      "OTI" : 3,
      "DTI" : 32,
      "DTD" : 0,
      "NFTP" : 0,
      "UTS" : 3
    },
    "totalKilledMutantsPerOperator" : {
      "FTD" : 0,
      "JTR" : 0,
      "UTR" : 5,
      "MTR" : 103,
      "UTD" : 6,
      "OTD" : 1,
      "BTR" : 0,
      "STR" : 0,
      "BTS" : 0,
      "ATR" : 13,
      "OTI" : 1,
      "DTI" : 8,
      "DTD" : 0,
      "NFTP" : 0,
      "UTS" : 2
    },
    "totalLivedMutantsPerOperator" : {
      "FTD" : 0,
      "JTR" : 6,
      "UTR" : 1,
      "MTR" : 1,
      "UTD" : 2,
      "OTD" : 2,
      "BTR" : 0,
      "STR" : 0,
      "BTS" : 0,
      "ATR" : 4,
      "OTI" : 2,
      "DTI" : 13,
      "DTD" : 0,
      "NFTP" : 0,
      "UTS" : 1
    },
    "totalEquivalentMutantsPerOperator" : {
      "FTD" : 0,
      "JTR" : 0,
      "UTR" : 0,
      "MTR" : 10,
      "UTD" : 0,
      "OTD" : 0,
      "BTR" : 0,
      "STR" : 0,
      "BTS" : 0,
      "ATR" : 3,
      "OTI" : 0,
      "DTI" : 11,
      "DTD" : 0,
      "NFTP" : 0,
      "UTS" : 0
    },
    "totalErrorMutantsPerOperator" : {
      "FTD" : 0,
      "JTR" : 0,
      "UTR" : 0,
      "MTR" : 0,
      "UTD" : 0,
      "OTD" : 0,
      "BTR" : 0,
      "STR" : 0,
      "BTS" : 0,
      "ATR" : 0,
      "OTI" : 0,
      "DTI" : 0,
      "DTD" : 0,
      "NFTP" : 0,
      "UTS" : 0
    },
    "totalRemovedMutantsPerOperator" : {
      "FTD" : 0,
      "JTR" : 0,
      "UTR" : 0,
      "MTR" : 0,
      "UTD" : 0,
      "OTD" : 0,
      "BTR" : 0,
      "STR" : 0,
      "BTS" : 0,
      "ATR" : 0,
      "OTI" : 0,
      "DTI" : 0,
      "DTD" : 0,
      "NFTP" : 0,
      "UTS" : 0
    },
    "descriptionPerOperator" : {
      "FTD" : "Filter Transformation Deletion",
      "JTR" : "Join Transformation Replacement",
      "UTR" : "Unary Transformation Replacement",
      "MTR" : "Mapping Transformation Replacement",
      "UTD" : "Unary Transformation Deletion",
      "OTD" : "Order Transformation Deletion",
      "BTR" : "Binary Transformation Replacement",
      "STR" : "Set Transformation Replacement",
      "BTS" : "Binary Transformation Swap",
      "ATR" : "Aggregation Transformation Replacement",
      "OTI" : "Order Transformation Inversion",
      "DTI" : "Distinct Transformation Insertion",
      "DTD" : "Distinct Transformation Deletion",
      "NFTP" : "Negation of Filter Transformation Predicate",
      "UTS" : "Unary Transformation Swap"
    }
  },
  "totalProgramSources" : 1,
  "totalPrograms" : 8,
  "totalDatasets" : 44,
  "totalTransformations" : 33,
  "totalMutants" : 195,
  "totalKilledMutants" : 139,
  "totalLivedMutants" : 32,
  "totalEquivalentMutants" : 24,
  "totalErrorMutants" : 0,
  "totalRemovedMutants" : 0,
  "totalMutationScore" : 0.8128655
}