{
  "id" : 132,
  "originalProgramId" : 6,
  "mutationOperator" : "MTR",
  "mutationOperatorDescription" : "Mapping Transformation Replacement",
  "mutantCode" : "def bestMoviesDecade(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))], minimumVotesRequired: Double, meanOfMeansRatingsOfAllMovies: Double) = {\n  val ratingsStatisticsWithWR: RDD[((Int, String, Int), (Int, Double, Double, Double, Double))] = ratingsStats.map { (s: ((Int, String, Int), (Int, Double, Double, Double))) => (s._1, (s._2._1, s._2._2, s._2._3, s._2._4, weighted_rating(s._2._2, s._2._1.toDouble, minimumVotesRequired, meanOfMeansRatingsOfAllMovies))) }\n  val ratingsStatisticsWithWRDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = ratingsStatisticsWithWR.map { (inputParameter: (Tuple3[Int, String, Int], Tuple5[Int, Double, Double, Double, Double])) => {\n    val originalFunction = ((m: ((Int, String, Int), (Int, Double, Double, Double, Double))) => (m._1._3 / 10 * 10, (m._1._2, m._2)))(_)\n    val originalValue = originalFunction(inputParameter)\n    (-originalValue._1, originalValue._2)\n  } }\n  val groupByDecade: RDD[(Int, Iterable[(String, (Int, Double, Double, Double, Double))])] = ratingsStatisticsWithWRDecade.groupByKey()\n  val bestMoviesDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = groupByDecade.map { (j: (Int, Iterable[(String, (Int, Double, Double, Double, Double))])) => (j._1, j._2.reduce((j1, j2) => if (j1._2._5 > j2._2._5) j1 else j2)) }\n  val bestMoviesDecadeSorted: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = bestMoviesDecade.sortByKey(true)\n  bestMoviesDecadeSorted\n}",
  "originalCode" : "def bestMoviesDecade(ratingsStats: RDD[((Int, String, Int), (Int, Double, Double, Double))], minimumVotesRequired: Double, meanOfMeansRatingsOfAllMovies: Double) = {\n    val ratingsStatisticsWithWR: RDD[((Int, String, Int), (Int, Double, Double, Double, Double))] = ratingsStats.map((s: ((Int, String, Int), (Int, Double, Double, Double))) => (s._1, (s._2._1, s._2._2, s._2._3, s._2._4, weighted_rating(s._2._2, s._2._1.toDouble, minimumVotesRequired, meanOfMeansRatingsOfAllMovies))))\n    val ratingsStatisticsWithWRDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = ratingsStatisticsWithWR.map((m: (((Int, String, Int), (Int, Double, Double, Double, Double)))) => (m._1._3 / 10 * 10, (m._1._2, m._2)))\n    val groupByDecade: RDD[(Int, Iterable[(String, (Int, Double, Double, Double, Double))])] = ratingsStatisticsWithWRDecade.groupByKey()\n    val bestMoviesDecade: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = groupByDecade.map((j: (Int, Iterable[(String, (Int, Double, Double, Double, Double))])) => (j._1, j._2.reduce((j1, j2) => if (j1._2._5 > j2._2._5) j1 else j2)))\n    val bestMoviesDecadeSorted: RDD[(Int, (String, (Int, Double, Double, Double, Double)))] = bestMoviesDecade.sortByKey(true)\n    bestMoviesDecadeSorted\n  }",
  "status" : "Killed"
}