{
  "id" : 11,
  "originalProgramId" : 1,
  "mutationOperator" : "MTR",
  "mutationOperatorDescription" : "Mapping Transformation Replacement",
  "mutantCode" : "def parseRDDs(ratingsCSV: RDD[String], moviesCSV: RDD[String], tagsCSV: RDD[String]): (RDD[Rating], RDD[Movie], RDD[Tag]) = {\n  val ratings: RDD[Rating] = ratingsCSV.flatMap(parseRatings)\n  val movies: RDD[Movie] = moviesCSV.flatMap(parseMovies)\n  val tags: RDD[Tag] = tagsCSV.flatMap { (inputParameter: String) => {\n    val originalFunction = parseTags(_)\n    val originalValue = originalFunction(inputParameter)\n    originalValue.toList.reverse\n  } }\n  (ratings, movies, tags)\n}",
  "originalCode" : "def parseRDDs(ratingsCSV: RDD[String], moviesCSV: RDD[String], tagsCSV: RDD[String]): (RDD[Rating], RDD[Movie], RDD[Tag]) = {\n    val ratings: RDD[Rating] = ratingsCSV.flatMap(parseRatings)\n    val movies: RDD[Movie] = moviesCSV.flatMap(parseMovies)\n    val tags: RDD[Tag] = tagsCSV.flatMap(parseTags)\n    (ratings, movies, tags)\n  }",
  "status" : "Equivalent"
}