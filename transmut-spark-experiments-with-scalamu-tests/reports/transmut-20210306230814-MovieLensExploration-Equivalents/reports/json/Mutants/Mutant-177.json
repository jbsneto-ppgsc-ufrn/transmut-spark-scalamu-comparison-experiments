{
  "id" : 177,
  "originalProgramId" : 7,
  "mutationOperator" : "DTI",
  "mutationOperatorDescription" : "Distinct Transformation Insertion",
  "mutantCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n  val moviesIdKey: RDD[(Int, Movie)] = movies.map { (m: Movie) => (m.movieId, m) }\n  val tagsMovieIdKey: RDD[(Int, String)] = tags.map { (t: Tag) => (t.movieId, t.tag) }\n  val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n  val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap { (mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)) }\n  val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey { (w: Int, z: Int) => w + z }\n  val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map { (g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)) }.distinct()\n  val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n  genresTagsCountSorted\n}",
  "originalCode" : "def genresTagsCount(movies: RDD[Movie], tags: RDD[Tag]) = {\n    val moviesIdKey: RDD[(Int, Movie)] = movies.map((m: Movie) => (m.movieId, m))\n    val tagsMovieIdKey: RDD[(Int, String)] = tags.map((t: Tag) => (t.movieId, t.tag))\n    val joinMoviesTags: RDD[(Int, (Movie, String))] = moviesIdKey.join(tagsMovieIdKey)\n    val genresTags: RDD[((String, String), Int)] = joinMoviesTags.flatMap((mg: (Int, (Movie, String))) => mg._2._1.genres.map(g => ((g, mg._2._2), 1)))\n    val genresTagsCounts: RDD[((String, String), Int)] = genresTags.reduceByKey((w: Int, z: Int) => w + z)\n    val genresTagsCountMapped: RDD[(String, (String, Int))] = genresTagsCounts.map((g: ((String, String), Int)) => (g._1._1, (g._1._2, g._2)))\n    val genresTagsCountSorted: RDD[(String, (String, Int))] = genresTagsCountMapped.sortByKey(true)\n    genresTagsCountSorted\n  }",
  "status" : "Lived"
}